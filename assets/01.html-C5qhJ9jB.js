import{aq as n,ar as a,as as e,at as o}from"./app-Cok9BT0p.js";const t="/note-front/backend/node/base/001.jpeg",p={};function l(c,s){return o(),a("div",null,s[0]||(s[0]=[e('<h1 id="一、认识node-js" tabindex="-1"><a class="header-anchor" href="#一、认识node-js"><span>一、认识node.js</span></a></h1><h2 id="_1-1-概述" tabindex="-1"><a class="header-anchor" href="#_1-1-概述"><span>1.1 概述</span></a></h2><blockquote><p>Nodejs 不是 JavaScript 应用和编程语言，而是其运行时。它基于 Google 的 V8 引擎，采用异步 I/O 和事件驱动架构，使用 npm 包管理器，适合 I/O 密集型应用。其架构分层，有多种应用场景，涵盖前端、后端、爬虫等多领域，也适用于单元测试、CICD、反向代理等方面。</p></blockquote><h3 id="_1-1-1-基本介绍" tabindex="-1"><a class="header-anchor" href="#_1-1-1-基本介绍"><span>1.1.1 基本介绍</span></a></h3><ol><li><p>nodejs 并不是JavaScript应用，也不是编程语言，因为编程语言使用的JavaScript,Nodejs是JavaScript的运行时。</p><ul><li>Node.js并不是JavaScript应用：这里的&quot;JavaScript应用&quot;通常指用JavaScript编写的程序或软件。而Node.js本身并不是用JavaScript编写的一个应用程序；它是一个提供环境让JavaScript应用程序运行的平台。</li><li>Node.js也不是编程语言：编程语言是一种用于编写程序的标准化通信方法，例如JavaScript、Python和C++等。Node.js并不引入新的编程语言，它使用的是JavaScript这门已经存在的语言。</li><li>Node.js是JavaScript的运行时：运行时（runtime）指的是程序运行时的环境，它提供了程序运行所需的内置库、工具和其他资源。Node.js为JavaScript提供了一个运行时环境，这意味着它让JavaScript代码可以在服务器端运行，而不仅仅是在浏览器中。在此之前，JavaScript主要用于浏览器环境中，用于增强网页的交互性。Node.js的出现扩展了JavaScript的使用范围，让开发者可以用JavaScript编写服务器端软件，进行文件操作，以及进行网络通信等。</li></ul></li><li><p>Node.js是建立在Google的V8 JavaScript引擎上的，这个引擎用C++编写，使得我们写的JavaScript代码能够被转换并执行。Node.js采用了异步I/O和事件驱动的架构，这让它在处理大量并发请求时变得非常高效。它利用非阻塞I/O接口和一个名为libuv的库来实现事件循环，从而使开发者能够创建高性能且易于扩展的应用程序。</p></li><li><p>Node.js使用npm（Node Package Manager）作为其包管理器，这和Python的pip或Java的Maven相似。Npm是一个巨大的库，提供了数以百万计的可复用代码模块，可通过官网访问。</p></li><li><p>Node.js特别适合于I/O密集型的应用，比如网络服务器或数据库操作，因为它的I/O处理能力非常强大。但对于CPU密集型任务，比如图像处理或大量的计算操作，Node.js可能不是最佳选择，因为它的单线程模型可能会导致性能瓶颈。不过，对于需要执行CPU密集型任务的场景，可以通过编写C++插件或使用Node.js的Cluster模块来提升性能。</p></li></ol><p>在计算机术语中，I/O代表输入/输出（Input/Output），它涵盖了系统进行数据传输的所有操作，包括从磁盘读取数据、向磁盘写入数据、通过网络发送数据、从网络接收数据等。当我们提到Node.js适合I/O密集型的应用时，我们指的是那些涉及大量读写操作、网络请求或者任何需要频繁访问外部资源的应用。</p><p>I/O密集型应用的典型场景包括：</p><ul><li>网络服务，如Web服务器或API端点，它们需要处理大量并发的客户端请求。</li><li>文件处理系统，涉及对文件的频繁读写操作。</li><li>数据库操作，尤其是那些需要频繁查询和更新数据库的应用。</li><li>实时通信服务，比如聊天服务器或协同编辑工具，它们需要快速、频繁地在用户之间传递信息。</li></ul><p>Node.js之所以适合这些场景，是因为它的非阻塞I/O模型使得在一个事件循环中并行处理大量的I/O请求成为可能，而不必为每个I/O操作启动新的线程，从而提高资源利用率和应用性能。</p><h3 id="_1-1-2-nodejs架构图" tabindex="-1"><a class="header-anchor" href="#_1-1-2-nodejs架构图"><span>1.1.2 NodeJS架构图</span></a></h3><p><img src="'+t+`" alt=""></p><p>这张图展示了Node.js的架构和流程，从JavaScript代码的运行到底层的系统调用。图中的结构可以从上到下解释如下：</p><ol><li>Node.js API: 最上层是Node.js提供的各种内置模块的API，例如文件系统（fs）、HTTP、操作系统信息（os）、网络（net）、数据压缩（zlib）等。这是开发者直接与之交互的层面。</li><li>Node.js bindings (JS和C/C++的接口): 这一层是JavaScript和C/C++之间的桥梁。Node.js的很多API在JavaScript层面是无法直接访问操作系统功能的，它们需要通过这一层的绑定调用C/C++编写的库。</li><li>C/C++ 层面的 addon 和 Napi: 这是一些高级的接口和模块，它们使用C/C++编写，可以通过Node.js的API访问。开发者可以编写addon来扩展Node.js的功能。</li><li>底层技术支持: <ul><li>V8: 这是JavaScript执行的引擎，负责编译和运行JavaScript代码。</li><li>libuv: 这是提供事件驱动的I/O的库，支持异步操作和跨平台功能。</li><li>DNS解析 (c-ares): 这是一个异步DNS请求库，Node.js用它来执行非阻塞的名称解析。</li><li>SSL/TLS (OpenSSL): 这里的SSL或者是TSL证书都是使用这个C or C++编写的OpenSSL解析的</li><li>http-parser: 这是解析HTTP消息的工具。</li></ul></li></ol><p>整个图的意图是展示Node.js从接收JavaScript调用到最终的系统级执行是如何通过不同层次交互的，确保高性能和高扩展性。这种分层架构让Node.js能够在保持JavaScript编写的简单性的同时，利用C/C++的强大能力来进行系统级别的操作。</p><h3 id="_1-1-3-nodejs-应用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-3-nodejs-应用场景"><span>1.1.3 Nodejs 应用场景</span></a></h3><p>以下展示并不是所有东西都是nodejs编写而是运行环境可以配合nodejs或者依靠nodejs运行。</p><ol><li><p>前端</p><ul><li>Vue, Angular, React: 这些是流行的前端JavaScript框架，开发者通常会使用Node.js来运行前端构建工具，如Webpack，或者在开发阶段运行开发服务器。</li><li>Nuxt.js, Next.js: 分别为Vue和React的服务端渲染(SSR)框架，可以用Node.js来执行SSR，提高首次加载性能和SEO效果。</li></ul></li><li><p>后端</p><ul><li>Serverless: Node.js可以在无服务器架构中作为执行运行时，处理事件驱动的函数。</li><li>Web应用 (Express, NestJS, Koa): 这些是Node.js的Web框架，用于快速开发Web服务和API。</li><li>gRPC: 一个高性能的远程过程调用(RPC)框架，Node.js支持gRPC服务器和客户端。</li></ul></li><li><p>爬虫</p><ul><li>Puppeteer, Cheerio: Node.js库，用于Web爬取，Puppeteer提供了一个高层次的API来控制Chrome，Cheerio用于解析HTML。</li></ul></li><li><p>BFF层/网关层</p><ul><li>Socket.io: 一个实时、双向和基于事件的通信库，常用于Node.js来构建实时Web应用。</li></ul></li><li><p>桌面端</p><ul><li>Electron, Tauri, NWjs: 这些框架允许开发者使用Node.js和前端技术来构建跨平台的桌面应用。</li></ul></li><li><p>移动端</p><ul><li>Weex, Ionic, React Native: 允许使用JavaScript开发移动应用，Node.js通常用于提供CLI工具，编译或打包应用。</li></ul></li><li><p>基建端</p><ul><li>Webpack, Vite, Rollup, Gulp: 前端打包和构建工具，运行在Node.js环境中，处理资源编译、打包、优化等任务。</li><li>Less, Scss, PostCSS: CSS预处理器，Node.js用于运行这些工具，将代码转换为浏览器可识别的CSS。</li><li>Babel, SWC: JavaScript编译器，将ES6+代码转译为向后兼容的JavaScript代码。</li><li>Inquirer, Command, Shelljs: Node.js库，用于创建命令行应用、处理命令行输入和执行Unix shell命令。</li></ul></li><li><p>嵌入式</p><ul><li>Ruff.js: Ruff.js 是一个基于 JavaScript 的嵌入式软件开发框架，它可以让开发者使用 JavaScript 或 TypeScript 来开发嵌入式应用。这种情况下，Node.js 可能被用来运行一些开发工具，或者Ruff提供了与Node.js类似的API。</li></ul></li><li><p>单元测试</p><ul><li>Jest: Jest 是一个流行的JavaScript测试框架，它对异步测试支持良好，易于配置，还自带断言库。它经常用于Node.js应用的单元测试。</li><li>Vitest: Vitest 是一个由 Vite 驱动的单元测试框架，它借鉴了 Jest 的API设计，用于在 Vite 项目中进行快速单元测试。</li><li>e2e (端对端测试): 端对端测试是一种测试方法，通常用于测试应用的流程从开始到结束是否按预期工作。这些测试可以在 Node.js 环境中运行，使用诸如 Puppeteer、Playwright 等工具模拟用户交互。</li></ul></li><li><p>CICD (持续集成和持续部署)</p><ul><li>Jenkins: Jenkins 是一个开源的自动化服务器，用于自动化软件开发过程中的构建、测试和部署。它可以与Node.js项目集成，自动化JavaScript的构建和测试过程。</li><li>Docker: Docker 是一个开源的容器化平台，它可以将应用及其环境打包在一个容器中运行。对于Node.js，你可以创建包含Node.js环境的容器来运行应用。</li><li>Husky: Husky 是一个工具，可以防止不良的git commit或git push，通过在git钩子中运行测试和linters。它常用于Node.js项目来提高代码质量。</li><li>miniprogram-ci: 这是微信小程序的持续集成工具，Node.js可以用来执行这个工具，自动化小程序的构建和发布过程。</li></ul></li><li><p>反向代理</p><ul><li>http-proxy: http-proxy 是一个Node.js的库，为实现HTTP代理的功能提供了支持。它可以用于Node.js应用中创建反向代理服务器，转发客户端请求到其他服务器。</li><li>AnyProxy: AnyProxy 是一个可扩展的HTTP代理服务器，用Node.js编写，可以用来拦截和修改HTTP请求/响应，用于测试或开发。</li></ul></li></ol><h2 id="_1-2-模块化" tabindex="-1"><a class="header-anchor" href="#_1-2-模块化"><span>1.2 模块化</span></a></h2><p>Node.js 中两大主流的模块化规范：经典的 <strong>CommonJS (CJS)</strong> 和现代标准的 <strong>ES Modules (ESM)</strong>。理解它们的工作原理、差异以及如何在项目中选择和使用，是每一位 Node.js 开发者必备的核心技能。让我们一起学习代码的“整理术”吧！</p><h3 id="_1-2-1-告别混乱-为何我们需要模块化" tabindex="-1"><a class="header-anchor" href="#_1-2-1-告别混乱-为何我们需要模块化"><span>1.2.1 告别混乱：为何我们需要模块化？</span></a></h3><p>在模块化概念出现之前，JavaScript 代码（尤其是在早期浏览器环境中）常常面临一些棘手的问题：</p><ol><li><strong>全局命名空间污染:</strong> 所有变量、函数都定义在全局作用域下，很容易发生命名冲突，一个脚本不小心覆盖了另一个脚本的变量，导致难以追踪的 bug。就像往一个公共池塘里扔东西，很快就乱成一团。</li><li><strong>代码组织困难:</strong> 大型项目的所有代码挤在一个或少数几个文件里，逻辑混乱，难以定位和修改特定功能。</li><li><strong>复用性差:</strong> 想要复用一段代码，往往只能复制粘贴，一旦原始代码需要修改，所有副本都需要同步更新，费时费力还容易出错。</li><li><strong>依赖管理混乱:</strong> 文件之间的依赖关系不明确，不知道修改一个文件会影响到哪些其他文件，维护成本极高。</li></ol><p><strong>模块化就是解决这些问题的良药！</strong> 一个良好的模块系统能带来诸多好处：</p><ul><li><strong>封装与隔离:</strong> 每个模块都有自己的作用域，内部变量和函数默认对外不可见，避免了全局污染。</li><li><strong>明确的接口:</strong> 模块通过特定的语法（如 <code>exports</code> 或 <code>export</code>）显式地暴露希望对外提供的功能。</li><li><strong>代码复用:</strong> 可以轻松地将通用功能封装成模块，在需要的地方导入即可。</li><li><strong>依赖清晰:</strong> 模块之间的依赖关系通过导入语句（如 <code>require</code> 或 <code>import</code>）明确声明，易于管理和理解。</li><li><strong>可维护性:</strong> 将大型项目拆分成更小、更专注的模块，使得代码更容易理解、测试和维护。</li><li><strong>团队协作:</strong> 不同开发者可以并行开发不同的模块，减少互相干扰。</li></ul><p>Node.js 选择了模块化作为其核心特性之一，为构建大型、复杂的服务器端应用奠定了基础。</p><h3 id="_1-2-2-node-js-的-老臣-commonjs-cjs-规范" tabindex="-1"><a class="header-anchor" href="#_1-2-2-node-js-的-老臣-commonjs-cjs-规范"><span>1.2.2 Node.js 的“老臣”：CommonJS (CJS) 规范</span></a></h3><p>Node.js 在早期采用了 <strong>CommonJS</strong> 规范作为其模块系统。即使现在 ES Modules 已经成为官方标准，CommonJS 仍然在庞大的 Node.js 生态系统中广泛使用，理解它至关重要。</p><p><strong>核心概念：</strong></p><ol><li><p><strong><code>require()</code> - 导入模块:</strong></p><ul><li><strong>作用:</strong> 用于在一个模块中加载并执行另一个模块，并返回该模块导出的内容 (<code>module.exports</code>)。</li><li><strong>同步加载:</strong> 这是 CommonJS 最重要的特性之一。当执行到 <code>require()</code> 时，Node.js 会<strong>暂停当前模块的执行</strong>，去查找、加载、编译并执行被依赖的模块，拿到其 <code>module.exports</code> 后，再<strong>恢复当前模块的执行</strong>。这在服务器启动时加载依赖通常没问题，但在某些场景下可能成为性能瓶颈。</li><li><strong>路径解析:</strong> <code>require()</code> 查找模块的规则： <ul><li><strong>核心模块:</strong> 如果是 Node.js 内置模块（如 <code>http</code>, <code>fs</code>, <code>path</code>），直接返回核心模块。</li><li><strong>路径模块:</strong> 如果以 <code>/</code>, <code>./</code>, <code>../</code> 开头，则按相对路径或绝对路径查找 <code>.js</code>, <code>.json</code>, <code>.node</code> 文件。</li><li><strong>第三方模块:</strong> 如果是非路径、非核心模块（如 <code>require(&#39;express&#39;)</code>），Node.js 会从当前目录的 <code>node_modules</code> 文件夹开始查找，如果找不到，再往上一级目录的 <code>node_modules</code> 查找，依此类推，直到根目录。</li></ul></li><li><strong>模块缓存:</strong> 为了提高性能，Node.js 会缓存已加载的模块。第一次 <code>require()</code> 一个模块时，它会被加载、执行并缓存。后续再次 <code>require()</code> 同一个模块时，会直接从缓存中返回 <code>module.exports</code>，不会重复执行模块代码。</li></ul></li><li><p><strong><code>module.exports</code> - 导出模块内容:</strong></p><ul><li><strong><code>module</code> 对象:</strong> 每个 CommonJS 模块内部都有一个 <code>module</code> 对象，它代表当前模块。</li><li><strong><code>module.exports</code> 属性:</strong> <code>module</code> 对象有一个 <code>exports</code> 属性（即 <code>module.exports</code>），<strong>这个属性的初始值是一个空对象 <code>{}</code></strong>。<strong><code>require()</code> 函数最终返回的就是目标模块的 <code>module.exports</code> 的值。</strong></li><li><strong>导出方式:</strong> 你可以给这个空对象添加属性来导出多个值，也可以直接将 <code>module.exports</code> 赋值为一个函数、类、数组、字符串等任何你想导出的单一值。</li></ul></li><li><p><strong><code>exports</code> - <code>module.exports</code> 的便捷别名:</strong></p><ul><li>为了方便，Node.js 在每个模块顶部还提供了一个变量 <code>exports</code>，它<strong>默认指向 <code>module.exports</code></strong> (<code>exports = module.exports</code>)。</li><li><strong>作用:</strong> 你可以直接通过 <code>exports.propertyName = value</code> 的方式来添加导出项，这实际上是修改了 <code>module.exports</code> 对象。</li><li><strong>重要陷阱 (The Pitfall):</strong> <strong>永远不要直接给 <code>exports</code> 变量赋值 (<code>exports = ...</code>)！</strong> 因为这样做只会改变 <code>exports</code> 变量本身的指向，让它不再指向 <code>module.exports</code>。而 <code>require()</code> 最终返回的是 <code>module.exports</code>，不是 <code>exports</code>。</li></ul></li></ol><p><strong>代码示例：</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// math.js - 定义一个数学模块 (CommonJS)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式一：通过 exports 添加属性 (推荐)</span></span>
<span class="line">exports<span class="token punctuation">.</span>add <span class="token operator">=</span> add<span class="token punctuation">;</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">=</span> <span class="token constant">PI</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式二：直接修改 module.exports 对象 (可以导出任何类型)</span></span>
<span class="line"><span class="token comment">// module.exports = {</span></span>
<span class="line"><span class="token comment">//   add: add,</span></span>
<span class="line"><span class="token comment">//   PI: PI</span></span>
<span class="line"><span class="token comment">// };</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 方式三：导出单个函数 (如果模块只提供一个功能)</span></span>
<span class="line"><span class="token comment">// module.exports = add;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 错误的方式：这不会导出任何东西！</span></span>
<span class="line"><span class="token comment">// exports = {</span></span>
<span class="line"><span class="token comment">//   add: add,</span></span>
<span class="line"><span class="token comment">//   PI: PI</span></span>
<span class="line"><span class="token comment">// };</span></span>
<span class="line"><span class="token comment">// 因为这改变了 exports 的指向，module.exports 仍然是 {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// app.js - 使用 math 模块 (CommonJS)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 使用 require 导入 math.js 模块</span></span>
<span class="line"><span class="token comment">//    Node.js 会找到 math.js，执行它，并将其 module.exports 赋值给 mathConstants 变量</span></span>
<span class="line"><span class="token keyword">const</span> mathUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./math.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用相对路径</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 使用导入的模块</span></span>
<span class="line"><span class="token keyword">const</span> sum <span class="token operator">=</span> mathUtils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> circumference <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> mathUtils<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">5 + 3 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>sum<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5 + 3 = 8</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">半径为 10 的圆周长大约是: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>circumference<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 半径为 10 的圆周长大约是: 62.8318</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 如果 math.js 使用 module.exports = add; 导出单个函数</span></span>
<span class="line"><span class="token comment">// const addFunction = require(&#39;./math.js&#39;);</span></span>
<span class="line"><span class="token comment">// const sum = addFunction(5, 3);</span></span>
<span class="line"><span class="token comment">// console.log(sum); // 输出: 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>CommonJS 总结:</strong> 简单、直观、同步加载、通过 <code>require</code> 导入、通过 <code>module.exports</code> 或 <code>exports</code> 导出。它是 Node.js 世界的基石。</p><h3 id="_1-2-3-现代标准-es-modules-esm" tabindex="-1"><a class="header-anchor" href="#_1-2-3-现代标准-es-modules-esm"><span>1.2.3 现代标准：ES Modules (ESM)</span></a></h3><p>随着 ECMAScript 2015 (ES6) 的发布，JavaScript 拥有了官方的、标准化的模块系统——<strong>ES Modules (ESM)</strong>。Node.js 从 v8.5.0 版本开始实验性支持，并在 v13.2.0 版本后正式稳定支持。ESM 旨在提供一个统一的、跨平台（浏览器和服务器）的模块解决方案。</p><p><strong>核心概念：</strong></p><ol><li><p><strong><code>export</code> - 导出模块内容:</strong></p><ul><li><p><strong>命名导出 (Named Exports):</strong> 可以导出多个变量、函数或类。使用 <code>export</code> 关键字。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// utils.mjs - 使用命名导出</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>默认导出 (Default Export):</strong> 每个模块只能有一个默认导出。通常用于导出模块的主要功能（比如一个类或函数）。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// logger.mjs - 使用默认导出</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[LOG] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 或者导出一个类</span></span>
<span class="line"><span class="token comment">// export default class Logger { /* ... */ }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以同时使用命名导出和默认导出。</p></li></ul></li><li><p><strong><code>import</code> - 导入模块内容:</strong></p><ul><li><p><strong>导入命名导出:</strong> 使用花括号 <code>{}</code> 指定要导入的变量名，名称必须与导出时一致。可以 使用 <code>as</code> 重命名。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.mjs</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> subtract<span class="token punctuation">,</span> <span class="token constant">PI</span> <span class="token keyword">as</span> π <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils.mjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>π<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14159</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>导入默认导出:</strong> 直接给导入的值指定一个名称。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.mjs</span></span>
<span class="line"><span class="token keyword">import</span> myLogger <span class="token keyword">from</span> <span class="token string">&#39;./logger.mjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">myLogger</span><span class="token punctuation">(</span><span class="token string">&#39;应用程序启动&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [LOG] 应用程序启动</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>导入整个模块 (Namespace Import):</strong> 将模块的所有命名导出作为一个对象导入。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.mjs</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> mathUtils <span class="token keyword">from</span> <span class="token string">&#39;./utils.mjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mathUtils<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mathUtils<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3.14159</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>动态导入 <code>import()</code>:</strong> ESM 还提供了 <code>import()</code> 函数，它返回一个 Promise，允许你在运行时<strong>异步地</strong>加载模块。这对于代码分割、按需加载非常有用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.mjs</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadAndUseUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./utils.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 99</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;加载模块失败:&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">loadAndUseUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>如何在 Node.js 中使用 ESM？</strong></p><p>Node.js 需要明确知道某个文件应该被当作 ESM 模块来处理。主要有两种方式：</p><ol><li><strong>使用 <code>.mjs</code> 文件扩展名:</strong> 将你的模块文件命名为 <code>.mjs</code> 后缀。Node.js 会自动将其识别为 ESM。</li><li><strong>在 <code>package.json</code> 中设置 <code>&quot;type&quot;: &quot;module&quot;</code>:</strong><ul><li>在项目的 <code>package.json</code> 文件中添加顶级字段 <code>&quot;type&quot;: &quot;module&quot;</code>。</li><li>这样设置后，该项目下的所有 <code>.js</code> 文件（以及没有扩展名的文件）都会被默认视为 ESM。</li><li>如果你在这种模式下仍需要使用 CommonJS 文件，可以将该文件的扩展名改为 <code>.cjs</code>。</li></ul></li></ol><p><strong>ESM 的关键特性:</strong></p><ul><li><strong>静态分析 (Static Structure):</strong> <code>import</code> 和 <code>export</code> 语句只能出现在模块的顶层作用域（不能在函数或条件语句中）。这使得工具（如打包器、代码检查器）可以在<strong>不执行代码</strong>的情况下分析模块依赖关系，实现 Tree Shaking（移除未使用的代码）等优化。</li><li><strong>异步加载设计:</strong> ESM 标准本身是围绕异步加载设计的（尽管 Node.js 的底层加载在某些情况下可能是同步完成的），更适合浏览器环境和未来的异步场景。</li><li><strong><code>this</code> 指向:</strong> 在 ESM 模块的顶层作用域中，<code>this</code> 的值是 <code>undefined</code>。而在 CommonJS 中，顶层 <code>this</code> 指向 <code>module.exports</code>。</li></ul><p><strong>代码示例 (ESM):</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// geometry.mjs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">calculateCircumference</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> pi <span class="token operator">*</span> radius<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 默认导出一个计算面积的函数</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token parameter">radius</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> pi <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// app.mjs (假设 package.json 中有 &quot;type&quot;: &quot;module&quot;, 或者此文件为 app.mjs)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 导入命名导出和默认导出</span></span>
<span class="line"><span class="token keyword">import</span> calculateArea<span class="token punctuation">,</span> <span class="token punctuation">{</span> calculateCircumference<span class="token punctuation">,</span> pi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./geometry.mjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 也可以分开导入</span></span>
<span class="line"><span class="token comment">// import calculateArea from &#39;./geometry.mjs&#39;;</span></span>
<span class="line"><span class="token comment">// import { calculateCircumference, pi } from &#39;./geometry.mjs&#39;;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> radius <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> area <span class="token operator">=</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> circumference <span class="token operator">=</span> <span class="token function">calculateCircumference</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">半径 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>radius<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - 面积: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>area<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出:  - 面积: 78.53975</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - 周长: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>circumference<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出:  - 周长: 31.4159</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"> - PI 值: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>pi<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 输出:  - PI 值: 3.14159</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 动态导入示例</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadGeometryDynamically</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> geo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./geometry.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;动态加载:&#39;</span><span class="token punctuation">,</span> geo<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 动态加载: 12.56636</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">loadGeometryDynamically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>ESM 总结:</strong> ECMAScript 官方标准、静态分析、设计上异步、通过 <code>import</code>/<code>export</code> 导入导出。是 JavaScript 模块化的未来趋势。</p><h3 id="_1-2-4-commonjs-vs-es-modules-终极对决" tabindex="-1"><a class="header-anchor" href="#_1-2-4-commonjs-vs-es-modules-终极对决"><span>1.2.4 CommonJS vs ES Modules: 终极对决</span></a></h3><table><thead><tr><th>特性</th><th>CommonJS (CJS)</th><th>ES Modules (ESM)</th></tr></thead><tbody><tr><td><strong>关键字</strong></td><td><code>require</code>, <code>module.exports</code>, <code>exports</code></td><td><code>import</code>, <code>export</code>, <code>export default</code></td></tr><tr><td><strong>加载方式</strong></td><td>同步</td><td>设计上异步 (Node.js 实现有优化)</td></tr><tr><td><strong>语法位置</strong></td><td>可在代码任意位置 <code>require</code></td><td><code>import</code>/<code>export</code> 必须在顶层</td></tr><tr><td><strong>静态分析</strong></td><td>困难 (运行时确定)</td><td>容易 (编译/解析时确定)</td></tr><tr><td><strong><code>this</code> (顶层)</strong></td><td>指向 <code>module.exports</code></td><td><code>undefined</code></td></tr><tr><td><strong>Node.js 用法</strong></td><td>默认 (<code>.js</code>, <code>.cjs</code>)</td><td>需配置 (<code>.mjs</code> 或 <code>package.json</code> “type”: “module”)</td></tr><tr><td><strong>导出值类型</strong></td><td>值的<strong>拷贝</strong> (基本类型), 值的<strong>引用</strong> (对象)</td><td>值的<strong>实时绑定</strong> (Live Binding)</td></tr><tr><td><strong>浏览器兼容</strong></td><td>不原生支持 (需打包工具)</td><td>原生支持</td></tr></tbody></table><p><strong>值的实时绑定 (Live Binding) 解释:</strong> 在 ESM 中，导入的变量是原始模块中导出变量的一个只读<strong>绑定</strong>，而不是简单的值拷贝。如果导出模块内部修改了导出的变量（仅限 <code>var</code>/<code>let</code> 声明的，<code>const</code> 不行），导入方也能看到这个变化。CommonJS 导出基本类型时是值的拷贝。</p><p><strong>互操作性 (Interoperability):</strong></p><p>Node.js 允许在一定程度上混合使用两种模块：</p><ul><li><p><strong>在 ESM 文件中导入 CJS 模块:</strong> 通常是<strong>可以</strong>的。你可以使用 <code>import</code> 语句导入 CommonJS 模块。Node.js 会尝试将 <code>module.exports</code> 转换为 ESM 的默认导出。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.mjs</span></span>
<span class="line"><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">;</span> <span class="token comment">// lodash 是 CJS 模块</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">&#39;b&#39;</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { &#39;a&#39;: 1, &#39;b&#39;: 2 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在 CJS 文件中导入 ESM 模块:</strong> <strong>不能</strong>直接使用 <code>require()</code> 来导入 ESM 模块。这会抛出错误。必须使用<strong>动态 <code>import()</code> 函数</strong>，它返回一个 Promise。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// main.cjs</span></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">loadESM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> someExport <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./my-module.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someExport<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">loadESM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_1-2-5-抉择时刻-选择哪个模块系统" tabindex="-1"><a class="header-anchor" href="#_1-2-5-抉择时刻-选择哪个模块系统"><span>1.2.5 抉择时刻：选择哪个模块系统？</span></a></h3><p>面对 CJS 和 ESM，我们该如何选择？</p><ul><li><strong>新项目:</strong> 强烈<strong>推荐使用 ES Modules (ESM)</strong>。它是 JavaScript 的官方标准，代表着未来方向，拥有静态分析等优势，且与浏览器端统一。设置 <code>&quot;type&quot;: &quot;module&quot;</code> 在 <code>package.json</code> 中是目前的主流做法。</li><li><strong>现有大型 CommonJS 项目:</strong> 迁移到 ESM 可能需要不少工作量。可以考虑： <ul><li><strong>维持 CommonJS:</strong> 如果项目稳定，迁移成本高，可以继续使用 CJS。</li><li><strong>逐步迁移:</strong> 对于新开发的功能或模块，可以尝试使用 <code>.mjs</code> 或在特定子目录配置 <code>&quot;type&quot;: &quot;module&quot;</code> 来引入 ESM，并处理好与现有 CJS 代码的互操作。</li><li><strong>混合使用:</strong> 在 ESM 项目中导入 CJS 库通常没问题。在 CJS 项目中需要使用 ESM 库时，利用动态 <code>import()</code>。</li></ul></li><li><strong>需要广泛兼容旧环境/工具:</strong> 某些旧的 Node.js 工具或运行环境可能对 ESM 支持不完善，这种情况下 CJS 可能更稳妥。</li><li><strong>库/包的开发者:</strong> 需要考虑你的用户群体。提供双模块格式（同时提供 CJS 和 ESM 入口）是目前比较友好的做法（通常通过 <code>package.json</code> 的 <code>exports</code> 字段配置）。</li></ul><p><strong>最佳实践:</strong></p><ul><li><strong>保持一致:</strong> 在一个项目中尽量使用同一种模块系统。</li><li><strong>明确导出:</strong> 只导出模块真正需要对外提供的接口。</li><li><strong>单一职责:</strong> 让每个模块专注于做好一件事。</li><li><strong>避免循环依赖:</strong> A 依赖 B，B 又依赖 A。这在 CJS 中可能导致部分导出为空对象，在 ESM 中会抛出错误。需要通过重构代码来解决。</li></ul><h3 id="_1-2-6-常见陷阱与解惑-faq" tabindex="-1"><a class="header-anchor" href="#_1-2-6-常见陷阱与解惑-faq"><span>1.2.6 常见陷阱与解惑 (FAQ)</span></a></h3><ul><li><strong>Q1: <code>exports = ...</code> 为什么不行？</strong><ul><li><strong>A:</strong> 因为 <code>exports</code> 只是 <code>module.exports</code> 的一个引用。直接给 <code>exports</code> 赋值，只是让 <code>exports</code> 指向了新对象，而 <code>module.exports</code> 没变。<code>require</code> 返回的是 <code>module.exports</code>。始终通过 <code>exports.prop = value</code> 或直接修改 <code>module.exports</code> 来导出。</li></ul></li><li><strong>Q2: 为什么在 ESM 文件里 <code>require</code> is not defined?</strong><ul><li><strong>A:</strong> 因为 ESM 使用 <code>import</code> 关键字，<code>require</code> 是 CommonJS 的特性。在 ESM 文件中，<code>require</code>, <code>module</code>, <code>exports</code>, <code>__filename</code>, <code>__dirname</code> 这些 CJS 特有的全局变量或对象默认是不可用的。可以使用 <code>import.meta.url</code> 来获取当前文件路径。</li></ul></li><li><strong>Q3: 尝试 <code>require()</code> 一个 <code>.mjs</code> 文件时报错怎么办？</strong><ul><li><strong>A:</strong> 不能直接用 <code>require</code> 加载 ESM 模块。需要使用动态 <code>import()</code> 函数：<code>import(&#39;./your-module.mjs&#39;).then(...)</code>。</li></ul></li><li><strong>Q4: <code>__dirname</code> 和 <code>__filename</code> 在 ESM 中怎么获取？</strong><ul><li><p><strong>A:</strong> 不能直接用。可以使用 <code>import.meta.url</code> 结合 <code>url</code> 和 <code>path</code> 模块来获取：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> dirname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前文件名:&#39;</span><span class="token punctuation">,</span> __filename<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前目录名:&#39;</span><span class="token punctuation">,</span> __dirname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_1-2-7-总结-模块化是基石" tabindex="-1"><a class="header-anchor" href="#_1-2-7-总结-模块化是基石"><span>1.2.7 总结：模块化是基石</span></a></h3><p>模块化是构建可维护、可扩展 Node.js 应用的基础。今天我们详细学习了 Node.js 中的两大模块系统：</p><ul><li><strong>CommonJS (CJS):</strong> Node.js 的传统模块系统，使用 <code>require</code> 和 <code>module.exports</code>/<code>exports</code>，同步加载，简单易懂，生态庞大。</li><li><strong>ES Modules (ESM):</strong> JavaScript 官方标准，使用 <code>import</code> 和 <code>export</code>/<code>export default</code>，静态分析，设计上异步，是未来的趋势</li></ul>`,62)]))}const r=n(p,[["render",l]]),d=JSON.parse('{"path":"/backend/node/base/01.html","title":"一、认识node.js","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752490925000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":2,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"08d014805d6447d2221b34fe03fdc2ca18411d66","time":1752490925000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年7月更新"},{"hash":"c70b07d347b059fbe78c7770e7fa611a62f92633","time":1744806830000,"email":"857899180@qq.com","author":"zhao-farmer","message":"前端笔记提交"}]},"filePathRelative":"backend/node/base/01.md"}');export{r as comp,d as data};
