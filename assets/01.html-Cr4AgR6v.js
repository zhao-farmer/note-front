import{aq as s,ar as a,as as p,at as t}from"./app-Cok9BT0p.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="一、jest测试" tabindex="-1"><a class="header-anchor" href="#一、jest测试"><span>一、Jest测试</span></a></h1><p><strong>概述</strong></p><p>Jest是一个由Facebook开发的开源测试框架，适用于各种规模的JavaScript和TypeScript项目。本文提供了Jest入门指南，介绍了Jest的主要特点、应用场景、安装方法以及如何编写第一个测试用例。通过学习本文，读者可以快速掌握Jest的基本使用方法和核心概念，开始为自己的项目编写高质量的单元测试。</p><h2 id="_1-1-jest简介" tabindex="-1"><a class="header-anchor" href="#_1-1-jest简介"><span>1.1 Jest简介</span></a></h2><h3 id="_1-1-1-什么是jest" tabindex="-1"><a class="header-anchor" href="#_1-1-1-什么是jest"><span>1.1.1 什么是Jest</span></a></h3><p>Jest是一个由Facebook开发的开源测试框架，主要用来为JavaScript和TypeScript项目编写单元测试。它提供了一套简洁且强大的功能，使得编写、运行和调试单元测试变得简单高效。Jest的显著特点是易于使用、内置测试运行器、内置模拟函数和零配置等。</p><h3 id="_1-1-2-jest的主要特点" tabindex="-1"><a class="header-anchor" href="#_1-1-2-jest的主要特点"><span>1.1.2 Jest的主要特点</span></a></h3><ul><li><strong>零配置</strong>：大多数情况下，你不需要配置任何东西即可开始使用Jest。</li><li><strong>内置模拟函数</strong>：Jest提供了一套强大的模拟（Mocking）工具，使得测试依赖变得简单。</li><li><strong>自动收集测试文件</strong>：Jest会自动搜索项目中的测试文件，无需手动指定。</li><li><strong>内置断言库</strong>：提供了丰富的断言方法，简化了测试编写。</li><li><strong>内置测试运行器</strong>：无需额外安装测试运行器，Jest内置了高效的测试执行器。</li><li><strong>代码覆盖率报告</strong>：可以自动生成代码覆盖率报告，帮助开发者了解哪些代码已经被测试覆盖。</li></ul><h3 id="_1-1-3-jest的应用场景" tabindex="-1"><a class="header-anchor" href="#_1-1-3-jest的应用场景"><span>1.1.3 Jest的应用场景</span></a></h3><p>Jest适用于各种规模的JavaScript/TypeScript项目，包括Web前端、Node.js后端、React组件等。它适用于任何需要编写单元测试的场景，例如：</p><ul><li>测试组件的渲染结果。</li><li>测试函数的返回值。</li><li>测试异步代码。</li><li>测试类和对象的行为。</li><li>测试代码的覆盖率。</li></ul><h2 id="_1-2-安装jest" tabindex="-1"><a class="header-anchor" href="#_1-2-安装jest"><span>1.2 安装Jest</span></a></h2><h3 id="_1-2-1-本地安装jest" tabindex="-1"><a class="header-anchor" href="#_1-2-1-本地安装jest"><span>1.2.1 本地安装Jest</span></a></h3><p>Jest可以单独安装，也可以通过<code>create-react-app</code>等工具自动安装。这里以单独安装Jest为例，介绍如何在项目中设置Jest。</p><ol><li>创建一个新的项目目录，例如：<code>my-project</code>。</li><li>进入项目目录并初始化一个新的Node.js项目，安装Jest。</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">mkdir</span> my-project</span>
<span class="line"><span class="token builtin class-name">cd</span> my-project</span>
<span class="line"><span class="token function">npm</span> init <span class="token parameter variable">-y</span>   <span class="token comment"># 初始化一个新的Node.js项目</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> --save-dev jest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>npm install --save-dev jest</code>命令，Jest被安装为项目的开发依赖。</p><h3 id="_1-2-2-安装jest的方法和命令" tabindex="-1"><a class="header-anchor" href="#_1-2-2-安装jest的方法和命令"><span>1.2.2 安装Jest的方法和命令</span></a></h3><p>除了<code>npm install</code>方法，也可以使用<code>yarn</code>工具安装Jest。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> jest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>安装完成后，可以在项目的<code>package.json</code>文件中看到<code>jest</code>作为<code>devDependencies</code>被添加。</p><p>为了使用Jest，还需要在项目中配置<code>jest</code>。可以在项目根目录中创建一个<code>jest.config.js</code>文件，或者直接在<code>package.json</code>文件中添加<code>jest</code>配置。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;jest&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;testRegex&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.(jsx?|tsx?)$&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置将测试文件的路径限定为<code>__tests__</code>文件夹下的所有文件，或者文件名中包含<code>test</code>或<code>spec</code>的文件，并且文件扩展名为<code>.jsx</code>或<code>.tsx</code>。</p><h2 id="_1-3-编写第一个测试用例" tabindex="-1"><a class="header-anchor" href="#_1-3-编写第一个测试用例"><span>1.3 编写第一个测试用例</span></a></h2><h3 id="_1-3-1-创建测试文件" tabindex="-1"><a class="header-anchor" href="#_1-3-1-创建测试文件"><span>1.3.1 创建测试文件</span></a></h3><p>在项目中创建一个新的文件夹<code>__tests__</code>，然后在这个文件夹中添加一个文件，命名为<code>math.spec.js</code>，表示这是一个测试文件。文件名通常以<code>.spec.js</code>或<code>.test.js</code>结尾。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">mkdir</span> __tests__</span>
<span class="line"><span class="token function">touch</span> __tests__/math.spec.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-2-编写简单测试用例" tabindex="-1"><a class="header-anchor" href="#_1-3-2-编写简单测试用例"><span>1.3.2 编写简单测试用例</span></a></h3><p>在<code>math.spec.js</code>文件中编写一个简单的测试用例，测试一个加法函数。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// __tests__/math.spec.js</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;adds 1 + 2 to equal 3&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用了Jest提供的<code>test</code>函数来定义测试用例。<code>test</code>函数接受两个参数，一个是测试用例的描述，另一个是包含测试逻辑的函数。<code>expect</code>函数用来断言测试结果，<code>toBe</code>函数用来检查结果是否等于期望值。</p><h3 id="_1-3-3-运行测试用例并查看结果" tabindex="-1"><a class="header-anchor" href="#_1-3-3-运行测试用例并查看结果"><span>1.3.3 运行测试用例并查看结果</span></a></h3><p>在命令行中运行<code>jest</code>命令来执行测试：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">npx jest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出结果将显示测试是否通过。如果测试通过，输出中将显示<code>PASS</code>，并且会看到如下信息：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">PASS  __tests__/math.spec.js</span>
<span class="line">  ✓ adds 1 + 2 to equal 3 (5ms)</span>
<span class="line"></span>
<span class="line">Test Suites: 1 passed, 1 total</span>
<span class="line">Tests:       1 passed, 1 total</span>
<span class="line">Snapshots:   0 total</span>
<span class="line">Time:        1.472s</span>
<span class="line">Ran all test suites.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表示测试用例通过。</p><h2 id="_1-4-jest的核心概念" tabindex="-1"><a class="header-anchor" href="#_1-4-jest的核心概念"><span>1.4 Jest的核心概念</span></a></h2><h3 id="_1-4-1-断言" tabindex="-1"><a class="header-anchor" href="#_1-4-1-断言"><span>1.4.1 断言</span></a></h3><p>在Jest中，断言是用来检查预期结果和实际结果是否一致的工具。断言是测试的核心，Jest提供了丰富的断言方法，例如<code>toBe</code>、<code>toEqual</code>、<code>toHaveBeenCalled</code>等。</p><p><strong>常用断言方法</strong></p><ul><li><code>toBe</code>：用于检查两个值是否相等。</li><li><code>toEqual</code>：用于检查两个对象是否相等。</li><li><code>toHaveBeenCalled</code>：用于检查一个函数是否被调用过。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;equality assertions&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 成功</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;addition&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock function&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> mockFunction <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">mockFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>mockFunction<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-2-期望" tabindex="-1"><a class="header-anchor" href="#_1-4-2-期望"><span>1.4.2 期望</span></a></h3><p>期望是断言的一种，用来描述预期的结果。例如，期望一个函数的返回值为某个特定值。</p><p><strong>期望方法</strong></p><ul><li><code>expect(result).toBe(expected)</code>：检查结果是否等于期望值。</li><li><code>expect(result).toEqual(expected)</code>：检查结果是否深度等于期望值。</li><li><code>expect(result).toBeGreaterThan(expected)</code>：检查结果是否大于期望值。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;check equality&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;check greater than&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-3-模拟函数" tabindex="-1"><a class="header-anchor" href="#_1-4-3-模拟函数"><span>1.4.3 模拟函数</span></a></h3><p>模拟（Mocking）是指在测试中模拟出一个假的行为，而不是实际执行真实的行为。Jest提供了<code>jest.fn()</code>来创建一个模拟函数。</p><p><strong>模拟函数的使用</strong></p><ul><li><code>jest.fn()</code>：创建一个新的模拟函数。</li><li><code>mockFunction.mockImplementation(func)</code>：给模拟函数设置行为。</li><li><code>mockFunction.mockReturnValue(val)</code>：设置模拟函数的返回值。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> mockFunction <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock implementation&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  mockFunction<span class="token punctuation">.</span><span class="token function">mockImplementation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mockFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;mock return value&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  mockFunction<span class="token punctuation">.</span><span class="token function">mockReturnValue</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">mockFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-测试异步代码" tabindex="-1"><a class="header-anchor" href="#_1-5-测试异步代码"><span>1.5 测试异步代码</span></a></h2><h3 id="_1-5-1-测试promises" tabindex="-1"><a class="header-anchor" href="#_1-5-1-测试promises"><span>1.5.1 测试Promises</span></a></h3><p>测试异步代码时，可以使用Jest的<code>await</code>关键字来等待Promise解析。</p><p><strong>测试Promise示例</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchUserData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John Doe&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;fetch user data&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchUserData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-2-测试async-await" tabindex="-1"><a class="header-anchor" href="#_1-5-2-测试async-await"><span>1.5.2 测试Async/Await</span></a></h3><p>使用<code>async</code>/<code>await</code>关键字可以让异步代码看起来更像同步代码，使得代码更易读和易维护。</p><p><strong>测试Async/Await示例</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token string">&#39;Hello, World!&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;fetch data with async/await&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-3-jest的异步测试工具" tabindex="-1"><a class="header-anchor" href="#_1-5-3-jest的异步测试工具"><span>1.5.3 Jest的异步测试工具</span></a></h3><p>Jest还提供了一些专门用于测试异步代码的工具，例如<code>done</code>回调、<code>async</code>函数、<code>async</code>和<code>await</code>关键字等。</p><p><strong>异步测试工具示例</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;fetch data with done&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;fetch data with async/await&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-6-测试覆盖率" tabindex="-1"><a class="header-anchor" href="#_1-6-测试覆盖率"><span>1.6 测试覆盖率</span></a></h2><h3 id="_1-6-1-什么是测试覆盖率" tabindex="-1"><a class="header-anchor" href="#_1-6-1-什么是测试覆盖率"><span>1.6.1 什么是测试覆盖率</span></a></h3><p>测试覆盖率是指测试代码占总代码的比例。覆盖率越高，意味着测试越全面，代码越健壮。Jest可以生成详细的测试覆盖率报告，帮助开发者了解哪些代码已经被测试覆盖。</p><h3 id="_1-6-2-如何使用jest计算覆盖率" tabindex="-1"><a class="header-anchor" href="#_1-6-2-如何使用jest计算覆盖率"><span>1.6.2 如何使用Jest计算覆盖率</span></a></h3><p>在命令行中运行<code>jest --coverage</code>命令来计算测试覆盖率。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">npx jest <span class="token parameter variable">--coverage</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出结果将包括覆盖率报告：</p><div class="language-plain line-numbers-mode" data-highlighter="prismjs" data-ext="plain"><pre><code><span class="line">------------------|----------|----------|----------|----------|----------------|</span>
<span class="line">File              |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Lines |</span>
<span class="line">------------------|----------|----------|----------|----------|----------------|</span>
<span class="line">All files         |    90.91 |      100 |    87.5  |    90.91 |                |</span>
<span class="line"> math.spec.js     |      100 |      100 |      100 |      100 |                |</span>
<span class="line">------------------|----------|----------|----------|----------|----------------|</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-3-提高测试覆盖率的方法" tabindex="-1"><a class="header-anchor" href="#_1-6-3-提高测试覆盖率的方法"><span>1.6.3 提高测试覆盖率的方法</span></a></h3><ol><li><strong>增加测试用例</strong>：编写更多的测试用例，覆盖更多的代码路径。</li><li><strong>覆盖分支</strong>：确保测试用例覆盖到所有的分支。</li><li><strong>覆盖函数</strong>：确保测试用例覆盖到所有的函数。</li><li><strong>覆盖复杂逻辑</strong>：编写测试用例覆盖复杂的逻辑。</li><li><strong>代码审查</strong>：进行代码审查，找到未覆盖的代码并编写测试。</li></ol><p><strong>提高测试覆盖率示例</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;test multiple cases&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过编写更多的测试用例，可以提高测试覆盖率。</p><p>总结，Jest是一个强大且易于使用的单元测试框架，适用于各种规模的JavaScript/TypeScript项目。通过本文的学习，你已经掌握了Jest的基本使用方法和核心概念，可以开始为你的项目编写高质量的单元测试了。</p>`,81)]))}const i=s(e,[["render",c]]),u=JSON.parse('{"path":"/backend/quote/test/01.html","title":"一、Jest测试","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744806830000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"c70b07d347b059fbe78c7770e7fa611a62f92633","time":1744806830000,"email":"857899180@qq.com","author":"zhao-farmer","message":"前端笔记提交"}]},"filePathRelative":"backend/quote/test/01.md"}');export{i as comp,u as data};
