import{aq as s,ar as a,as as p,at as t}from"./app-Cok9BT0p.js";const e={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="typescript-15个高级技巧1" tabindex="-1"><a class="header-anchor" href="#typescript-15个高级技巧1"><span>TypeScript 15个高级技巧1</span></a></h1><p>TypeScript 已成为许多开发人员的必备工具，它提供类型安全性和增强的开发人员体验。虽然大多数人都熟悉它的基本功能，但 TypeScript 有很多高级技术可以提高应用程序的类型安全性。本文深入探讨了 15 个鲜为人知的 TypeScript 提示和技巧，它们将扩展您的工具包，并可能重塑您进行 TypeScript 开发的方式。不要浪费任何时间，让我们开始吧！</p><h2 id="_1-字符串文字插值类型" tabindex="-1"><a class="header-anchor" href="#_1-字符串文字插值类型"><span>1. 字符串文字插值类型</span></a></h2><p>字符串文本类型功能强大，但您知道可以对它们进行插值吗？此功能允许基于其他类型的动态创建字符串文本类型。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">EventName<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Changed</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">UserEvent</span> <span class="token operator">=</span> EventName<span class="token operator">&lt;</span><span class="token string">&quot;user&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type UserEvent = &quot;userChanged&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在处理事件系统或在整个代码库中创建一致的命名约定时，此技术特别有用。例如，你可以使用它来自动生成 getter 名称：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Getter<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">get</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">UserGetter</span> <span class="token operator">=</span> Getter<span class="token operator">&lt;</span><span class="token string">&quot;username&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type UserGetter = &quot;getUsername&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-使用标记类型交集" tabindex="-1"><a class="header-anchor" href="#_2-使用标记类型交集"><span>2. 使用标记类型交集</span></a></h2><p>标记类型提供了一种在 TypeScript 的结构类型系统中创建名义类型的方法。当您有多个不应互换的字符串或数字类型时，它们非常适合防止类型混合。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UserId</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PostId</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createUserId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> UserId <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> id <span class="token keyword">as</span> UserId<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createPostId</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> PostId <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> id <span class="token keyword">as</span> PostId<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> userId <span class="token operator">=</span> <span class="token function">createUserId</span><span class="token punctuation">(</span><span class="token string">&quot;user123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> postId <span class="token operator">=</span> <span class="token function">createPostId</span><span class="token punctuation">(</span><span class="token string">&quot;post456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// This will cause a type error:</span></span>
<span class="line"><span class="token comment">// const error = userId = postId;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此模式可确保即使 UserId 和 PostId 在后台都是字符串，它们也不会意外地混入您的代码中。</p><h2 id="_3-带-infer-的条件类型" tabindex="-1"><a class="header-anchor" href="#_3-带-infer-的条件类型"><span>3. 带 Infer 的条件类型</span></a></h2><p>条件类型中的 infer 关键字允许您从复杂类型中提取类型信息。它在处理函数、promise 或数组时特别有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UnpackPromise<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ResolvedType</span> <span class="token operator">=</span> UnpackPromise<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type ResolvedType = string</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NonPromiseType</span> <span class="token operator">=</span> UnpackPromise<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type NonPromiseType = number</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Another practical example: extracting return types of functions</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">User</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fetchUser<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type User = { id: number; name: string; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此技术允许强大的类型推理和操作，使您能够创建更灵活和可重用的类型定义。</p><h2 id="_4-模板文字类型" tabindex="-1"><a class="header-anchor" href="#_4-模板文字类型"><span>4. 模板文字类型</span></a></h2><p>模板文本类型将文本类型和字符串操作组合在一起，以创建基于字符串的强大类型约束。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ColorVariant</span> <span class="token operator">=</span> <span class="token string">&quot;light&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;dark&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;green&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Theme</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ColorVariant<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Theme is now equivalent to:</span></span>
<span class="line"><span class="token comment">// &quot;light-red&quot; | &quot;light-green&quot; | &quot;light-blue&quot; | &quot;dark-red&quot; | &quot;dark-green&quot; | &quot;dark-blue&quot;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">setTheme</span><span class="token punctuation">(</span>theme<span class="token operator">:</span> Theme<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Implementation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token string">&quot;light-red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line"><span class="token comment">// setTheme(&quot;medium-purple&quot;); // Error: Argument of type &#39;&quot;medium-purple&quot;&#39; is not assignable to parameter of type &#39;Theme&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用 CSS-in-JS 库、API 路由定义或任何需要在类型级别强制执行特定字符串模式的场景时，此功能大放异彩。</p><h2 id="_5-递归类型别名" tabindex="-1"><a class="header-anchor" href="#_5-递归类型别名"><span>5. 递归类型别名</span></a></h2><p>递归类型别名允许您定义引用自身的类型。这在处理树状结构或嵌套数据时特别有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">JSONValue</span> <span class="token operator">=</span> </span>
<span class="line">    <span class="token operator">|</span> <span class="token builtin">string</span> </span>
<span class="line">    <span class="token operator">|</span> <span class="token builtin">number</span> </span>
<span class="line">    <span class="token operator">|</span> <span class="token builtin">boolean</span> </span>
<span class="line">    <span class="token operator">|</span> <span class="token keyword">null</span> </span>
<span class="line">    <span class="token operator">|</span> JSONValue<span class="token punctuation">[</span><span class="token punctuation">]</span> </span>
<span class="line">    <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> JSONValue <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> data<span class="token operator">:</span> JSONValue <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    isStudent<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;reading&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cycling&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    address<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        street<span class="token operator">:</span> <span class="token string">&quot;123 Main St&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        city<span class="token operator">:</span> <span class="token string">&quot;Anytown&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        coordinates<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">40.7128</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">74.0060</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此 JSONValue 类型准确表示任何有效的 JSON 结构，无论嵌套有多深。在使用 API、配置文件或涉及复杂嵌套数据结构的任何场景时，它非常宝贵。</p><p>前 5 个技巧只是 TypeScript 高级功能的皮毛。它们演示了 TypeScript 如何在复杂场景中提供强类型，从而提高代码可靠性和开发人员的工作效率。在下一节中，我们将探索更高级的概念，这些概念突破了 TypeScript 类型系统的界限。</p><h2 id="_6-可变元组类型" tabindex="-1"><a class="header-anchor" href="#_6-可变元组类型"><span>6. 可变元组类型</span></a></h2><p>TypeScript 4.0 中引入的可变元组类型允许更灵活的元组操作。当使用采用可变数量参数的函数或需要动态组合元组时，它们特别有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type Result = [1, 2, 3, 4]</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">concat</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arr1<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> arr2<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> Concat<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// result: [1, 2, 3, 4]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此功能支持对元组进行类型安全操作，这在使用返回或期望特定元组结构的 API 时非常有价值。</p><h2 id="_7-通过-as-重新映射键" tabindex="-1"><a class="header-anchor" href="#_7-通过-as-重新映射键"><span>7. 通过 &#39;as&#39; 重新映射键</span></a></h2><p>映射类型中的 as 子句允许您转换对象类型的键。这对于创建具有已修改属性名称的派生类型非常有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Getters<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">get</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Capitalize<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PersonGetters</span> <span class="token operator">=</span> Getters<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Equivalent to:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     getName: () =&gt; string;</span></span>
<span class="line"><span class="token comment">//     getAge: () =&gt; number;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> getters<span class="token operator">:</span> PersonGetters <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">getName</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>name<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getAge</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>age</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>getters<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Output: &quot;Alice&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当为需要特定命名约定的框架或库生成派生类型时，此技术特别有用。</p><h2 id="_8-类型位置的-const-断言" tabindex="-1"><a class="header-anchor" href="#_8-类型位置的-const-断言"><span>8. 类型位置的 const 断言</span></a></h2><p>Const 断言可用于从数组和对象创建更具体的文字类型。当您希望将运行时值用作类型时，这尤其有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> colors<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// type Color = &quot;red&quot; | &quot;green&quot; | &quot;blue&quot;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">paintShape</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Color<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Implementation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">paintShape</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line"><span class="token comment">// paintShape(&quot;yellow&quot;); // Error: Argument of type &#39;&quot;yellow&quot;&#39; is not assignable to parameter of type &#39;Color&#39;.</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Another example with an object</span></span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    endpoint<span class="token operator">:</span> <span class="token string">&quot;https://api.example.com&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    timeout<span class="token operator">:</span> <span class="token number">3000</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Config</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> config<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Equivalent to:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     readonly endpoint: &quot;https://api.example.com&quot;;</span></span>
<span class="line"><span class="token comment">//     readonly timeout: 3000;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此功能允许您为运行时值和类型信息维护单一事实来源，从而减少类型和实际数据之间不一致的可能性。</p><h2 id="_9-never-的歧视工会" tabindex="-1"><a class="header-anchor" href="#_9-never-的歧视工会"><span>9. “never”的歧视工会</span></a></h2><p>可区分联合是模拟互斥状态的有效方法。结合 never 类型，它们可以提供详尽的模式匹配和改进的类型安全性。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Shape</span> <span class="token operator">=</span> </span>
<span class="line">    <span class="token operator">|</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;circle&quot;</span><span class="token punctuation">;</span> radius<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">|</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;square&quot;</span><span class="token punctuation">;</span> sideLength<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">|</span> <span class="token punctuation">{</span> kind<span class="token operator">:</span> <span class="token string">&quot;triangle&quot;</span><span class="token punctuation">;</span> base<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> height<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">area</span><span class="token punctuation">(</span>shape<span class="token operator">:</span> Shape<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">.</span>kind<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string">&quot;circle&quot;</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string">&quot;square&quot;</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> shape<span class="token punctuation">.</span>sideLength <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string">&quot;triangle&quot;</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">*</span> shape<span class="token punctuation">.</span>base <span class="token operator">*</span> shape<span class="token punctuation">.</span>height<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">            <span class="token keyword">const</span> _exhaustiveCheck<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> shape<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span> _exhaustiveCheck<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，如果我们要添加新的形状类型但忘记更新 area 函数，TypeScript 会给我们一个编译时错误。这可确保处理所有情况，并使重构更加安全。</p><h2 id="_10-使用键过滤的映射类型" tabindex="-1"><a class="header-anchor" href="#_10-使用键过滤的映射类型"><span>10. 使用键过滤的映射类型</span></a></h2><p>映射类型可以与条件类型结合使用，以根据其值类型筛选对象键。这允许强大的类型转换。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    c<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">    d<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StringProps</span> <span class="token operator">=</span> PickByType<span class="token operator">&lt;</span>Example<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Equivalent to:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     a: string;</span></span>
<span class="line"><span class="token comment">//     d: string;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Practical use case: creating a type for form field values</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">FormFields</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    newsletter<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StringFields</span> <span class="token operator">=</span> PickByType<span class="token operator">&lt;</span>FormFields<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Equivalent to:</span></span>
<span class="line"><span class="token comment">// {</span></span>
<span class="line"><span class="token comment">//     name: string;</span></span>
<span class="line"><span class="token comment">//     email: string;</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">validateStringFields</span><span class="token punctuation">(</span>fields<span class="token operator">:</span> StringFields<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Implementation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">validateStringFields</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&quot;john@example.com&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line"><span class="token comment">// validateStringFields({ name: &quot;John&quot;, age: 30 }); // Error: Object literal may only specify known properties, and &#39;age&#39; does not exist in type &#39;StringFields&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当您需要根据对象属性的类型处理对象属性的子集时，例如在表单验证或数据转换方案中，此技术特别有用。</p><p>这额外的 5 个技巧展示了 TypeScript 的更多高级类型操作功能。它们演示了如何利用 TypeScript 的类型系统来创建高度具体和安全的类型，从而产生更健壮和自文档化的代码。在最后一节中，我们将探索更高级的概念，这些概念突破了 TypeScript 类型系统的可能性界限。</p><h2 id="_11-使用泛型的类型安全事件发射器" tabindex="-1"><a class="header-anchor" href="#_11-使用泛型的类型安全事件发射器"><span>11. 使用泛型的类型安全事件发射器</span></a></h2><p>创建类型安全的事件发射器可以显著提高事件驱动代码的可靠性。通过利用泛型，我们可以确保事件名称及其相应的数据类型始终同步。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Listener<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">TypedEventEmitter<span class="token operator">&lt;</span>EventMap <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> listeners<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> EventMap<span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> Listener<span class="token operator">&lt;</span>EventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> EventMap<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> listener<span class="token operator">:</span> Listener<span class="token operator">&lt;</span>EventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> EventMap<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> data<span class="token operator">:</span> EventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>listeners<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Usage</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">MyEvents</span> <span class="token punctuation">{</span></span>
<span class="line">    userLoggedIn<span class="token operator">:</span> <span class="token punctuation">{</span> userId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> timestamp<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    dataLoaded<span class="token operator">:</span> <span class="token punctuation">{</span> items<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypedEventEmitter<span class="token operator">&lt;</span>MyEvents<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;userLoggedIn&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> userId<span class="token punctuation">,</span> timestamp <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> logged in at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timestamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;userLoggedIn&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> userId<span class="token operator">:</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> timestamp<span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line"><span class="token comment">// emitter.emit(&quot;userLoggedIn&quot;, { userId: &quot;123&quot; }); // Error: Property &#39;timestamp&#39; is missing</span></span>
<span class="line"><span class="token comment">// emitter.emit(&quot;invalidEvent&quot;, {}); // Error: Argument of type &#39;&quot;invalidEvent&quot;&#39; is not assignable to parameter of type &#39;keyof MyEvents&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此模式可确保事件驱动代码是类型安全的，从而防止因事件名称不匹配或数据结构不正确而出错。</p><h2 id="_12-自引用类型" tabindex="-1"><a class="header-anchor" href="#_12-自引用类型"><span>12. 自引用类型</span></a></h2><p>自引用类型在处理递归数据结构（例如树状对象或链表）时很有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FileSystemObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    size<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    isDirectory<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">    children<span class="token operator">?</span><span class="token operator">:</span> FileSystemObject<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> fileSystem<span class="token operator">:</span> FileSystemObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    size<span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span></span>
<span class="line">    isDirectory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    children<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            name<span class="token operator">:</span> <span class="token string">&quot;documents&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            size<span class="token operator">:</span> <span class="token number">512</span><span class="token punctuation">,</span></span>
<span class="line">            isDirectory<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            children<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;report.pdf&quot;</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token number">128</span><span class="token punctuation">,</span> isDirectory<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;invoice.docx&quot;</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token number">64</span><span class="token punctuation">,</span> isDirectory<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&quot;image.jpg&quot;</span><span class="token punctuation">,</span> size<span class="token operator">:</span> <span class="token number">256</span><span class="token punctuation">,</span> isDirectory<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">calculateTotalSize</span><span class="token punctuation">(</span>fsObject<span class="token operator">:</span> FileSystemObject<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fsObject<span class="token punctuation">.</span>isDirectory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fsObject<span class="token punctuation">.</span>size<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> fsObject<span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token punctuation">(</span>fsObject<span class="token punctuation">.</span>children<span class="token operator">?.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>total<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> <span class="token function">calculateTotalSize</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">calculateTotalSize</span><span class="token punctuation">(</span>fileSystem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Outputs the total size of all files</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此技术允许您对复杂的嵌套结构进行建模，同时在这些结构上的整个操作中保持类型安全。</p><h2 id="_13-使用唯一符号的不透明类型" tabindex="-1"><a class="header-anchor" href="#_13-使用唯一符号的不透明类型"><span>13. 使用唯一符号的不透明类型</span></a></h2><p>不透明类型提供了一种创建结构相似但被类型系统视为不同的类型的方法。这对于创建类型安全标识符或防止意外误用类似类型非常有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">declare</span> <span class="token keyword">const</span> brand<span class="token operator">:</span> unique <span class="token builtin">symbol</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Brand<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> TBrand<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span>brand<span class="token punctuation">]</span><span class="token operator">:</span> TBrand <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Email</span> <span class="token operator">=</span> Brand<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token string">&quot;Email&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">UserId</span> <span class="token operator">=</span> Brand<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token string">&quot;UserId&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createEmail</span><span class="token punctuation">(</span>email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> Email <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// In a real application, you&#39;d validate the email here</span></span>
<span class="line">    <span class="token keyword">return</span> email <span class="token keyword">as</span> Email<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span>email<span class="token operator">:</span> Email<span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Sending &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> email <span class="token operator">=</span> <span class="token function">createEmail</span><span class="token punctuation">(</span><span class="token string">&quot;user@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userId <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span> <span class="token keyword">as</span> UserId<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token function">sendEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> <span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line"><span class="token comment">// sendEmail(userId, &quot;Hello!&quot;); // Error: Argument of type &#39;UserId&#39; is not assignable to parameter of type &#39;Email&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用不应互换的域特定类型时，即使它们共享相同的基础结构，此模式也特别有用。</p><h2 id="_14-类型级整数序列" tabindex="-1"><a class="header-anchor" href="#_14-类型级整数序列"><span>14. 类型级整数序列</span></a></h2><p>在类型级别创建整数序列对于更高级的类型操作非常有用，尤其是在使用特定长度的元组或数组时。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">BuildTuple<span class="token operator">&lt;</span><span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">    <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">L</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> BuildTuple<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Range<span class="token operator">&lt;</span><span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span>BuildTuple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">,</span> BuildTuple<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NumRange</span> <span class="token operator">=</span> Range<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type NumRange = 2 | 3 | 4</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createArray</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> length<span class="token operator">:</span> Range<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token function">createArray</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// OK</span></span>
<span class="line"><span class="token comment">// const arr2 = createArray(&quot;world&quot;, 0); // Error: Argument of type &#39;0&#39; is not assignable to parameter of type &#39;Range&lt;1, 11&gt;&#39;</span></span>
<span class="line"><span class="token comment">// const arr3 = createArray(&quot;!&quot;, 11); // Error: Argument of type &#39;11&#39; is not assignable to parameter of type &#39;Range&lt;1, 11&gt;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_15-使用递归条件类型的类型安全深度部分" tabindex="-1"><a class="header-anchor" href="#_15-使用递归条件类型的类型安全深度部分"><span>15. 使用递归条件类型的类型安全深度部分</span></a></h2><p>在处理复杂的嵌套对象时，具有 DeepPartial 类型通常很有用，该类型使所有属性都以递归方式可选。这可以使用递归条件类型来实现。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> DeepPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">NestedObject</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        b<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            c<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">            d<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        e<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    f<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PartialNested</span> <span class="token operator">=</span> DeepPartial<span class="token operator">&lt;</span>NestedObject<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token comment">// Usage</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">updateNestedObject</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> NestedObject<span class="token punctuation">,</span> update<span class="token operator">:</span> DeepPartial<span class="token operator">&lt;</span>NestedObject<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> NestedObject <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Implementation (deep merge logic)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>update <span class="token punctuation">}</span> <span class="token keyword">as</span> NestedObject<span class="token punctuation">;</span> <span class="token comment">// Simplified for brevity</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> original<span class="token operator">:</span> NestedObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">:</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> e<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    f<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">const</span> updated <span class="token operator">=</span> <span class="token function">updateNestedObject</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    a<span class="token operator">:</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    f<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>updated<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Output: { a: { b: { c: 2, d: &quot;hello&quot; }, e: true }, f: [&quot;three&quot;] }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此 DeepPartial 类型在处理复杂对象的部分更新时特别有用，例如在状态管理系统中或处理可能包含部分数据的 API 响应时。</p>`,64)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/script/TypeScript/records/01.html","title":"TypeScript 15个高级技巧1","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744806830000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"c70b07d347b059fbe78c7770e7fa611a62f92633","time":1744806830000,"email":"857899180@qq.com","author":"zhao-farmer","message":"前端笔记提交"}]},"filePathRelative":"script/TypeScript/records/01.md"}');export{i as comp,u as data};
