import{_ as t}from"./markdown-test-BJLEpauC.js";import{aq as e,ar as l,as as s,at as n}from"./app-Cok9BT0p.js";const i={};function d(p,a){return n(),l("div",null,a[0]||(a[0]=[s('<h1 id="一、-语法" tabindex="-1"><a class="header-anchor" href="#一、-语法"><span>一、 语法</span></a></h1><h2 id="_1-标题" tabindex="-1"><a class="header-anchor" href="#_1-标题"><span>1. 标题</span></a></h2><p>在想要设置为标题的文字前面添加井号（#） ，井号（#）的数量代表了标题的级别。</p><table><thead><tr><th>序号</th><th>说明</th><th>Markdown</th><th>HTML</th><th>预览效果</th></tr></thead><tbody><tr><td>1</td><td>一级标题</td><td><code># 一级标题</code></td><td>&lt;h1&gt;一级标题&lt;/h1&gt;</td><td><h1>一级标题</h1></td></tr><tr><td>2</td><td>二级标题</td><td><code>## 二级标题</code></td><td>&lt;h2&gt;二级标题&lt;/h2&gt;</td><td><h2>二级标题</h2></td></tr><tr><td>3</td><td>三级标题</td><td><code>### 三级标题</code></td><td>&lt;h3&gt;三级标题&lt;/h3&gt;</td><td><h3>三级标题</h3></td></tr><tr><td>4</td><td>四级标题</td><td><code>#### 四级标题</code></td><td>&lt;h4&gt;四级标题&lt;/h4&gt;</td><td><h4>四级标题</h4></td></tr><tr><td>5</td><td>五级标题</td><td><code>##### 五级标题</code></td><td>&lt;h5&gt;五级标题&lt;/h5&gt;</td><td><h5>五级标题</h5></td></tr><tr><td>6</td><td>六级标题</td><td><code>###### 六级标题</code></td><td>&lt;h6&gt;六级标题&lt;/h6&gt;</td><td><h6>六级标题</h6></td></tr></tbody></table><h2 id="_2-文本" tabindex="-1"><a class="header-anchor" href="#_2-文本"><span>2. 文本</span></a></h2><table><thead><tr><th>序号</th><th>说明</th><th>Markdown</th><th>预览效果</th></tr></thead><tbody><tr><td>1</td><td>斜体文本样式</td><td><code>*斜体文本样式*</code></td><td><em>斜体文本样式</em></td></tr><tr><td>2</td><td>斜体文本样式</td><td><code>_斜体文本样式_</code></td><td><em>斜体文本样式</em></td></tr><tr><td>3</td><td>加粗文本样式</td><td><code>**加粗文本样式**</code></td><td><strong>加粗文本样式</strong></td></tr><tr><td>4</td><td>加粗文本样式</td><td><code>__加粗文本样式__</code></td><td><strong>加粗文本样式</strong></td></tr><tr><td>5</td><td>标记文本样式</td><td><code>==标记文本样式==</code></td><td>==标记文本样式==</td></tr><tr><td>6</td><td>删除文本样式</td><td><code>~~删除文本样式~~</code></td><td><s>删除文本样式</s></td></tr><tr><td>7</td><td>下标文本样式</td><td><code>H~2~O 是液体</code></td><td>H~2~O 是液体</td></tr><tr><td>8</td><td>HTML下标</td><td><code>H&lt;sub&gt;2&lt;/sub&gt;O 是液体</code></td><td>H<sub>2</sub>O 是液体</td></tr><tr><td>9</td><td>上标文本样式</td><td><code>2^10^ 运算结果是 1024</code></td><td>2^10^ 运算结果是 1024</td></tr><tr><td>10</td><td>HTML上标</td><td><code>2&lt;sup&gt;10&lt;/sup&gt; 是 1024</code></td><td>2<sup>10</sup> 是 1024</td></tr></tbody></table><h2 id="_3-图片" tabindex="-1"><a class="header-anchor" href="#_3-图片"><span>3. 图片</span></a></h2><ul><li><p>样例：</p><p><img src="'+t+'" alt="用于测试的图片" title="markdown测试图片"></p></li><li><p>语法：</p><p><code>![图片Alt](图片Link &quot;图片Title&quot;)</code></p></li><li><p>说明：</p><p>图片Alt【在图片因某些原因不能显示时来替代显示的文字，不是必须】，图片Link【图片存储的地址链接】，图片Title【在鼠标悬停在图片上时显示的文字】。</p></li></ul><h2 id="_4-链接" tabindex="-1"><a class="header-anchor" href="#_4-链接"><span>4. 链接</span></a></h2><h3 id="_1-行内式" tabindex="-1"><a class="header-anchor" href="#_1-行内式"><span>（1）行内式</span></a></h3><ul><li><p>样例：</p><p><a href="www.baidu.com" title="测试链接">百度一下</a></p></li><li><p>语法：</p><p><code>[链接文字](链接地址 &quot;title&quot;)</code></p></li><li><p>说明：</p><p>[] 里面写链接文字，（） 里面写链接地址，在 （） 中可用为链接指定 title 属性【效果是鼠标悬停在链接上会出现指定的 title文字】。</p></li></ul><h3 id="_2-自动链接" tabindex="-1"><a class="header-anchor" href="#_2-自动链接"><span>（2）自动链接</span></a></h3><ul><li><p>样例：</p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener noreferrer">https://www.baidu.com/</a></p></li><li><p>语法：</p><p><code>&lt;链接地址&gt;</code></p></li><li><p>说明：</p><p>只要用 &lt;&gt; 把网址或者邮箱地址包起来，就自动转成链接。网址前必须有 http:// 或 https://。</p></li></ul><h2 id="_5-目录" tabindex="-1"><a class="header-anchor" href="#_5-目录"><span>5. 目录</span></a></h2><ul><li><p>语法：</p><p><code>@[TOC](这里写目录标题)</code></p></li><li><p>说明：</p><p>在短路中填写 @[TOC] 显示全文内容的目录结构，（） 里面写标题的显示样式。</p></li></ul><blockquote><p>生成目录的注意：</p><ol><li>在Markdown文件中，只需输入[toc]然后按下回车键，Markdown解析器会自动识别并生成目录</li><li>生成的目录会根据文章中的标题自动排序和链接到相应的内容。</li></ol></blockquote><ul><li>目录的样式和自定义‌： <ol><li>Markdown生成的目录默认使用数字列表的形式展示，但你可以通过自定义CSS来改变其样式，比如字体、颜色等。</li><li>如果需要更复杂的目录结构，可以使用HTML和CSS进行进一步的样式定制。</li></ol></li></ul><h2 id="_6-脚注" tabindex="-1"><a class="header-anchor" href="#_6-脚注"><span>6. 脚注</span></a></h2><ul><li>样例：</li></ul><p>沧海月明珠有泪，蓝田日暖玉生烟<a href="%E6%98%8E%E6%9C%88%E4%B8%8B%E7%9A%84%E5%A4%A7%E6%B5%B7%EF%BC%8C%E4%BB%BF%E4%BD%9B%E6%B4%92%E6%BB%A1%E4%BA%86%E9%B2%9B%E4%BA%BA%E7%9A%84%E7%9C%BC%E6%B3%AA%EF%BC%8C%E6%98%BE%E5%BE%97%E5%87%84%E6%B8%85%E5%86%B7%E5%AF%82%EF%BC%9B%E5%8F%AA%E6%9C%89%E5%9C%A8%E8%93%9D%E7%94%B0%E9%82%A3%E6%A0%B7%E6%B8%A9%E6%9A%96%E7%9A%84%E5%9C%B0%E6%96%B9%EF%BC%8C%E6%89%8D%E8%83%BD%E5%AD%95%E8%82%B2%E5%87%BA%E5%A6%82%E7%83%9F%E9%9B%BE%E8%88%AC%E7%BE%8E%E4%B8%BD%E7%9A%84%E7%8E%89%E7%9F%B3%E3%80%82">^1</a>。此情可待成追忆，只是当时已惘然<a href="%E9%82%A3%E4%BA%9B%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%BA%8B%E5%92%8C%E5%B9%B4%E4%BB%A3%EF%BC%8C%E5%8F%AA%E8%83%BD%E7%95%99%E5%9C%A8%E5%9B%9E%E5%BF%86%E4%B9%8B%E4%B8%AD%E4%BA%86%E3%80%82%E8%80%8C%E5%9C%A8%E5%BD%93%E6%97%B6%E9%82%A3%E4%BA%9B%E4%BA%BA%E7%9C%8B%E6%9D%A5%E9%82%A3%E4%BA%9B%E4%BA%8B%E9%83%BD%E5%8F%AA%E6%98%AF%E5%B9%B3%E5%B8%B8%E7%BD%A2%E4%BA%86%EF%BC%8C%E5%8D%B4%E5%B9%B6%E4%B8%8D%E7%9F%A5%E7%8F%8D%E6%83%9C">^2</a>。</p><ul><li><p>语法：</p><p><strong>注脚添加&gt;</strong> <code>需要注释的内容[^1]</code></p><p><strong>注脚内容显示&gt;</strong><code>[^1]: 脚注的解释</code></p></li><li><p>说明：</p><ol><li>在需要添加脚注的位置添加[^1]，然后在文本的任意位置添加脚注内容。</li><li>脚注内容前需有与文本对应的脚注标签，不论校准内容添加在何处，最终显示时，脚注内容会被归类到文档的最后。</li><li>脚注内容与脚注内容之间必须有一空行，否则失效。</li><li>注脚内容显示不能放到同一个引用下。</li></ol></li></ul><h2 id="_7-锚点" tabindex="-1"><a class="header-anchor" href="#_7-锚点"><span>7. 锚点</span></a></h2><p>页面内的超链接，用来链接文档内部的某些元素，实现当前页面中的跳转。</p><ul><li><p>样例：</p><p><a href="#benjie">跳转到本节最下方</a></p></li><li><p>语法：</p><ol><li>在需要跳转的位置添加锚点，语法：<code>&lt;span id=&quot;标记名称&quot;&gt;跳转到的地方&lt;/span&gt;</code></li><li>在需要点击跳转的位置，使用上面的ID，格式类似超链接的形式：[锚点名称]（#标记名称）</li></ol></li><li><p>说明：</p><ol><li>首先在文档的某个地方使用特定的标记创建一个锚点。</li><li>然后在文档的另一个地方通过引用该锚点来实现链接或指向。</li></ol></li></ul><p><span id="benjie">跳转到的地方</span></p><h2 id="_8-列表" tabindex="-1"><a class="header-anchor" href="#_8-列表"><span>8. 列表</span></a></h2><h3 id="_1-无序列表" tabindex="-1"><a class="header-anchor" href="#_1-无序列表"><span>（1）无序列表</span></a></h3><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">- 这是无序第一层</span>\n<span class="line">    + 这是无序第二层</span>\n<span class="line">        * 这是无序第三层</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样例：</p><ul><li>这是无序第一层 <ul><li>这是无序第二层 <ul><li>这是无序第三层</li></ul></li></ul></li></ul></li><li><p>说明：</p><p>无序列表使用星号 * 、加号 + 、减号 - 表示，符号与列表文字间需有空格。</p></li></ul><h3 id="_2-有序列表" tabindex="-1"><a class="header-anchor" href="#_2-有序列表"><span>（2）有序列表</span></a></h3><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">1. 这是有序第一层（1）</span>\n<span class="line">2. 这是有序第一层（2）</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样例：</p><ol><li>这是有序第一层（1）</li><li>这是有序第一层（2）</li></ol></li><li><p>说明：</p><p>有序列表使用数字定义，用数字加英文句点表示有序列表，句点与列表文字间需有空格。列表可以嵌套，嵌套列表可以使用不同的符号。</p></li></ul><h3 id="_3-任务列表" tabindex="-1"><a class="header-anchor" href="#_3-任务列表"><span>（3）任务列表</span></a></h3><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">- [x] 已完成</span>\n<span class="line">- [ ] 待完成</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样例：</p><ul><li>[x] 已完成</li><li>[ ] 待完成</li></ul></li><li><p>说明：</p><ol><li>创建任务列表通常是使用 - [ ] 或 - [x] 语法来表示未完成的任务和已完成的任务。</li><li>注意 [ ] 内和 - 后的空格。</li></ol></li></ul><h3 id="_4-定义列表" tabindex="-1"><a class="header-anchor" href="#_4-定义列表"><span>（4）定义列表</span></a></h3><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">第一项</span>\n<span class="line">: 这是第一个术语的定义。</span>\n<span class="line">第二项</span>\n<span class="line">: 这是第二个术语的一个定义。</span>\n<span class="line">: 这是第二个术语的另一个定义。</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样例：</p><p>第一项 : 这是第一个术语的定义。</p><p>第二项 : 这是第二个术语的一个定义。 : 这是第二个术语的另一个定义。</p></li><li><p>说明：</p><ol><li>请在第一行上键入术语，在下一行，键入一个冒号，后跟一个空格和定义的内容。</li></ol></li></ul><h2 id="_9-表格" tabindex="-1"><a class="header-anchor" href="#_9-表格"><span>9. 表格</span></a></h2><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">| Column 1 | Column 2 | Column 2 |</span>\n<span class="line">|:--------|:--------:| --------:|</span>\n<span class="line">|  left-aligned 文本居左 | centered 文本居中 | right-aligned 文本居右 |</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样例：</p><table><thead><tr><th style="text-align:left;">Column 1</th><th style="text-align:center;">Column 2</th><th style="text-align:right;">Column 2</th></tr></thead><tbody><tr><td style="text-align:left;">left-aligned 文本居左</td><td style="text-align:center;">centered 文本居中</td><td style="text-align:right;">right-aligned 文本居右</td></tr></tbody></table></li><li><p>说明：</p><ol><li>第一行为表头；</li><li>第二行分隔表头与主体，可以在第二行以 : 指定对其方式，在右边加为右对齐，在两边分别加为居中对齐，默认为左对齐；</li><li>第三行开始每行为一个表格行；</li><li>列于列之间用管道符 | 隔开。</li></ol></li></ul><h2 id="_10-引用" tabindex="-1"><a class="header-anchor" href="#_10-引用"><span>10. 引用</span></a></h2><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">&gt; 这是引用样例</span>\n<span class="line">&gt;&gt; 这是引用嵌套样例</span>\n<span class="line">&gt;&gt;&gt; 引用嵌套理论上可无限嵌套</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样例：</p><blockquote><p>这是引用样例</p></blockquote><blockquote><blockquote><p>这是引用嵌套样例</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>引用嵌套理论上可无限嵌套</p></blockquote></blockquote></blockquote></li><li><p>说明：</p><ol><li>使用邮件风格大括号 &gt; 的引用声明，符号后无需加空格。</li><li>在被引用第地方直接使用 &gt;，也可以只在整个段落的第一行前加 &gt;。</li><li>在引用的前后都要插入一个空白行 否则会导致之后的段落也被标记为引用，不论两端之间加入多少个空白行。</li><li>引用可以多层嵌套只需根据不同的层次加不同数量的 &gt;。</li></ol></li></ul><h2 id="_11-分割线" tabindex="-1"><a class="header-anchor" href="#_11-分割线"><span>11. 分割线</span></a></h2><ul><li><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">***  ---  ___</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>样例：</p><hr><hr><hr></li><li><p>说明：</p><p>分隔线须使用至少3个以上的 ∗ 或 − 或 _ 来标记，行内不能有其他的字符，可以在标记符中间加上空格。</p></li></ul><h2 id="_12-代码块" tabindex="-1"><a class="header-anchor" href="#_12-代码块"><span>12. 代码块</span></a></h2><h3 id="_1-行内式-1" tabindex="-1"><a class="header-anchor" href="#_1-行内式-1"><span>（1）行内式</span></a></h3><ul><li><p>语法：</p><p>`行内式代码`</p></li><li><p>样例：</p><p><code>行内式代码</code></p></li><li><p>说明：</p><p>行内代码用一对反引号 `` 将需要转换的文字内容包括起来，它让我们方便地在行内编辑带有特殊字符的文字内容。行内代码之间不可以包含换行，如果需要包含换行，请用代码块语法。</p></li></ul><h3 id="_2-代码段" tabindex="-1"><a class="header-anchor" href="#_2-代码段"><span>（2）代码段</span></a></h3><ul><li><p>语法：</p><p>``` 在这里插入代码片 ```</p></li><li><p>样例：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">在这里插入代码片</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>说明：</p><ol><li>要在每行的开头输入不少于 4 个空格符号或者 1 个 Tab 符号；</li><li>代码块的另一种定义方式是以三个连续的反引号（```）作为开始行和结束。</li><li>代码块和行内代码都是方便于显示特殊字符，相比行内代码，代码块更有利于显示段落文本，表现出原文本的换行及缩进效果。</li><li>Markdown 的代码高亮是对代码块语法的扩展。即通过对代码块进行语法标注，对其在渲染输出时匹配不同的样式，不同的 Markdown 编译工具输出结果可能不同。</li></ol></li></ul><h3 id="_3-代码段的编程语言" tabindex="-1"><a class="header-anchor" href="#_3-代码段的编程语言"><span>（3）代码段的编程语言</span></a></h3><ul><li><p>语法：</p><p>```python 代码块 ```</p><p>```java 代码块 ```</p></li><li><p>样例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>\n<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>说明：</p><p>代码块的开始和结束标记中使用```，并在其中包含语言名称。</p></li></ul>',47)]))}const c=e(i,[["render",d]]),h=JSON.parse('{"path":"/other/other/markdown/01.html","title":"一、 语法","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754285665000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":2,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"bf54d5db5209f06fb3d25687934eecf69571d546","time":1754285665000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年8月"},{"hash":"08d014805d6447d2221b34fe03fdc2ca18411d66","time":1752490925000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年7月更新"}]},"filePathRelative":"other/other/markdown/01.md"}');export{c as comp,h as data};
