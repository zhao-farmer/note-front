import{aq as s,ar as a,as as p,at as t}from"./app-Cok9BT0p.js";const e={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="二、rollup-高级" tabindex="-1"><a class="header-anchor" href="#二、rollup-高级"><span>二、Rollup 高级</span></a></h1><h2 id="_2-1-编程式的构建控制" tabindex="-1"><a class="header-anchor" href="#_2-1-编程式的构建控制"><span>2.1 编程式的构建控制</span></a></h2><ol><li><p>核心 API 概览</p><table><thead><tr><th>方法</th><th>作用</th><th>返回值</th><th>使用场景</th></tr></thead><tbody><tr><td><code>rollup.rollup()</code></td><td>启动构建流程，生成 bundle 对象</td><td><code>Promise&lt;Bundle&gt;</code></td><td>开发自定义构建流程、插件测试</td></tr><tr><td><code>bundle.generate()</code></td><td>生成代码和 sourcemap（内存中）</td><td><code>Promise&lt;Output&gt;</code></td><td>需要后处理代码的场景（如代码分析、自定义压缩）</td></tr><tr><td><code>bundle.write()</code></td><td>将生成结果写入磁盘</td><td><code>Promise&lt;void&gt;</code></td><td>常规生产环境构建</td></tr></tbody></table></li><li><p>完整配置文件 rollup.config.js</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> rollup <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> nodeResolve <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-node-resolve&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-commonjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-typescript&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> terser <span class="token keyword">from</span> <span class="token string">&#39;@rollup/plugin-terser&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">* Rollup 构建流程分为三个阶段：</span>
<span class="line">* 1. rollup.rollup() - 创建 bundle 对象</span>
<span class="line">* 2. bundle.generate() - 内存中生成代码（可选）</span>
<span class="line">* 3. bundle.write() - 写入磁盘</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// ============================================</span></span>
<span class="line">        <span class="token comment">// 第一阶段：初始化构建（rollup.rollup）</span></span>
<span class="line">        <span class="token comment">// ============================================</span></span>
<span class="line">        <span class="token keyword">const</span> bundle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">rollup</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 核心输入配置</span></span>
<span class="line">            <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.ts&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 插件系统（按顺序执行）</span></span>
<span class="line">            <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token function">nodeResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment">// 解析 node_modules 中的模块</span></span>
<span class="line">                <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment">// 转换 CommonJS 为 ESM</span></span>
<span class="line">                <span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment">// 处理 TypeScript</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 高级配置</span></span>
<span class="line">            <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment">// 启用构建缓存（提升增量构建速度）</span></span>
<span class="line">            <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// 外部化依赖（不打包进 bundle）</span></span>
<span class="line">            <span class="token function">onwarn</span><span class="token punctuation">(</span><span class="token parameter">warning</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// 自定义警告处理</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>warning<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">&#39;UNUSED_EXTERNAL_IMPORT&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>warning<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ============================================</span></span>
<span class="line">        <span class="token comment">// 第二阶段：生成内存结果（bundle.generate，可选）</span></span>
<span class="line">        <span class="token comment">// ============================================</span></span>
<span class="line">        <span class="token keyword">const</span> memoryOutput <span class="token operator">=</span> <span class="token keyword">await</span> bundle<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;esm&#39;</span><span class="token punctuation">,</span>           <span class="token comment">// 输出格式（esm/cjs/iife/umd）</span></span>
<span class="line">            <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment">// 生成 sourcemap</span></span>
<span class="line">            <span class="token literal-property property">chunkFileNames</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[hash].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 动态导入的 chunk 命名</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 可以在此处分析内存中的输出（例如检查文件大小）</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Generated chunks:&#39;</span><span class="token punctuation">,</span> memoryOutput<span class="token punctuation">.</span>output<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> chunk<span class="token punctuation">.</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ============================================</span></span>
<span class="line">        <span class="token comment">// 第三阶段：写入磁盘（bundle.write）</span></span>
<span class="line">        <span class="token comment">// ============================================</span></span>
<span class="line">        <span class="token keyword">await</span> bundle<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span>             <span class="token comment">// 输出目录</span></span>
<span class="line">            <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;esm&#39;</span><span class="token punctuation">,</span>           <span class="token comment">// 必须与 generate() 的格式一致</span></span>
<span class="line">            <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment">// 输出 .map 文件</span></span>
<span class="line">            <span class="token literal-property property">entryFileNames</span><span class="token operator">:</span> <span class="token string">&#39;[name].js&#39;</span><span class="token punctuation">,</span>       <span class="token comment">// 入口文件名格式</span></span>
<span class="line">            <span class="token literal-property property">chunkFileNames</span><span class="token operator">:</span> <span class="token string">&#39;[name]-[hash].js&#39;</span><span class="token punctuation">,</span> <span class="token comment">// chunk 文件名格式</span></span>
<span class="line">            <span class="token literal-property property">assetFileNames</span><span class="token operator">:</span> <span class="token string">&#39;assets/[name]-[hash][extname]&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 静态资源文件名</span></span>
<span class="line">            <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     <span class="token comment">// 生产环境专用插件（代码压缩）</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 关闭 bundle 释放内存</span></span>
<span class="line">        <span class="token keyword">await</span> bundle<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Build completed!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Build failed:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 执行构建</span></span>
<span class="line"><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>关键配置项详解</p><ul><li><p>​<strong>​输入配置（rollup.rollup()）​</strong>​</p><table><thead><tr><th>配置项</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>string</code></td><td>入口文件路径（支持数组形式的多入口）</td></tr><tr><td><code>plugins</code></td><td><code>array</code></td><td>插件列表（执行顺序从前往后）</td></tr><tr><td><code>external</code></td><td><code>array</code></td><td>外部化依赖（如 <code>[&#39;react&#39;, &#39;lodash&#39;]</code>）</td></tr><tr><td><code>cache</code></td><td><code>boolean</code></td><td>启用缓存（默认 <code>true</code>，显著提升增量构建速度）</td></tr><tr><td><code>treeshake</code></td><td><code>object</code></td><td>摇树优化配置（如 <code>{ moduleSideEffects: false }</code>）</td></tr></tbody></table></li><li><p>​<strong>​输出配置（generate()/write()）​</strong>​</p><table><thead><tr><th>配置项</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>format</code></td><td><code>string</code></td><td>输出格式：<code>esm</code>（默认）、<code>cjs</code>、<code>iife</code>、<code>umd</code></td></tr><tr><td><code>dir</code>/ <code>file</code></td><td><code>string</code></td><td><code>dir</code>用于多入口输出目录，<code>file</code>用于单文件输出</td></tr><tr><td><code>sourcemap</code></td><td><code>boolean</code></td><td>是否生成 sourcemap（开发建议 <code>true</code>）</td></tr><tr><td><code>entryFileNames</code></td><td><code>string</code></td><td>入口文件名模板（如 <code>[name].js</code>）</td></tr><tr><td><code>chunkFileNames</code></td><td><code>string</code></td><td>动态导入的 chunk 文件名模板（如 <code>[name]-[hash].js</code>）</td></tr><tr><td><code>assetFileNames</code></td><td><code>string</code></td><td>静态资源文件名模板（如 <code>assets/[name]-[hash][extname]</code>）</td></tr></tbody></table></li></ul></li><li><p>代码详情</p><ul><li><p>安装插件</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 安装插件</span></span>
<span class="line"><span class="token function">pnpm</span> i rollup typescript @types/node @rollup/plugin-typescript @rollup/plugin-commonjs @rollup/plugin-node-resolve @rollup/plugin-terser --save-dev</span>
<span class="line"><span class="token comment"># 重新安装tslib</span></span>
<span class="line"><span class="token function">pnpm</span> <span class="token function">add</span> tslib --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​​示例代码​​</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// src/utils.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> greet <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// src/main.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> greet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>​​构建命令​​</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">rollup <span class="token parameter variable">-c</span>   <span class="token comment"># 使用 rollup.config.js</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><h2 id="_2-2-插件" tabindex="-1"><a class="header-anchor" href="#_2-2-插件"><span>2.2 插件</span></a></h2><ol><li><p>插件钩子分类（按阶段）</p><ol><li><p>​<strong>​构建阶段（Build Phase）​</strong>​</p><table><thead><tr><th>钩子</th><th>触发时机</th><th>用途</th></tr></thead><tbody><tr><td><code>options</code></td><td>读取配置后，构建前</td><td>修改或返回新的配置对象</td></tr><tr><td><code>buildStart</code></td><td>开始构建时</td><td>初始化操作（如清理旧文件）</td></tr><tr><td><code>resolveId</code></td><td>解析模块路径时</td><td>自定义路径解析（如别名）</td></tr><tr><td><code>load</code></td><td>加载文件内容前</td><td>动态生成或修改文件内容</td></tr><tr><td><code>transform</code></td><td>转换单个模块时</td><td>代码转换（如 Babel、TS）</td></tr></tbody></table></li><li><p>​<strong>​生成阶段（Output Phase）​</strong>​</p><table><thead><tr><th>钩子</th><th>触发时机</th><th>用途</th></tr></thead><tbody><tr><td><code>renderStart</code></td><td>生成输出文件前</td><td>准备输出环境</td></tr><tr><td><code>augmentChunkHash</code></td><td>计算 chunk 哈希前</td><td>根据自定义逻辑修改哈希</td></tr><tr><td><code>renderChunk</code></td><td>渲染单个 chunk 时</td><td>修改 chunk 代码（如添加注释）</td></tr><tr><td><code>generateBundle</code></td><td>所有 chunk 生成后，写入前</td><td>分析或修改最终 bundle</td></tr><tr><td><code>writeBundle</code></td><td>文件写入磁盘后</td><td>后处理（如上传 CDN）</td></tr></tbody></table></li></ol></li><li><p>rollup.config.js（全钩子演示版）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">&#39;src/main.js&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&#39;esm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;all-hooks-demo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// ========== 构建阶段钩子 ==========</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 1. 读取配置后立即调用（可修改配置） */</span></span>
<span class="line">            <span class="token function">options</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;原始配置:&#39;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>options<span class="token punctuation">,</span> <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 添加外部依赖</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 2. 构建开始时调用 */</span></span>
<span class="line">            <span class="token function">buildStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;构建开始！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addWatchFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;config.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加监听文件</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 3. 解析模块路径时调用 */</span></span>
<span class="line">            <span class="token function">resolveId</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> importer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token operator">===</span> <span class="token string">&#39;virtual&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;virtual-module&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">external</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 创建虚拟模块</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 交给其他插件处理</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 4. 加载文件内容前调用 */</span></span>
<span class="line">            <span class="token function">load</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token string">&#39;virtual-module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token string">&#39;export const msg = &quot;Hello from virtual!&quot;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 动态提供模块内容</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 5. 转换模块内容时调用 */</span></span>
<span class="line">            <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;special&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">code</span><span class="token operator">:</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">console.log\\(.*\\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 移除所有 console.log</span></span>
<span class="line">                    <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token comment">// 可选 sourcemap</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 6. 模块解析完成时调用（较少使用） */</span></span>
<span class="line">            <span class="token function">moduleParsed</span><span class="token punctuation">(</span><span class="token parameter">moduleInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>moduleInfo<span class="token punctuation">.</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">已解析: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>moduleInfo<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 7. 构建结束时调用（成功或失败） */</span></span>
<span class="line">            <span class="token function">buildEnd</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;构建失败:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;构建阶段完成！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// ========== 输出阶段钩子 ==========</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 8. 输出生成前调用 */</span></span>
<span class="line">            <span class="token function">renderStart</span><span class="token punctuation">(</span><span class="token parameter">outputOptions<span class="token punctuation">,</span> inputOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;生成输出到:&#39;</span><span class="token punctuation">,</span> outputOptions<span class="token punctuation">.</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 9. 为每个 chunk 生成哈希前调用 */</span></span>
<span class="line">            <span class="token function">augmentChunkHash</span><span class="token punctuation">(</span><span class="token parameter">chunkInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>chunkInfo<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 动态修改哈希</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 10. 渲染每个 chunk 时调用 */</span></span>
<span class="line">            <span class="token function">renderChunk</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> chunk</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>isEntry<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/* Entry Chunk </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chunk<span class="token punctuation">.</span>fileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> */\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">map</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 11. 所有 chunk 生成后调用（可修改最终 bundle） */</span></span>
<span class="line">            <span class="token function">generateBundle</span><span class="token punctuation">(</span><span class="token parameter">outputOptions<span class="token punctuation">,</span> bundle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Bundle 文件列表:&#39;</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 删除未使用的 chunk</span></span>
<span class="line">                Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">delete</span> bundle<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 12. 文件写入磁盘后调用 */</span></span>
<span class="line">            <span class="token function">writeBundle</span><span class="token punctuation">(</span><span class="token parameter">outputOptions<span class="token punctuation">,</span> bundle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;写入完成！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 可在此处触发部署脚本</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            </span>
<span class="line">            <span class="token doc-comment comment">/** 13. 关闭 bundle 时调用（清理资源） */</span></span>
<span class="line">            <span class="token function">closeBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;资源已释放&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2-3-代码分割与webpack一致" tabindex="-1"><a class="header-anchor" href="#_2-3-代码分割与webpack一致"><span>2.3 代码分割与webpack一致</span></a></h2><ol><li><p>修改配置文件 输出项</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// rollup.config.js</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">dir</span><span class="token operator">:</span> <span class="token string">&#39;dist&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">manualChunks</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 按依赖分组</span></span>
<span class="line">        <span class="token literal-property property">vendor</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;react&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;react-dom&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lodash&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 2. 按功能分组</span></span>
<span class="line">        <span class="token literal-property property">utils</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;src/utils/date.js&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;src/utils/string.js&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 3. 动态分组函数</span></span>
<span class="line">        <span class="token function-variable function">shared</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;shared-components&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;shared&#39;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;node_modules&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;vendor&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,7)]))}const i=s(e,[["render",l]]),u=JSON.parse('{"path":"/other/construct/rollup/02.html","title":"二、Rollup 高级","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1757530254000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"2c9ec28ff41db4bb3e8c363d6656a261f88b4c95","time":1757530254000,"email":"857899180@qq.com","author":"zhao-farmer","message":"react一些相关的"}]},"filePathRelative":"other/construct/rollup/02.md"}');export{i as comp,u as data};
