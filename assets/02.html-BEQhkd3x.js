import{aq as s,ar as a,as as p,at as t}from"./app-Cok9BT0p.js";const e="/note-front/application/cocos/base/001.png",o="/note-front/application/cocos/base/002.png",c="/note-front/application/cocos/base/003.png",l="/note-front/application/cocos/base/004.png",i="/note-front/application/cocos/base/005.png",u="/note-front/application/cocos/base/006.png",r="/note-front/application/cocos/base/007.png",k="/note-front/application/cocos/base/009.png",d="/note-front/application/cocos/base/008.png",v="/note-front/application/cocos/base/010.png",m="/note-front/application/cocos/base/011.png",b="/note-front/application/cocos/base/012.png",g="/note-front/application/cocos/base/013.png",y="/note-front/application/cocos/base/014.png",h="/note-front/application/cocos/base/015.png",f="/note-front/application/cocos/base/016.png",w="/note-front/application/cocos/base/017.png",_="/note-front/application/cocos/base/018.png",C="/note-front/application/cocos/base/019.png",x="/note-front/application/cocos/base/020.png",q="/note-front/application/cocos/base/021.png",E="/note-front/application/cocos/base/022.png",S="/note-front/application/cocos/base/023.png",T="/note-front/application/cocos/base/103.png",I="/note-front/application/cocos/base/104.png",M="/note-front/application/cocos/base/024.png",A="/note-front/application/cocos/base/025.png",j="/note-front/application/cocos/base/026.png",U="/note-front/application/cocos/base/027.png",N="/note-front/application/cocos/base/028.jpg",L="/note-front/application/cocos/base/030.png",O="/note-front/application/cocos/base/029.png",F="/note-front/application/cocos/base/031.png",D="/note-front/application/cocos/base/032.png",B="/note-front/application/cocos/base/033.png",P="/note-front/application/cocos/base/034.png",R="/note-front/application/cocos/base/035.png",z="/note-front/application/cocos/base/036.png",K="/note-front/application/cocos/base/037.png",H="/note-front/application/cocos/base/038.png",V={};function Y(J,n){return t(),a("div",null,n[0]||(n[0]=[p('<h1 id="二、cocos-creator-基础" tabindex="-1"><a class="header-anchor" href="#二、cocos-creator-基础"><span>二、cocos creator 基础</span></a></h1><h2 id="_2-1-下载软件并调整配置" tabindex="-1"><a class="header-anchor" href="#_2-1-下载软件并调整配置"><span>2.1 下载软件并调整配置</span></a></h2><ol><li><p>进入<a href="https://docs.cocos.com/creator/3.8/manual/zh/" target="_blank" rel="noopener noreferrer">Cocos Creator官网</a></p></li><li><p>选择新手上路</p><ul><li>下载</li></ul><p><img src="'+e+'" alt=""></p><ul><li>设置下载目录</li></ul><p><img src="'+o+'" alt=""></p><ul><li>下载cocos版本</li></ul><p><img src="'+c+'" alt=""></p></li><li><p>打开项目</p><ul><li>新建项目</li></ul><p><img src="'+l+'" alt=""></p><ul><li>项目配置</li></ul><p><img src="'+i+'" alt=""></p></li><li><p>调整Cocos Creator</p><ul><li>修改语言</li></ul><p><img src="'+u+'" alt=""></p><ul><li>脚本编辑器</li></ul><p><img src="'+r+'" alt=""></p></li><li><p>调整vscode</p><ul><li>排除文件</li></ul><p><img src="'+k+'" alt=""></p></li><li><p>项目结构</p><p><img src="'+d+'" alt=""></p><ul><li>assets：资源目录</li><li>build：构建目录（在构建某平台后会生成该目录）</li><li>library：导入的资源目录</li><li>local：日志文件目录</li><li>profiles：编辑器配置</li><li>settings：项目设置</li><li>temp：临时文件目录</li><li>package.json：项目配置</li></ul></li></ol><h2 id="_2-2-cocos-creator-面向组件" tabindex="-1"><a class="header-anchor" href="#_2-2-cocos-creator-面向组件"><span>2.2 cocos creator 面向组件</span></a></h2><ol><li>节点（Node）作为功能载体 <ol><li><p>节点是基础容器‌</p><p>节点是场景中的基本实体，本质上是一个“空壳”，它承载位置、旋转、缩放等基础属性，并形成树状层级关系（父子节点相互影响）。</p></li><li><p>节点通过组件赋予功能‌</p><p>节点本身不具备具体逻辑能力，需通过挂载‌组件（Component）‌ 实现功能（如渲染、物理、交互等）‌。例如：</p><p>添加 <code>Sprite</code> 组件 → 节点可显示图片 <br>添加 <code>Button</code> 组件 → 节点可响应点击</p></li></ol></li><li>组件（Component）作为功能单元 <ol><li><p>组件化封装逻辑‌</p><p>每个组件是独立的功能模块（如移动控制、动画播放、数据存储），开发者可通过脚本编写自定义组件，通过 <code>node.addComponent(MyComponent)</code> 动态挂载到节点‌。</p></li><li><p>组件间解耦协作‌</p><p>节点可挂载多个组件，各组件通过节点通信（例如：<code>this.node.getComponent(PhysicsBody)</code> 获取同节点的物理组件），实现功能组合而非继承‌</p></li></ol></li></ol><h2 id="_2-3-页面快速介绍" tabindex="-1"><a class="header-anchor" href="#_2-3-页面快速介绍"><span>2.3 页面快速介绍</span></a></h2><ol><li>快速浏览页面</li></ol><p><img src="'+v+'" alt=""></p><ol start="2"><li><p>快捷键</p><ol><li><p>3D 视图</p><p>在 3D 视图下，可以通过以下操作来移动和定位 场景编辑器 的视图：</p><ul><li>鼠标左键 + Alt：以视图中心点为中心旋转。</li><li>鼠标中键：平移视图。</li><li>空格键 + 鼠标/触摸板拖拽：平移视图。</li><li>鼠标滚轮：以视图中心点为中心缩放视图。</li><li>鼠标右键 + WASD：摄像机漫游。</li><li>F 快捷键：摄像机聚焦到当前选中节点。</li></ul></li><li><p>2D 视图</p><p>在 2D 视图下，可以通过以下操作来移动和定位 场景编辑器 的视图：</p><ul><li>鼠标中键：平移视图。</li><li>鼠标滚轮：以当前鼠标悬停位置为中心缩放视图。</li><li>鼠标右键：平移视图。</li><li>F 快捷键：摄像机聚焦到当前选中节点。</li></ul></li></ol></li></ol><h2 id="_2-4-锚点与坐标系" tabindex="-1"><a class="header-anchor" href="#_2-4-锚点与坐标系"><span>2.4 锚点与坐标系</span></a></h2><ol><li>界面中的坐标轴与锚点</li></ol><p><img src="'+m+'" alt=""></p><ol start="2"><li><p>坐标轴</p><ul><li>世界坐标‌：全局固定参考系，适用于跨节点交互和底层系统（如物理、输入事件）27。</li><li>本地坐标‌：层级化设计核心，简化父子节点相对位置控制</li></ul></li><li><p>锚点</p><ol><li><p>定位基准‌</p><p>锚点定义了节点约束框内的参考点（默认为节点中心 (0.5, 0.5)），节点的 position 属性实际是锚点相对于父节点的位置‌。</p><p>例如：锚点设为 (0, 0) 时，节点的左下角将作为定位基准‌。</p></li><li><p>影响变换操作‌</p><p>旋转和缩放会以锚点为中心进行。若锚点不在节点中心，旋转时节点会绕锚点偏移‌。</p></li><li><p>UI 适配关键‌</p><p>在 UI 布局中，锚点与 Widget 组件配合，可动态调整节点相对于父容器边缘的位置（如按钮始终贴附屏幕右下角）‌</p></li></ol></li></ol><h2 id="_2-5-精灵的使用" tabindex="-1"><a class="header-anchor" href="#_2-5-精灵的使用"><span>2.5 精灵的使用</span></a></h2><ol><li>介绍</li></ol><p>精灵是挂载在节点上的 cc.Sprite 组件，用于显示单张图片或精灵表中的子图帧（SpriteFrame）</p><ol start="2"><li>创建精灵</li></ol><p><img src="'+b+'" alt=""></p><ol start="3"><li>精灵属性</li></ol><table><thead><tr><th>属性</th><th>功能说明</th></tr></thead><tbody><tr><td><code>CustomMaterial</code></td><td>自定义材质，使用方法参考 自定义材质</td></tr><tr><td><code>Color</code></td><td>图片颜色</td></tr><tr><td><code>Sprite Atlas</code></td><td>Sprite 显示图片资源所属的图集（Atlas）。</td></tr><tr><td><code>Sprite Frame</code></td><td>渲染 Sprite 使用的 SpriteFrame 图片资源。</td></tr><tr><td><code>Grayscale</code></td><td>灰度模式，开启后 Sprite 会使用灰度模式渲染。</td></tr><tr><td><code>Size Mode</code></td><td>指定 Sprite 的尺寸 <br> <strong>Trimmed</strong> 表示会使用原始图片资源裁剪透明像素后的尺寸 <br> <strong>Raw</strong> 表示会使用原始图片未经裁剪的尺寸 <br> <strong>Custom</strong> 表示会使用自定义尺寸。当用户手动修改过 Size 属性后，Size Mode 会被自动设置为 Custom，除非再次指定为前两种尺寸。</td></tr><tr><td><code>Type</code></td><td>渲染模式，包括普通（Simple）、九宫格（Sliced）、平铺（Tiled）和填充（Filled）四种模式</td></tr><tr><td><code>Trim</code></td><td>是否渲染原始图像周围的透明像素区域</td></tr></tbody></table><ol start="4"><li><p>渲染模式</p><ol><li><p>普通模式（Simple）：根据原始图片资源渲染 Sprite，一般在这个模式下我们不会手动修改节点的尺寸，来保证场景中显示的图像和美术人员生产的图片比例一致。</p></li><li><p>九宫格模式（Sliced）：图像将被分割成九宫格，并按照一定规则进行缩放以适应可随意设置的尺寸(size)。通常用于 UI 元素，或将可以无限放大而不影响图像质量的图片制作成九宫格图来节省游戏资源空间。</p><p>编辑图像资源的九宫格切分</p><ol><li>首先打开 Sprite 编辑器，在 资源管理器 中选中图像资源</li><li>然后点击 属性检查器 最下面的 编辑 按钮。</li><li>点击 Sprite 编辑器 右上角的绿色对勾来保存</li></ol><p><img src="'+g+'" alt=""></p></li><li><p>平铺模式（Tiled）：当 Sprite 的尺寸增大时，图像不会被拉伸，而是会按照原始图片的大小不断重复，就像平铺瓦片一样将原始图片铺满整个 Sprite 规定的大小。</p></li></ol><p><img src="'+y+'" alt=""></p><ol start="4"><li><p>填充模式（Filled）：根据原点和填充模式的设置，按照一定的方向和比例绘制原始图片的一部分。经常用于进度条的动态展示。</p><p>Type 属性选择填充模式后，会出现一组新的属性可供配置：</p><table><thead><tr><th>属性</th><th>功能说明</th></tr></thead><tbody><tr><td>Fill Type</td><td>填充类型选择，有 HORIZONTAL（横向填充）、VERTICAL（纵向填充）和 RADIAL（扇形填充）三种。</td></tr><tr><td>Fill Start</td><td>填充起始位置的标准化数值（从 0 ~ 1，表示填充总量的百分比），选择横向填充时，Fill Start 设为 0，就会从图像最左边开始填充</td></tr><tr><td>Fill Range</td><td>填充范围的标准化数值（同样从 0 ~ 1），设为 1，就会填充最多整个原始图像的范围。</td></tr><tr><td>Fill Center</td><td>填充中心点，该属性只有选择了 RADIAL 填充类型才能修改。决定了扇形填充时会环绕 Sprite 上的哪个点。</td></tr></tbody></table><p><img src="'+h+'" alt=""></p></li></ol></li></ol><h2 id="_2-6-精灵图表" tabindex="-1"><a class="header-anchor" href="#_2-6-精灵图表"><span>2.6 精灵图表</span></a></h2><ol><li><p>介绍</p><p>精灵表是将多张小图合并为一张大图（并附带 .plist 或 .json 坐标描述文件）的资源包，作用包括：</p><p><strong>减少 DrawCall‌</strong>：合并渲染批次，提升性能; ‌<br><strong>简化动画制作‌</strong>：序列帧动画可直接调用精灵表中的帧</p></li><li><p>创建精灵表</p><ul><li><p><a href="https://github.com/odrick/free-tex-packer" target="_blank" rel="noopener noreferrer">下载Free texture packer</a> 或者 <a href="https://free-tex-packer.com/app/" target="_blank" rel="noopener noreferrer">进入网站</a></p></li><li><p>操作步骤</p></li></ul><p><img src="'+f+'" alt=""></p></li><li><p>导入cocos creater 使用</p><p><img src="'+w+`" alt=""></p></li></ol><h2 id="_2-7-向量以及运算" tabindex="-1"><a class="header-anchor" href="#_2-7-向量以及运算"><span>2.7 向量以及运算</span></a></h2><ol><li><p>向量与标量</p><ul><li><p>标量：只有大小的量。(1 85 888 999)</p></li><li><p>向量：既有大小，也有方向。(坐标轴中：1,2 2,1)</p><ul><li>向量的模：向量的大小</li><li>单位向量：大小为1的向量</li><li>单位化，归一化：把向量转为单位向量的过程</li></ul></li></ul></li><li><p>向量的加法</p></li></ol><div class="language-math line-numbers-mode" data-highlighter="prismjs" data-ext="math"><pre><code><span class="line">A(x1,y1) + B(x2,y2) = x1+x2,y1+y2 = 3,3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+_+`" alt=""></p><p>可以确认两条边中间的方向</p><ol start="3"><li>向量的减法</li></ol><div class="language-math line-numbers-mode" data-highlighter="prismjs" data-ext="math"><pre><code><span class="line">A(x1,y1) - B(x2,y2) = x1-x2,y1-y2 = -1,1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+C+`" alt=""></p><p>可以得到两点距离的大小与方向</p><ol start="4"><li>向量的乘法</li></ol><div class="language-math line-numbers-mode" data-highlighter="prismjs" data-ext="math"><pre><code><span class="line">A(x1,y1) * 2 = x1*2,y1*2 = 2,4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="`+x+'" alt=""></p><p>是原来坐标的延申，方向没有改变</p><ol start="5"><li>点乘</li></ol><p>得到两个向量之间的夹角</p><p><img src="'+q+'" alt=""></p><h2 id="_2-8-脚本解析" tabindex="-1"><a class="header-anchor" href="#_2-8-脚本解析"><span>2.8 脚本解析</span></a></h2><ol><li>新建脚本</li></ol><p><img src="'+E+`" alt=""></p><h3 id="_2-8-1-脚本运行环境" tabindex="-1"><a class="header-anchor" href="#_2-8-1-脚本运行环境"><span>2.8.1 脚本运行环境</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span></span>
<span class="line">    Component<span class="token punctuation">,</span>  <span class="token comment">// 导入类 Component</span></span>
<span class="line">    _decorator<span class="token punctuation">,</span> <span class="token comment">// 导入命名空间 _decorator</span></span>
<span class="line">    Vec3 <span class="token comment">// 导入类 Vec3</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> modules <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 将整个 Cocos Creator 模块导入为命名空间 Cocos Creator</span></span>
<span class="line"></span>
<span class="line">@_decorator<span class="token punctuation">.</span><span class="token function">ccclass</span><span class="token punctuation">(</span><span class="token string">&quot;MyComponent&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vec3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-2-装饰器" tabindex="-1"><a class="header-anchor" href="#_2-8-2-装饰器"><span>2.8.2 装饰器</span></a></h3><ol><li><p>组件装饰器</p><p>此类装饰器是只能用来修饰 Component 的子类。</p><ul><li><p>executeInEditMode</p><p>默认情况下，所有组件都会运行时执行，这个属性运行组件在编辑器模式下运行，默认值<code>false</code></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> executeInEditMode <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token decorator"><span class="token at operator">@</span><span class="token function">executeInEditMode</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">update</span> <span class="token punctuation">(</span>dt<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 会在编辑器下每帧执行</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>requireComponent</p><p>指定当前组件的依赖组件，默认值为<code>null</code></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> requireComponent <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token decorator"><span class="token at operator">@</span><span class="token function">requireComponent</span></span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>executionOrder</p><p>指定脚本生命周期回调的执行优先级。小于 0 的脚本将优先执行，大于 0 的脚本将最后执行。排序方式如下：</p><ul><li>对于同一节点上的不同组件，数值小的先执行，数值相同的按组件添加先后顺序执行</li><li>对于不同节点上的同一组件，按节点树排列决定执行的先后顺序</li></ul><p>该优先级设定只对 onLoad、onEnable、start、update 和 lateUpdate 有效，对 onDisable 和 onDestroy 无效。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> executionOrder <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token decorator"><span class="token at operator">@</span><span class="token function">executionOrder</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>disallowMultiple</p><p>同一节点上只允许添加一个同类型（含子类）的组件，防止逻辑发生冲突，默认值为 false。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> disallowMultiple <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span></span>
<span class="line highlighted"><span class="token decorator"><span class="token at operator">@</span><span class="token function">disallowMultiple</span></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>menu</p><p>@menu(path) 用来将当前组件添加到组件菜单中，方便用户查找。</p><p>需要注意该菜单是添加在 属性检查器 面板中按下添加组件按钮后的下拉框内。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> menu <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">menu</span></span><span class="token punctuation">(</span><span class="token string">&#39;foo/bar&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>help</p><p>指定当前组件的帮助文档的 URL。设置完成后，在 属性检查器 中就会出现一个帮助图标，点击即可打开指定的网页。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> help <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">help</span></span><span class="token punctuation">(</span><span class="token string">&#39;https://docs.cocos.com/creator/3.5/manual/zh/scripting/decorator.html&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>属性装饰器</p><p>属性装饰器 property 可以被应用在 cc 类的属性或访问器上。属性装饰器用于控制 Cocos Creator 编辑器中对该属性的序列化、属性检查器 中对该属性的展示等。</p><p>属性装饰器的各种特性是通过 @property() 的参数来指定的。</p><ol><li><p>type 参数</p><p>选项 type 指定了属性的 cc 类型。可以通过以下几种形式的参数指定类型：</p><ul><li><p>基础属性类型</p><p>CCInteger、CCFloat、CCBoolean、CCString 是基础属性类型标识，一般仅用于数组属性的内部类型声明。非数组类型不需要显式声明这些类型。</p><ul><li>CCInteger 声明类型为 整数</li><li>CCFloat 声明类型为 浮点数</li><li>CCString 声明类型为 字符串</li><li>CCBoolean 声明类型为 布尔值</li></ul></li><li><p>其他 cc 类型</p><p>所有的 cc 类型 都需要显式指定，否则编辑器无法正确识别类型，序列化也无法写入正确类型。</p></li><li><p>数组类型</p><p>当使用基础属性类型或者 cc 类作为数组元素时，可以被通过数组类型声明被编辑器所识别。例如 <code>[CCInteger]</code>、<code>[Node]</code> 将分别以整数数组和节点数组的形式在 属性检查器 中展示。</p></li><li><p>若属性未指定类型</p><p>Cocos Creator 将从属性的默认值或初始化式的求值结果推导其类型：</p><ul><li>若值的类型是 JavaScript 原始类型 number、string、boolean，则其类型分别对应 Creator 的CCFloat、CCString 和 CCBoolean。</li><li>其他情况下属性的类型则是 未定义 的，编辑器上会提示 Type(Unknown) 字样。</li></ul></li></ul><blockquote><p>注意：当声明 JavaScript 内置构造函数 Number、String、Boolean 用作类型时将给出警告，并且将分别视为 cc 类型中的 CCFloat、CCString、CCBoolean。已经初始化的数组属性修改类型后，需要手动清除掉原来的数组数据，重新赋值，否则会因为数据类型不一致，导致数据错乱。 注意：需要在编辑器 属性检查器 中展示的属性，属性名开头不应该带 _，否则会识别为 private 属性，private 属性不会在编辑器组件属性面板上显示。</p></blockquote><p>下列代码演示了不同 cc 类型的属性声明：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> CCInteger<span class="token punctuation">,</span> Node<span class="token punctuation">,</span> Enum <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> property<span class="token punctuation">,</span> integer<span class="token punctuation">,</span> float<span class="token punctuation">,</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token constant">A</span> <span class="token punctuation">{</span></span>
<span class="line">    c<span class="token punctuation">,</span></span>
<span class="line">    d</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">Enum</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span> <span class="token comment">// JavaScript 原始类型，根据默认值自动识别为 Creator 的浮点数类型。</span></span>
<span class="line">    index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span> <span class="token comment">// 声明属性 cc 类型为 Node。当属性参数只有 type 时可这么写，等价于 @property({type: Node})</span></span>
<span class="line">    targetNode<span class="token operator">:</span> Node <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 等价于 targetNode: Node = null!;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 声明属性 children 的 cc 类型为 Node 数组</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        type<span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    children<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        type<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 警告：不应该使用构造函数 String。等价于 CCString。也可以选择不声明类型</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span></span>
<span class="line">    children2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 未声明 cc 类型，从初始化式的求值结果推断元素为未定义的数组</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span></span>
<span class="line">    _valueB <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 此处 &#39;_&#39; 开头的属性，只序列化，不会在编辑器属性面板显示</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">A</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    accx <span class="token operator">:</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便，额外提供几种装饰器以快速声明 cc 类型。如果你只需要为属性定义 type 参数，那么可以直接使用下列装饰器替代 @property：</p><table><thead><tr><th>装饰器</th><th>对应的 property 写法</th></tr></thead><tbody><tr><td>@type(t)</td><td>@property(t)</td></tr><tr><td>@integer</td><td>@property(CCInteger)</td></tr><tr><td>@float</td><td>@property(CCFloat)</td></tr></tbody></table><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> CCInteger<span class="token punctuation">,</span> Node <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> property<span class="token punctuation">,</span> integer<span class="token punctuation">,</span> float<span class="token punctuation">,</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">integer</span></span> <span class="token comment">// 声明属性的 cc 类型为整数</span></span>
<span class="line">    index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">type</span></span><span class="token punctuation">(</span><span class="token punctuation">[</span>Node<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 声明属性 children 的 cc 类型为 Node 数组</span></span>
<span class="line">    children<span class="token operator">:</span> Node<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">type</span></span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token comment">// 警告：不应该使用构造函数 String。等价于 CCString。也可以选择不声明类型</span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// JavaScript 原始类型 \`number\`、\`string\`、\`boolean\` 通常可以不用声明</span></span>
<span class="line">    <span class="token comment">// 可以直接写</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span></span>
<span class="line">    text <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ul><li><p>visible</p><p>一般情况下，属性是否显示在 属性检查器 中取决于属性名是否以 _ 开头。如果是以 _ 开头，则不显示。</p><p>如果要强制显示在 属性检查器 中，可以设置 visible 参数为 true：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> visible<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">private</span> _num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要强制隐藏，可以设置 visible 参数为 false：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> visible<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>serializable</p><p>属性默认情况下都会被序列化，序列化后就会将编辑器中设置好的属性值保存到场景等资源文件中，之后在加载场景时就会自动还原成设置好的属性值。如果不想序列化，可以设置 serializable: false。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@property({ serializable: false })</span>
<span class="line">num = 0;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>override</p><p>所有属性都会被子类继承，如果子类要覆盖父类同名属性，需要显式设置 override 参数，否则会有重名警告：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">@property({ tooltip: &quot;my id&quot;, override: true })</span>
<span class="line">id = &quot;&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>group 当脚本中定义的属性过多且杂时，可通过 group 对属性进行分组、排序，方便管理。同时还支持对组内属性进行分类。</p><p>group 写法包括以下两种：</p><ul><li><p>@property({ group: { name } })</p></li><li><p>@property({ group: { id, name, displayOrder, style } })</p></li></ul><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>分组 ID，string 类型，是属性分组组号的唯一标识，默认为 default。</td></tr><tr><td>name</td><td>组内属性分类的名称，string 类型。</td></tr><tr><td>displayOrder</td><td>对分组进行排序，number 类型，数字越小，排序越靠前。默认为 Infinity，表示排在最后面。</td></tr><tr><td>若存在多个未设置的分组，则以在脚本中声明的先后顺序进行排序</td><td></td></tr><tr><td>style</td><td>分组样式，目前支持 tab 和 section 样式。 默认为 tab。</td></tr></tbody></table><p>示例脚本如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Label<span class="token punctuation">,</span> Sprite <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span> property <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;SayHello&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">SayHello</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 分组一</span></span>
<span class="line">    <span class="token comment">// 组内名为 “bar” 的属性分类，其中包含一个名为 label 的 Label 属性</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> group<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> type<span class="token operator">:</span> Label <span class="token punctuation">}</span><span class="token punctuation">)</span> </span>
<span class="line">    label<span class="token operator">:</span> Label <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token comment">// 组内名为 “foo” 的属性分类，其中包含一个名为 sprite 的 Sprite 属性</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> group<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> type<span class="token operator">:</span> Sprite <span class="token punctuation">}</span><span class="token punctuation">)</span> </span>
<span class="line">    sprite<span class="token operator">:</span> Sprite <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 分组二</span></span>
<span class="line">    <span class="token comment">// 组内名为 “bar2” 的属性分类，其中包含名为 label2 的 Label 属性和名为 sprite2 的 Sprite 属性，并且指定排序为 1。</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> group<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;bar2&#39;</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> displayOrder<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> type<span class="token operator">:</span> Label <span class="token punctuation">}</span><span class="token punctuation">)</span> </span>
<span class="line">    label2<span class="token operator">:</span> Label <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> group<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;bar2&#39;</span><span class="token punctuation">,</span> id<span class="token operator">:</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> type<span class="token operator">:</span> Sprite <span class="token punctuation">}</span><span class="token punctuation">)</span> </span>
<span class="line">    sprite2<span class="token operator">:</span> Sprite <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将该脚本挂载到节点上，则在 属性检查器 中显示为：</p><p><img src="`+S+`" alt=""></p></li></ul></li></ol><h3 id="_2-8-3-声明周期函数" tabindex="-1"><a class="header-anchor" href="#_2-8-3-声明周期函数"><span>2.8.3 声明周期函数</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 脚本初始化 onload总在start前面</span></span>
<span class="line">    <span class="token function">onLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onLoad&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 组件启用时调用 与 onDisable 是一对</span></span>
<span class="line">    <span class="token function">onEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onEnable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 开始加载</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 每一帧都会调用它</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// update后调用</span></span>
<span class="line">    <span class="token function">lastUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;lastUpdate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 组件非启用 关闭时调用</span></span>
<span class="line">    <span class="token function">onDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onDisable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 销毁时嗲用</span></span>
<span class="line">    <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;onDestroy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-9-节点与ui变换组件" tabindex="-1"><a class="header-anchor" href="#_2-9-节点与ui变换组件"><span>2.9 节点与UI变换组件</span></a></h2><p>每个节点上都有这两个基础组件 <code>node</code> 与 <code>cc.UITransform</code></p><h3 id="_2-9-1-node组件" tabindex="-1"><a class="header-anchor" href="#_2-9-1-node组件"><span>2.9.1 node组件</span></a></h3><ol><li><p>界面位置</p><p><img src="`+T+'" alt=""></p></li><li><p>属性介绍</p><ul><li>Position：位置</li><li>Rotation: 旋转</li><li>Scale：缩放</li><li>Mobility：节点的可移动性(跟摄像机相关，2D可以不用管)。 <ul><li>对于持有光源组件的节点 <ul><li>Static 静态光源：会烘焙直接光与间接光，烘焙完运行时不参与计算</li><li>Stationary 固定光源：只烘焙间接光，只在运行时计算直接光</li><li>Movable 可移动光源：不参与烘焙，只在运行时计算直接光</li></ul></li><li>对于持有 MeshRenderer 的节点 <ul><li>Static &amp; Stationary 静态物体：可使用光照贴图</li><li>Movable 动态物体：可使用光照探针 通常来说在拥有 MeshRenderer 组件的节点上可以添加灯光组件，但并不建议，可以考虑分开多个节点来实现这样的需求。</li></ul></li></ul></li><li>Layer：设定节点的可见性能力(2D可以不用管)。</li></ul></li></ol><h3 id="_2-9-2-uitransform组件" tabindex="-1"><a class="header-anchor" href="#_2-9-2-uitransform组件"><span>2.9.2 UITransform组件</span></a></h3><ol><li><p>界面位置</p><p><img src="'+I+`" alt=""></p></li><li><p>属性介绍</p><p>定义了 UI 上的矩形信息，包括矩形的尺寸和锚点位置。开发者可以通过该组件任意地操作矩形的大小、位置。一般用于渲染、点击事件的计算、界面布局以及屏幕适配等。</p><ul><li>ContentSize：<code>UI 矩形</code>内容尺寸</li><li>AnchorPoint：<code>UI 矩形</code>锚点位置</li></ul></li></ol><h3 id="_2-9-3-常用属性方法" tabindex="-1"><a class="header-anchor" href="#_2-9-3-常用属性方法"><span>2.9.3 常用属性方法</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> find<span class="token punctuation">,</span>Sprite<span class="token punctuation">,</span>v3<span class="token punctuation">,</span>UITransform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test2&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* --------------- 方法 --------------- */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取第一个子节点</span></span>
<span class="line">        <span class="token keyword">let</span> ddd <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token comment">// 通过名称获取子节点</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">getChildByName</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 获取其他组件的子节点</span></span>
<span class="line">        <span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;Canvas/Main Camera&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取父节点</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 移除父节点</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 移除所有子节点</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">removeAllChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 移除某个子节点</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>ddd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 从父节点移除本身</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* --------------- 属性 --------------- */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 访问位置</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>x<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>y<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">setPosition</span><span class="token punctuation">(</span><span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 旋转  需要使用四元素设置角度</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>rotation</span>
<span class="line">        <span class="token comment">// 欧拉角旋转</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">setRotationFromEuler</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 缩放</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// node节点开关</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 组件开关</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">/* --------------- 获取组件 --------------- */</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 精灵</span></span>
<span class="line">        <span class="token keyword">let</span> sprite <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        sprite<span class="token punctuation">.</span>enabled <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token comment">// 获取精灵数组</span></span>
<span class="line">        <span class="token keyword">let</span> sprites <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponents</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取子组件</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponentInChildren</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建节点</span></span>
<span class="line">        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token string">&quot;new&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 添加组件</span></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">addComponent</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">/* --------------- UITransform --------------- */</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取 UI 变换组件</span></span>
<span class="line">        <span class="token keyword">const</span> uiTransform <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>UITransform<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//  获取锚点与大小</span></span>
<span class="line">        uiTransform<span class="token punctuation">.</span><span class="token function">setContentSize</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        uiTransform<span class="token punctuation">.</span><span class="token function">setAnchorPoint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取锚点与大小</span></span>
<span class="line">        uiTransform<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line">        uiTransform<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">;</span></span>
<span class="line">        uiTransform<span class="token punctuation">.</span>anchorX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        uiTransform<span class="token punctuation">.</span>anchorY <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-10-预设体" tabindex="-1"><a class="header-anchor" href="#_2-10-预设体"><span>2.10 预设体</span></a></h2><p>预设体的意义，相同的组件不再创建多次，能够独立修改</p><ol><li><p>组件拖拽成预设体(存档)</p><p><img src="`+M+'" alt=""></p></li><li><p>预设体修改(读档)</p><p><img src="'+A+`" alt=""></p><ul><li>修改预设体：修改后的预设体并不会马上关联，下次继续拖拽会展示修改后的预设体</li><li>移除预设体关联：不再是预设体</li><li>定位资源：定位到资源目录具体设定的预设体</li><li>从资源还原：回到刚生成时的状态</li><li>更新到资源：当前状态更新到预设体</li></ul></li><li><p>脚本创建预设体</p><ul><li>脚本</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span>instantiate<span class="token punctuation">,</span>Prefab <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span>property <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 预设属性</span></span>
<span class="line">    <span class="token decorator"><span class="token at operator">@</span><span class="token function">property</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> Prefab <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    pre<span class="token operator">:</span> Prefab<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 初始化</span></span>
<span class="line">        <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token function">instantiate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 添加到当前节点的子节点</span></span>
<span class="line">        newNode<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>预设体做拽到脚本里</li></ul><p><img src="`+j+'" alt=""></p><ul><li>运行后，才能发现组件</li></ul><p><img src="'+U+'" alt=""></p></li></ol><h2 id="_2-11-资源的动态加载" tabindex="-1"><a class="header-anchor" href="#_2-11-资源的动态加载"><span>2.11 资源的动态加载</span></a></h2><ol><li><p>设置一个组件下精灵不存在,挂载了脚本</p><ul><li>界面</li></ul><p><img src="'+N+`" alt=""></p><ul><li>脚本代码</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span>resources<span class="token punctuation">,</span> Sprite<span class="token punctuation">,</span> SpriteFrame <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        resources<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;test/land/spriteFrame&quot;</span><span class="token punctuation">,</span> SpriteFrame<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> spriteFrame<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            sprite<span class="token punctuation">.</span>spriteFrame <span class="token operator">=</span> spriteFrame<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果</li></ul><p><img src="`+L+'" alt=""></p></li><li><p>加载图集</p><ul><li>界面</li></ul><p><img src="'+O+`" alt=""></p><ul><li>代码</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span>resources<span class="token punctuation">,</span> Sprite<span class="token punctuation">,</span> SpriteAtlas<span class="token punctuation">,</span> SpriteFrame <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        resources<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;test2/texture&quot;</span><span class="token punctuation">,</span> SpriteAtlas<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> atlas<span class="token operator">:</span>SpriteAtlas<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            sprite<span class="token punctuation">.</span>spriteFrame <span class="token operator">=</span> atlas<span class="token punctuation">.</span><span class="token function">getSpriteFrame</span><span class="token punctuation">(</span><span class="token string">&quot;bg_day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>结果</li></ul><p><img src="`+F+'" alt=""></p></li></ol><h2 id="_2-12-场景管理" tabindex="-1"><a class="header-anchor" href="#_2-12-场景管理"><span>2.12 场景管理</span></a></h2><ol><li>保存第一个场景，并新建label组件</li></ol><p><img src="'+D+'" alt=""></p><ol start="2"><li>新建场景，添加label,并保存</li></ol><p><img src="'+B+`" alt=""></p><ol start="3"><li><p>脚本</p><ul><li>代码</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span>game<span class="token punctuation">,</span> director <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 加载第二个场景</span></span>
<span class="line">        director<span class="token punctuation">.</span><span class="token function">loadScene</span><span class="token punctuation">(</span><span class="token string">&quot;game2&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前已经加载到新的场景里了</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 预加载</span></span>
<span class="line">        director<span class="token punctuation">.</span><span class="token function">preloadScene</span><span class="token punctuation">(</span><span class="token string">&quot;game2&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 这个场景已经加载到内除了，但是还没有用</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 常驻节点 不同的场景里都有它</span></span>
<span class="line">        director<span class="token punctuation">.</span><span class="token function">addPersistRootNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        director<span class="token punctuation">.</span><span class="token function">removePersistRootNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>拖拽到第一个场景中使用</li></ul><p><img src="`+P+'" alt=""></p></li></ol><h2 id="_2-13-操作交互" tabindex="-1"><a class="header-anchor" href="#_2-13-操作交互"><span>2.13 操作交互</span></a></h2><p>准备工作：新建节点与挂载脚本</p><p><img src="'+R+`" alt=""></p><blockquote><p>注意：事件触发只会在节点自身区域内</p></blockquote><h3 id="_2-13-1-鼠标事件" tabindex="-1"><a class="header-anchor" href="#_2-13-1-鼠标事件"><span>2.13.1 鼠标事件</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> EventMouse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 提示信息中的 Input.EventType.MOUSE_LEAVE </span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">MOUSE_DOWN</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventMouse<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标按下触发:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 判断左键右键</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token operator">||</span>event<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> EventMouse<span class="token punctuation">.</span><span class="token constant">BUTTON_RIGHT</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;左键&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;滚轮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">             <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">||</span> event<span class="token punctuation">.</span><span class="token function">getButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> EventMouse<span class="token punctuation">.</span><span class="token constant">BUTTON_LEFT</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;右键&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">MOUSE_UP</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventMouse<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标松开触发:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">MOUSE_MOVE</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventMouse<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标移动触发:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">MOUSE_LEAVE</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventMouse<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标离开触发:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">MOUSE_WHEEL</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventMouse<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;鼠标滚轮触发:&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 停止监听</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">MOUSE_UP</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：代码提示中的<code>Input.EventType.MOUSE_LEAVE</code>,已经没有作用</p></blockquote><h3 id="_2-13-2-键盘事件" tabindex="-1"><a class="header-anchor" href="#_2-13-2-键盘事件"><span>2.13.2 键盘事件</span></a></h3><p>键盘事件是能使用input监听，不使用本节点，鼠标触摸两种都可以</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> input<span class="token punctuation">,</span> EventKeyboard<span class="token punctuation">,</span> KeyCode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        input<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">KEY_DOWN</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventKeyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;键盘按下触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> KeyCode<span class="token punctuation">.</span><span class="token constant">KEY_A</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;按下A触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode <span class="token operator">==</span> KeyCode<span class="token punctuation">.</span><span class="token constant">KEY_B</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;按下B触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        input<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">KEY_PRESSING</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventKeyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;键盘持续按下触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        input<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">KEY_UP</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventKeyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;键盘释放触发&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 销毁监听</span></span>
<span class="line">        input<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">KEY_UP</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-13-3-触摸事件" tabindex="-1"><a class="header-anchor" href="#_2-13-3-触摸事件"><span>2.13.3 触摸事件</span></a></h3><p>触摸主要是为了移动端交互，如果不关注鼠标左键右键滚轮，直接使用触摸代替键盘也可以</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> input<span class="token punctuation">,</span> EventTouch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 系统触发</span></span>
<span class="line">        input<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">TOUCH_START</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token operator">:</span> EventTouch<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">             <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;触摸点开始触发&quot;</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token comment">// 多点位触发:根据ID编号(从零自增) 判断是否多点位</span></span>
<span class="line">             <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> event<span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 节点触发</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">TOUCH_MOVE</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventTouch<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;触摸移动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">TOUCH_CANCEL</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventTouch<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当触摸被意外中断时触发（如来电、弹窗、手势冲突等导致触摸提前终止）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">TOUCH_END</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> EventTouch<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">             <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;当用户正常结束触摸时触发（例如手指从屏幕抬起）&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 关闭监听</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">TOUCH_CANCEL</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-13-4-自定义事件" tabindex="-1"><a class="header-anchor" href="#_2-13-4-自定义事件"><span>2.13.4 自定义事件</span></a></h3><ol><li>自身组件内触发</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> Input<span class="token punctuation">,</span> input<span class="token punctuation">,</span> EventTouch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;cc&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化调用</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">        input<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span><span class="token constant">TOUCH_START</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token operator">:</span> EventTouch<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 直接触发自定义事件</span></span>
<span class="line">           self<span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;myevent1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;myevent1&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;自定义事件&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 每帧调用</span></span>
<span class="line">    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>派发事件-逐层传递</p><ul><li>组件与脚本结构</li></ul><p><img src="`+z+`" alt=""></p><ul><li>公用脚本 MyEvent.ts</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Event 由 cc 模块导入</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Event <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 新建事件类型</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> bubbles<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> detail<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bubbles<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">public</span> detail<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 自定义的属性</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> MyEvent</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>触发脚本 c.ts</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span>input<span class="token punctuation">,</span>Input<span class="token punctuation">,</span>EventKeyboard <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> MyEvent <span class="token keyword">from</span> <span class="token string">&#39;./MyEvent&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;C组件加载&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 开始 使用 dispatchEvent 派发事件</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">MyEvent</span><span class="token punctuation">(</span><span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;detail info&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>阻止冒泡脚本 b.ts</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> MyEvent <span class="token keyword">from</span> <span class="token string">&#39;./MyEvent&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 监控事件</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> MyEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;b节点&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 阻止冒泡：事件不再传递</span></span>
<span class="line">            event<span class="token punctuation">.</span>propagationStopped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>验证是否阻止成功 a.ts</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> MyEvent <span class="token keyword">from</span> <span class="token string">&#39;./MyEvent&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 监控事件</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> MyEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;a节点&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2-14-音频系统" tabindex="-1"><a class="header-anchor" href="#_2-14-音频系统"><span>2.14 音频系统</span></a></h2><p>AudioSource 属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Clip</td><td>添加的用于播放的 音频资源，默认为空，点击后面的箭头按钮即可选择</td></tr><tr><td>Loop</td><td>是否循环播放</td></tr><tr><td>PlayOnAwake</td><td>是否在游戏运行（组件激活）时自动播放音频</td></tr><tr><td>Volume</td><td>音量大小，范围在 0~1 之间</td></tr></tbody></table><ol><li>界面操作</li></ol><p><img src="`+K+'" alt=""></p><ol start="2"><li><p>异步加载脚本</p><ul><li>界面修改</li></ul><p><img src="'+H+`" alt=""></p><ul><li>脚本</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component<span class="token punctuation">,</span>AudioClip<span class="token punctuation">,</span> error<span class="token punctuation">,</span> resources<span class="token punctuation">,</span>AudioSource <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass<span class="token punctuation">,</span>property <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onLoad</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">    <span class="token comment">// 异步加载音频</span></span>
<span class="line">        resources<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> AudioClip<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">,</span> clip<span class="token operator">:</span> AudioClip<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 创建音频源组件</span></span>
<span class="line">            <span class="token keyword">const</span> audioSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span><span class="token function">addComponent</span><span class="token punctuation">(</span>AudioSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 加载音频文件</span></span>
<span class="line">            audioSource<span class="token punctuation">.</span>clip <span class="token operator">=</span> clip<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 播放</span></span>
<span class="line">            audioSource<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 暂停</span></span>
<span class="line">            audioSource<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 停止</span></span>
<span class="line">            audioSource<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 循环播放</span></span>
<span class="line">            audioSource<span class="token punctuation">.</span>loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 设置音量 (0.0 - 1.0)</span></span>
<span class="line">            audioSource<span class="token punctuation">.</span>volume <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>一次性脚本(播放完就消失，如枪声)</p></li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AudioSource<span class="token punctuation">,</span> AudioClip <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 不保留AudioSource组件的方式</span></span>
<span class="line">AudioSource<span class="token punctuation">.</span><span class="token function">playOneShot</span><span class="token punctuation">(</span>clip<span class="token punctuation">,</span> volume <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-15-计时器" tabindex="-1"><a class="header-anchor" href="#_2-15-计时器"><span>2.15 计时器</span></a></h2><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> _decorator<span class="token punctuation">,</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> ccclass <span class="token punctuation">}</span> <span class="token operator">=</span> _decorator<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">ccclass</span></span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 四个参数 回调函数 间隔事件(秒) 重复次数 多长事件后开启(秒)</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;计时器回调函数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,93)]))}const G=s(V,[["render",Y]]),X=JSON.parse('{"path":"/application/cocos/base/02.html","title":"二、cocos creator 基础","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754285665000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"bf54d5db5209f06fb3d25687934eecf69571d546","time":1754285665000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年8月"}]},"filePathRelative":"application/cocos/base/02.md"}');export{G as comp,X as data};
