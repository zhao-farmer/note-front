import{aq as p,ar as t,as as e,at as l}from"./app-Cok9BT0p.js";const n="/note-front/animation/pixi/official/image/003.png",a="/note-front/animation/pixi/official/image/004.png",c="/note-front/animation/pixi/official/image/005.png",o={};function i(u,s){return l(),t("div",null,s[0]||(s[0]=[e(`<h1 id="二、核心概念" tabindex="-1"><a class="header-anchor" href="#二、核心概念"><span>二、核心概念</span></a></h1><h2 id="_2-1-体系结构" tabindex="-1"><a class="header-anchor" href="#_2-1-体系结构"><span>2.1 体系结构</span></a></h2><p>以下是构成PixiJS的主要组件列表。请注意，这个列表并不详尽。另外，不要过于担心每个组件是如何工作的。这里的目标是给你一个感觉是什么在引擎盖下，我们开始探索引擎。</p><h3 id="_2-1-1-主要组件" tabindex="-1"><a class="header-anchor" href="#_2-1-1-主要组件"><span>2.1.1 主要组件</span></a></h3><table><thead><tr><th>组件</th><th>描述</th></tr></thead><tbody><tr><td><strong>渲染器 (Renderer)</strong></td><td>PixiJS系统的核心是渲染器，渲染器显示场景图形并将其绘制到屏幕上。PixiJS会自动决定是为你提供WebGPU还是WebGL渲染器。</td></tr><tr><td><strong>容器 (Container)</strong></td><td>创建场景图形的主要场景对象：要显示的可渲染对象树，如精灵、图形和文本。参见场景图了解更多细节。</td></tr><tr><td><strong>资产 (Assets)</strong></td><td>Asset系统提供了用于异步加载资源（如图像和音频文件）的工具。</td></tr><tr><td><strong>断续器 (Ticker)</strong></td><td>断续器提供基于时钟的周期性回调。你的游戏更新逻辑通常会每帧运行一次。您可以同时使用多个自动报价机。</td></tr><tr><td><strong>应用程序 (Application)</strong></td><td>Application是一个简单的助手，它将Loader、Ticker和Renderer打包成一个方便易用的对象。非常适合快速开始，原型和构建简单的项目。</td></tr><tr><td><strong>事件 (Events)</strong></td><td>PixiJS支持基于指针的交互——使对象可点击，触发悬停事件等。</td></tr><tr><td><strong>可访问性 (Accessibility)</strong></td><td>通过我们的显示系统编织了一套丰富的工具，用于实现键盘和屏幕阅读器的可访问性。</td></tr><tr><td><strong>过滤器 (Filters)</strong></td><td>PixiJS支持各种过滤器，包括自定义着色器，以将效果应用于可渲染对象。</td></tr></tbody></table><h3 id="_2-1-2-扩展" tabindex="-1"><a class="header-anchor" href="#_2-1-2-扩展"><span>2.1.2 扩展</span></a></h3><p>PixiJS v8完全是围绕扩展的概念构建的。PixiJS中的每个系统都是作为模块化扩展实现的。这使得PixiJS保持轻量级、灵活性和易于扩展。</p><blockquote><p>在大多数情况下，您不需要直接与扩展系统交互，除非您正在开发第三方库或为PixiJS生态系统本身做出贡献。</p></blockquote><h3 id="_2-1-3-扩展类型" tabindex="-1"><a class="header-anchor" href="#_2-1-3-扩展类型"><span>2.1.3 扩展类型</span></a></h3><p>PixiJS支持多种扩展类型，每种类型在架构中都扮演着独特的角色：</p><ol><li><p>资产</p><ul><li><code>ExtensionType.Asset</code> ：将加载器、解析器、缓存和检测扩展组合到一个方便的对象中，而不必分别注册每个对象。</li><li><code>ExtensionType.LoadParser</code> ：加载图片、JSON、视频等资源。</li><li><code>ExtensionType.ResolveParser</code> ：将资源url转换为加载器可以使用的格式。</li><li><code>ExtensionType.CacheParser</code> ：决定特定资产的缓存行为。</li><li><code>ExtensionType.DetectionParser</code> ：标识当前平台支持的资产格式。</li></ul></li><li><p>渲染器（WebGL, WebGPU, Canvas）</p><ul><li><code>ExtensionType.WebGLSystem</code> ,  <code>ExtensionType.WebGPUSystem</code> ,  <code>ExtensionType.CanvasSystem</code> ：为各自的渲染器添加系统。这些系统在功能上可以有很大的不同，从纹理管理到辅助功能。</li><li><code>ExtensionType.WebGLPipes</code> 、 <code>ExtensionType.WebGPUPipes</code> ,  <code>ExtensionType.CanvasPipes</code> :添加一个新的渲染管道。renderpipe专门用于渲染可渲染对象，比如网格</li><li><code>ExtensionType.WebGLPipesAdaptor</code> ,  <code>ExtensionType.WebGPUPipesAdaptor</code> ,  <code>ExtensionType.CanvasPipesAdaptor</code> ：为各自的渲染器调整渲染管道。</li></ul></li><li><p>应用程序</p><p><code>ExtensionType.Application</code> ：用于扩展 <code>Application</code> 生命周期的插件。 例如 <code>TickerPlugin</code> 和 <code>ResizePlugin</code> 都是应用扩展。</p></li><li><p>环境</p><p><code>ExtensionType.Environment</code> ：用于检测和配置平台特定的行为。这对于配置PixiJS在Node.js、Web Workers或浏览器等环境中工作很有用。</p></li><li><p>其他（主要是内部使用）</p><p>这些扩展类型主要在内部使用，在大多数面向用户的应用程序中通常不需要：</p><ul><li><code>ExtensionType.MaskEffect</code> ：由MaskEffectManager用于自定义屏蔽行为。</li><li><code>ExtensionType.BlendMode</code> ：用于创建新的高级混合模式的扩展类型。</li><li><code>VideoSource\`\`ExtensionType.TextureSource</code> ：用于自动检测资源类型的扩展类型，例如 <code>VideoSource</code></li><li><code>ExtensionType.ShapeBuilder</code> ：一种扩展，用于在图形中构建和三角化自定义形状。</li><li><code>ExtensionType.Batcher</code> ：用于创建渲染中使用的自定义批处理程序的扩展类型。</li></ul></li></ol><h3 id="_2-1-4-创建扩展" tabindex="-1"><a class="header-anchor" href="#_2-1-4-创建扩展"><span>2.1.4 创建扩展</span></a></h3><p>PixiJS中的 <code>extensions</code> 对象是一个管理扩展的全局注册表。扩展必须用元数据声明一个 <code>extension</code> 字段，并且通过 <code>extensions.add(...)</code> 注册。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> extensions<span class="token punctuation">,</span> ExtensionType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myLoader <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    extension<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        type<span class="token operator">:</span> ExtensionType<span class="token punctuation">.</span>LoadParser<span class="token punctuation">,</span></span>
<span class="line">        name<span class="token operator">:</span> <span class="token string">&#39;my-loader&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* logic */</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* logic */</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">extensions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-场景图" tabindex="-1"><a class="header-anchor" href="#_2-2-场景图"><span>2.2 场景图</span></a></h2><p>每一帧，PixiJS都会更新并渲染场景图形。让我们谈谈场景图中的内容，以及它如何影响你开发项目的方式。如果你之前制作过游戏，这听起来应该很熟悉，但如果你是来自HTML和DOM，那么在我们进入你可以渲染的特定对象类型之前，有必要先了解一下。</p><h3 id="_2-2-1-场景图像一棵树" tabindex="-1"><a class="header-anchor" href="#_2-2-1-场景图像一棵树"><span>2.2.1 场景图像一棵树</span></a></h3><p>场景图的根节点是应用程序维护的容器，并以 <code>app.stage</code> 引用。当你将精灵或其他可渲染对象作为子对象添加到舞台时，它将被添加到场景图形中，并将被渲染和交互。PixiJS  <code>Containers</code> 也可以有孩子，所以当你构建更复杂的场景时，你最终会得到一个父子关系树，扎根于应用程序的阶段。</p><p>（探索你的项目的一个有用的工具是Chrome的Pixi.js devtools插件，它允许你在运行时实时查看和操纵场景图形！）</p><h3 id="_2-2-2-父子节点" tabindex="-1"><a class="header-anchor" href="#_2-2-2-父子节点"><span>2.2.2 父子节点</span></a></h3><p>当父节点移动时，它的子节点也会移动。当一个父节点被旋转时，它的子节点也被旋转。藏了父母，孩子也就藏了。如果你有一个由多个精灵组成的游戏对象，你可以将它们收集在一个容器下，将它们视为世界中的单个对象，作为一个整体移动和旋转。</p><p>每一帧，PixiJS从根节点到所有子节点再到叶子节点，遍历场景图，计算每个对象的最终位置、旋转、可见性、透明度等。如果父元素的alpha设置为0.5（使其透明度为50%），则其所有子元素也将以50%的透明度开始。如果一个子元素被设置为0.5 alpha，它将不会是50%透明，它将是0.5 x 0.5 = 0.25 alpha，或者75%透明。类似地，一个对象的位置是相对于它的父对象的，所以如果父对象被设置为50像素的x位置，而子对象被设置为100像素的x位置，那么它将在150像素的屏幕偏移处绘制，或者50 100。</p><p>这里有一个例子。我们将创建三个精灵，每个精灵都是最后一个精灵的子精灵，并动画它们的位置、旋转、比例和alpha。即使每个精灵的属性设置为相同的值，父子链也会放大每个变化：</p><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/pixi8.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">        <span class="token comment">//创建应用程序 帮助鱼添加到目标页面中</span></span>
<span class="line">        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 添加一个容器，使我们的精灵堆栈在页面上居中</span></span>
<span class="line">        <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">x</span><span class="token operator">:</span> app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">y</span><span class="token operator">:</span> app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 加载纹理</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/sample1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建3个精灵，每个精灵都是最后一个精灵的孩子</span></span>
<span class="line">        <span class="token keyword">const</span> sprites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> parent <span class="token operator">=</span> container<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">let</span> sprite <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/sample1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//锚点设置</span></span>
<span class="line">            sprite<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            wrapper<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            sprites<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            parent <span class="token operator">=</span> wrapper<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 设置所有精灵的属性为相同的值，动画随着时间的推移</span></span>
<span class="line">        <span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span></span>
<span class="line">        app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">delta</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">//delta 回调对象  delta.deltaTime一个会随着时间 变化的值 如从0 - 1 然后再 从1 - 0;</span></span>
<span class="line">            elapsed <span class="token operator">+=</span> delta<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 正弦是一个上下变化的值，根据delta.deltaTime的变化，</span></span>
<span class="line">            <span class="token comment">// elapsed一直变大 正弦会出现曲线变化，正1到负1之间不断循环</span></span>
<span class="line">            <span class="token keyword">const</span> amount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 缩放 大小</span></span>
<span class="line">            <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 透明度</span></span>
<span class="line">            <span class="token keyword">const</span> alpha <span class="token operator">=</span> <span class="token number">0.75</span> <span class="token operator">+</span> <span class="token number">0.25</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 角度</span></span>
<span class="line">            <span class="token keyword">const</span> angle <span class="token operator">=</span> <span class="token number">40</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// x 位置</span></span>
<span class="line">            <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">*</span> amount<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sprites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> sprite <span class="token operator">=</span> sprites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">                sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>scale<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                sprite<span class="token punctuation">.</span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">;</span></span>
<span class="line">                sprite<span class="token punctuation">.</span>angle <span class="token operator">=</span> angle<span class="token punctuation">;</span></span>
<span class="line">                sprite<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><iframe src="/note-front/animation/pixi/official/html/02.html" width="700" height="400"></iframe><p>场景图中任意给定节点的累计平移、旋转、缩放和倾斜都存储在对象的 <code>worldTransform</code> 属性中。类似地，累积alpha值存储在 <code>worldAlpha</code> 属性中。</p><h3 id="_2-2-3-呈现顺序" tabindex="-1"><a class="header-anchor" href="#_2-2-3-呈现顺序"><span>2.2.3 呈现顺序</span></a></h3><p>我们要画一个树状图。谁先被抽到？</p><p>PixiJS从根向下渲染树。在每个级别上，呈现当前对象，然后按插入顺序呈现每个子对象。因此，第二个子元素呈现在第一个子元素之上，第三个子元素呈现在第二个子元素之上。</p><p>看看这个例子，有两个父对象A和D， A下有两个子对象B和C：</p><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/pixi8.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">        <span class="token comment">//创建应用程序 帮助鱼添加到目标页面中</span></span>
<span class="line">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Label showing scene graph hierarchy</span></span>
<span class="line">      <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;Scene Graph:\\n\\napp.stage\\n  ┗ A\\n     ┗ B\\n     ┗ C\\n  ┗ D&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&quot;#ffffff&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Helper函数创建一个带有字母的色块</span></span>
<span class="line">      <span class="token keyword">const</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token parameter">letter<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> color<span class="token punctuation">,</span> pos</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Sprite</span><span class="token punctuation">(</span><span class="token constant">PIXI</span><span class="token punctuation">.</span>Texture<span class="token punctuation">.</span><span class="token constant">WHITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        bg<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        bg<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        bg<span class="token punctuation">.</span>tint <span class="token operator">=</span> color<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">text</span><span class="token operator">:</span> letter<span class="token punctuation">,</span></span>
<span class="line">          <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token string">&quot;#ffffff&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        text<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        text<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        container<span class="token punctuation">.</span>position <span class="token operator">=</span> pos<span class="token punctuation">;</span></span>
<span class="line">        container<span class="token punctuation">.</span>visible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        letters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> container<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 敌营四个字母</span></span>
<span class="line">      <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x00ff00</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token number">0x0000ff</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token function">addLetter</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>stage<span class="token punctuation">,</span> <span class="token number">0xff8800</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 按时间顺序显示它们</span></span>
<span class="line">      <span class="token keyword">let</span> elapsed <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span></span>
<span class="line">      app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        elapsed <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime <span class="token operator">/</span> <span class="token number">60.0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>elapsed <span class="token operator">&gt;=</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          elapsed <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> letters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>visible <span class="token operator">=</span> elapsed <span class="token operator">&gt;=</span> i<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><iframe src="/note-front/animation/pixi/official/html/03.html" width="700" height="400"></iframe><p>如果想重新排序子对象，可以使用 <code>setChildIndex()</code> 。要在父节点列表的指定位置添加子节点，使用 <code>addChildAt()</code> 。最后，您可以使用 <code>sortableChildren</code> 选项并在每个子节点上设置 <code>zIndex</code> 属性来启用对象子节点的自动排序。</p><h3 id="_2-2-4-渲染组" tabindex="-1"><a class="header-anchor" href="#_2-2-4-渲染组"><span>2.2.4 渲染组</span></a></h3><p>当你深入研究PixiJS时，你会遇到一个强大的功能，称为渲染组。将渲染组视为场景图形中的专用容器，它们本身就像迷你场景图形。下面是你需要知道的，以便在你的项目中有效地使用渲染组。</p><h3 id="_2-2-5-culling" tabindex="-1"><a class="header-anchor" href="#_2-2-5-culling"><span>2.2.5 Culling</span></a></h3><p>如果你正在创建一个项目，其中大部分场景对象都不在屏幕上（例如，一款横向卷轴游戏），你就会想要剔除这些对象。剔除是评估一个对象（或它的子对象！）是否在屏幕上的过程，如果不是，关闭渲染。如果你不剔除屏幕外的对象，渲染器仍然会绘制它们，即使它们的像素最终都没有出现在屏幕上。</p><p>PixiJS提供了对视口剔除的内置支持。要启用筛选，请在对象上设置 <code>cullable = true</code> 。也可以将 <code>cullableChildren</code> 设置为 <code>false</code> ，这样PixiJS可以绕过递归剔除功能，从而提高性能。此外，可以设置 <code>cullArea</code> ，通过定义要筛选的区域来进一步优化性能。</p><h3 id="_2-2-6-局部坐标与全局坐标" tabindex="-1"><a class="header-anchor" href="#_2-2-6-局部坐标与全局坐标"><span>2.2.6 局部坐标与全局坐标</span></a></h3><p>如果你将精灵添加到舞台上，默认情况下它将出现在屏幕的左上角。这就是PixiJS使用的全局坐标空间的起源。如果所有对象都是舞台的子对象，那么这就是您需要担心的唯一坐标。但是一旦你引入容器和孩子，事情就变得复杂了。<code>[50,100]</code>位置的子对象右距其父对象50像素，下距其父对象100像素。</p><p>我们称这两种坐标系统为“全局”和“局部”坐标。当您在对象上使用 <code>position.set(x, y)</code> 时，您总是在相对于对象的父对象的本地坐标中工作。</p><p>问题是，很多时候你想知道一个对象的全局位置。例如，如果你想剔除屏幕外的对象以节省渲染时间，你需要知道给定的子对象是否在视图矩形之外。</p><p>要从本地坐标转换为全局坐标，可以使用 <code>toGlobal()</code> 函数。下面是一个示例用法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">//获取对象相对于屏幕左上角的全局位置</span></span>
<span class="line"><span class="token keyword">let</span> globalPos <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">toGlobal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码将设置 <code>globalPos</code> 作为子对象的全局坐标，相对于全局坐标系统中的[0,0]。</p><h3 id="_2-2-7-全局坐标与屏幕坐标" tabindex="-1"><a class="header-anchor" href="#_2-2-7-全局坐标与屏幕坐标"><span>2.2.7 全局坐标与屏幕坐标</span></a></h3><p>当你的项目与主机操作系统或浏览器一起工作时，有第三种坐标系统开始发挥作用——“屏幕”坐标（又名“视口”坐标）。屏幕坐标表示相对于PixiJS渲染到的画布元素的左上角的位置。像DOM和本地鼠标点击事件这样的东西在屏幕空间中工作。</p><p>现在，在很多情况下，屏幕空间相当于世界空间。如果画布的大小与创建 <code>Application</code> 时指定的渲染视图的大小相同，则会出现这种情况。默认情况下，情况就是这样—例如，您将创建一个800x600的应用程序窗口，并将其添加到HTML页面中，它将保持该大小。世界坐标中的100个像素等于屏幕空间中的100个像素。但是!拉伸渲染视图以使其填充屏幕，或者以较低的分辨率和较高的比例渲染以提高速度是很常见的。在这种情况下，画布元素的屏幕大小将改变（例如通过CSS），但底层渲染视图不会改变，导致世界坐标和屏幕坐标不匹配。</p><h2 id="_2-3-渲染循环" tabindex="-1"><a class="header-anchor" href="#_2-3-渲染循环"><span>2.3 渲染循环</span></a></h2><p>PixiJS的核心在于它的渲染循环，一个重复的循环，每帧更新和重新绘制你的场景。不像传统的web开发，渲染是基于事件的（例如，根据用户输入），PixiJS使用一个连续的动画循环，提供对实时渲染的完全控制。</p><p>本指南深入介绍了PixiJS如何在内部构建这个循环，从帧开始到渲染到屏幕的那一刻。理解这一点将有助于您编写性能更好、结构更好的应用程序。</p><ol><li>概述</li></ol><p>每一帧，PixiJS执行以下顺序：</p><ul><li>执行断续器（用户逻辑）</li><li>场景图形更新（变换和剔除）</li><li>渲染发生（GPU绘制调用）</li></ul><p>只要您的应用程序正在运行并且它的计时器处于活动状态，这个循环就会重复。</p><ol start="2"><li>运行Ticker回调</li></ol><p>呈现循环由 Ticker 类驱动，该类使用 requestAnimationFrame 来调度工作。每一秒:</p><ul><li>度量自上一帧以来经过的时间</li><li>基于 minFPS 和 maxFPS对其进行大写</li><li>调用所有注册为 ticker.add() 或 app.ticker.add()的监听器</li></ul><p><strong>例子</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    bunny<span class="token punctuation">.</span>rotation <span class="token operator">+=</span> ticker<span class="token punctuation">.</span>deltaTime <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个回调接收当前 Ticker 实例。您可以访问 ticker.deltaTime （缩放帧增量）和 ticker.elapsedMS （未缩放的毫秒增量）来计时动画。</p><ol start="3"><li>更新场景图</li></ol><p>PixiJS使用分层场景图来表示所有可视对象。在渲染之前，图需要遍历到：</p><ul><li>重新计算变换（世界矩阵更新）</li><li>通过 onRender 处理程序应用自定义逻辑</li><li>如果启用，应用剔除</li></ul><ol start="4"><li>渲染场景</li></ol><p>一旦场景图形准备好了，渲染器从 app.stage 开始遍历显示列表：</p><ul><li>应用全局和局部转换</li><li>在可能的情况下分批抽取调用</li><li>上传几何，纹理和制服</li><li>发出GPU命令</li></ul><p>所有渲染都是保留模式：对象跨帧保留，除非显式删除。</p><p>渲染是通过WebGL或WebGPU完成的，这取决于你的环境。呈现器抽象出一个通用API背后的差异。</p><ol start="5"><li>帧生命周期图</li></ol><div class="language-markdown line-numbers-mode" data-highlighter="prismjs" data-ext="md"><pre><code><span class="line">requestAnimationFrame</span>
<span class="line">        │</span>
<span class="line">    [Ticker._tick()]</span>
<span class="line">        │</span>
<span class="line">    ├─ Compute elapsed time</span>
<span class="line">    ├─ Call user listeners</span>
<span class="line">    │   └─ sprite.onRender</span>
<span class="line">    ├─ Cull display objects (if enabled)</span>
<span class="line">    ├─ Update world transforms</span>
<span class="line">    └─ Render stage</span>
<span class="line">            ├─ Traverse display list</span>
<span class="line">            ├─ Upload data to GPU</span>
<span class="line">            └─ Draw</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-渲染组" tabindex="-1"><a class="header-anchor" href="#_2-4-渲染组"><span>2.4 渲染组</span></a></h2><ol><li>理解PixiJS中的RenderGroups</li></ol><p>当您深入研究PixiJS，特别是版本8时，您将遇到一个强大的功能，称为RenderGroups。将RenderGroups看作场景图形中的专用容器，它们本身就像迷你场景图形。下面是你需要知道的，以便在你的项目中有效地使用渲染组：</p><ol start="2"><li>什么是渲染组？​</li></ol><p>渲染组本质上是PixiJS视为自包含场景图形的容器。当你将场景的部分分配给渲染组时，你告诉PixiJS将这些对象作为一个单元管理在一起。这种管理包括监视更改和准备一组专门针对组的呈现指令。这是一个优化渲染过程的强大工具。</p><ol start="3"><li>为什么使用渲染组？​</li></ol><p>使用渲染组的主要优势在于它们的优化功能。它们允许某些计算，如转换（位置，比例，旋转），色调和alpha调整，卸载到GPU。这意味着像移动或调整渲染组这样的操作可以以最小的CPU影响完成，使您的应用程序更具性能效率。</p><p>在实践中，你使用渲染组甚至没有明确的意识。在PixiJS中，你传递给渲染函数的根元素会自动转换为RenderGroup，因为它的渲染指令将存储在这里。虽然你也可以根据需要显式地创建额外的RenderGroups来进一步优化你的项目。</p><p>此功能特别适用于：</p><p>静态内容：对于不经常更改的内容，渲染组可以显著减少CPU的计算负载。在这种情况下，静态指的是场景图形结构，而不是其中的PixiJS元素的实际值（例如位置，事物的比例）。</p><p>不同的场景部分：你可以把场景分成逻辑部分，比如游戏世界和HUD（平视显示器）。每个部分都可以单独优化，从而获得更好的整体性能。</p><ol start="4"><li>例子</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> myGameWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">isRenderGroup</span><span class="token operator">:</span><span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myHud <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">isRenderGroup</span><span class="token operator">:</span><span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">scene<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>myGameWorld<span class="token punctuation">,</span> myHud<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">)</span> <span class="token comment">// this action will actually convert the scene to a render group under the hood</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>最佳实践</li></ol><p>不要过度使用：虽然渲染组很强大，但使用太多实际上会降低性能。我们的目标是找到一种平衡，既能优化渲染，又不会因为太多的独立组而使系统不堪重负。确保在使用它们时进行配置。大多数时候你根本不需要使用它们！</p><p>策略分组：考虑场景的哪些部分一起变化，哪些部分保持不变。将动态元素与静态元素分开分组可以提高性能。 通过理解和利用渲染组，您可以充分利用PixiJS的渲染功能，使您的应用程序更流畅，更高效。这个功能代表了PixiJS提供的优化工具包中的一个强大工具，使开发人员能够创建在不同设备上流畅运行的丰富交互式场景。</p><h2 id="_2-5-呈现层" tabindex="-1"><a class="header-anchor" href="#_2-5-呈现层"><span>2.5 呈现层</span></a></h2><p>PixiJS Layer API提供了一种强大的方式来控制对象的渲染顺序，而不依赖于它们在场景图中的逻辑父子关系。使用RenderLayers，你可以将对象的转换方式（通过它们的逻辑父类）与它们在屏幕上的视觉绘制方式解耦。</p><p>使用RenderLayers确保这些元素在视觉上被优先化，同时保持逻辑上的父子关系。例子包括:</p><ul><li><p>带有生命条的角色：确保生命条总是出现在世界的顶部，即使角色在物体后面移动。</p></li><li><p>像分数计数器或通知等UI元素：无论游戏世界的复杂性如何，都要让它们可见。</p></li><li><p>突出教程中的元素：想象一下，在一个教程中，你需要在突出一个特定对象的同时退回大多数游戏元素。RenderLayers可以直观地拆分这些。高亮显示的对象可以放置在前景层中，并在后推层之上呈现。</p></li></ul><p>本指南解释了关键概念，提供了实际示例，并强调了常见的陷阱，以帮助您有效地使用层API。</p><hr><h3 id="_2-5-1-关键概念" tabindex="-1"><a class="header-anchor" href="#_2-5-1-关键概念"><span>2.5.1 关键概念</span></a></h3><ol><li><p>独立渲染顺序：</p><ul><li>RenderLayers允许控制绘制顺序独立于逻辑层次结构，确保对象以所需的顺序呈现。</li></ul></li><li><p>合乎逻辑的养育方式保持不变：</p><ul><li>对象保持来自逻辑父对象的转换（例如，位置，比例，旋转），即使附加到RenderLayers。</li></ul></li><li><p>显式对象管理：</p><ul><li>物体从场景图形或图层中移除后，必须手动重新分配到一个图层，以确保对渲染的有意识控制。</li></ul></li><li><p>动态排序:</p><ul><li>在层内，可以使用 <code>zIndex</code> 和 <code>sortChildren</code> 对对象进行动态重新排序，以便对呈现顺序进行细粒度控制。</li></ul></li></ol><hr><h3 id="_2-5-2-基本api用法" tabindex="-1"><a class="header-anchor" href="#_2-5-2-基本api用法"><span>2.5.2 基本API用法</span></a></h3><ol><li>首先让我们创建两个我们想要渲染的项目，红色的家伙和蓝色的家伙。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> redGuy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">PIXI</span></span><span class="token punctuation">.</span><span class="token function">Sprite</span><span class="token punctuation">(</span><span class="token string">&#39;red guy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">redGuy<span class="token punctuation">.</span>tint <span class="token operator">=</span> <span class="token number">0xff0000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> blueGuy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">PIXI</span></span><span class="token punctuation">.</span><span class="token function">Sprite</span><span class="token punctuation">(</span><span class="token string">&#39;blue guy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">blueGuy<span class="token punctuation">.</span>tint <span class="token operator">=</span> <span class="token number">0x0000ff</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>redGuy<span class="token punctuation">,</span> blueGuy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+n+`" alt=""></p><p>现在我们知道红色的会先被渲染，然后是蓝色的。在这个简单的例子中你可以只对红色和蓝色的 <code>zIndex</code> 排序来帮助重新排序。</p><p>但这是一个关于渲染层的指南，所以让我们创建一个。</p><ol start="2"><li>使用 <code>renderLayer.attach</code> 将对象分配给图层。这将覆盖由其逻辑父对象定义的对象的默认呈现顺序。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 层次</span></span>
<span class="line"><span class="token keyword">const</span> layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RenderLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>layer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">layer<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>redGuy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+a+`" alt=""></p><p>那么现在我们的场景图顺序是：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">|- stage</span>
<span class="line">    |-- redGuy</span>
<span class="line">    |-- blueGuy</span>
<span class="line">    |-- layer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的渲染顺序是：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">|- stage</span>
<span class="line">    |-- blueGuy</span>
<span class="line">    |-- layer</span>
<span class="line">        |-- redGuy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为该层现在是阶段中的最后一个子层。因为红色的家伙被附加到图层上，它将在场景图中图层的位置渲染。然而，它仍然在逻辑上保持在场景层次结构中的相同位置。</p><ol start="3"><li>从图层中移除对象</li></ol><p>现在我们把红色的部分从图层中移除。要阻止对象在图层中渲染，使用 <code>removeFromLayer</code> 。一旦从层中移除，它仍然会在场景图中，并将按照场景图的顺序渲染。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"></span>
<span class="line">layer<span class="token punctuation">.</span><span class="token function">detach</span><span class="token punctuation">(</span>redGuy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  停止通过层渲染矩形</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+n+`" alt=""></p><p>从逻辑父对象（ <code>removeChild</code> ）中删除对象会自动将其从层中删除。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>redGuy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果红色的家伙从舞台上被移除，它也将从层中被移除</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt=""></p><ol start="4"><li>如果你从舞台上移除红色的家伙，然后将其添加回舞台，它将不会再次添加到图层中。</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 把 red guy 加到原来的位置</span></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChildAt</span><span class="token punctuation">(</span>redGuy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+n+`" alt=""></p><p>你需要自己把它重新连接到图层上。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"></span>
<span class="line">layer<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>redGuy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新将其附着到图层上！</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+a+`" alt=""></p><p>这看起来很痛苦，但实际上是件好事。这意味着您可以完全控制对象的呈现顺序，并且可以随时更改它。这也意味着你不能意外地将一个对象添加到容器中，并让它自动地重新附加到一个可能存在也可能不存在的层上——这将非常令人困惑，并导致一些非常难以调试的错误！</p><ol start="5"><li>场景图中的图层位置</li></ol><p>图层在场景图中的位置决定了它相对于其他图层和对象的渲染优先级。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// 在阶段中首先修复要渲染的层</span></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChildAt</span><span class="token punctuation">(</span>layer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+n+`" alt=""></p><h3 id="_2-5-3-完整的示例" tabindex="-1"><a class="header-anchor" href="#_2-5-3-完整的示例"><span>2.5.3 完整的示例</span></a></h3><p>下面是一个真实世界的例子，展示了如何使用RenderLayers来设置一个播放器ui在世界的顶部。</p><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/pixi8.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">        <span class="token keyword">class</span> <span class="token class-name">CharacterUI</span> <span class="token keyword">extends</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Container</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">text</span><span class="token operator">:</span> name<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">resolution</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token literal-property property">fill</span><span class="token operator">:</span> <span class="token number">0x000000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">anchor</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">const</span> padding <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roundRect</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token operator">-</span>label<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> padding<span class="token punctuation">,</span> </span>
<span class="line">                    <span class="token operator">-</span>label<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> padding<span class="token punctuation">,</span> </span>
<span class="line">                    label<span class="token punctuation">.</span>width <span class="token operator">+</span> padding <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> </span>
<span class="line">                    label<span class="token punctuation">.</span>height <span class="token operator">+</span> padding <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span></span>
<span class="line">                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token number">0xffff00</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token literal-property property">alpha</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 鱼类</span></span>
<span class="line">        <span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">extends</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Container</span> <span class="token punctuation">{</span></span>
<span class="line">            ui<span class="token punctuation">;</span></span>
<span class="line">            _speed <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            _direction <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">            fishView<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> texture</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>fishView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>fishView<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fishView<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>ui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterUI</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>ui<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>_direction <span class="token operator">+=</span> <span class="token number">0.001</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>fishView<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_direction<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_speed <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>_direction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_speed <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>_direction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment">// 环绕屏幕</span></span>
<span class="line">                <span class="token keyword">const</span> padding <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token number">630</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token number">410</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&gt;</span> width <span class="token operator">+</span> padding<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">-=</span> width <span class="token operator">+</span> padding <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token operator">-</span>padding<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> width <span class="token operator">+</span> padding <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&gt;</span> height <span class="token operator">+</span> padding<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">-=</span> height <span class="token operator">+</span> padding <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token operator">-</span>padding<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> height <span class="token operator">+</span> padding <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 创建新应用程序</span></span>
<span class="line">            <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 初始化应用程序</span></span>
<span class="line">            <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">630</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">410</span><span class="token punctuation">,</span> <span class="token literal-property property">antialias</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 将应用程序画布附加到文档正文</span></span>
<span class="line">            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 将画布移动到屏幕中心</span></span>
<span class="line">            <span class="token comment">// app.canvas.style.position = &quot;absolute&quot;;</span></span>
<span class="line">            <span class="token comment">// app.canvas.style.top = \`\${window.innerHeight / 2 - app.canvas.height / 2}px\`;</span></span>
<span class="line">            <span class="token comment">// app.canvas.style.left = \`\${window.innerWidth / 2 - app.canvas.width / 2}px\`;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// Load textures</span></span>
<span class="line">            <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../assest/displacement_BG.jpg</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../assest/overlay.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../assest/displacement_map.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../assest/displacement_fish1.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../assest/displacement_fish2.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> background <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/displacement_BG.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> pondContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            pondContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>pondContainer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> displacementMap <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/displacement_map.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            displacementMap<span class="token punctuation">.</span>source<span class="token punctuation">.</span>wrapMode <span class="token operator">=</span> <span class="token string">&quot;repeat&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> displacementSprite <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>displacementMap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">const</span> displacementFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>DisplacementFilter</span><span class="token punctuation">(</span>displacementSprite<span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            pondContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>displacementSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            pondContainer<span class="token punctuation">.</span>filters <span class="token operator">=</span> <span class="token punctuation">[</span>displacementFilter<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> uiLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>RenderLayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> fishes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;6号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;7号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;8号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9号&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10号&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">const</span> textures <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/displacement_fish1.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/displacement_fish2.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> fish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i <span class="token operator">%</span> names<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> textures<span class="token punctuation">[</span>i <span class="token operator">%</span> textures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                fishes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                pondContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>fish<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                fish<span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">630</span><span class="token punctuation">;</span></span>
<span class="line">                fish<span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">410</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                uiLayer<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>fish<span class="token punctuation">.</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">const</span> waterOverlay <span class="token operator">=</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>TilingSprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/overlay.png&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            waterOverlay<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">630</span><span class="token punctuation">;</span></span>
<span class="line">            waterOverlay<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">410</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            pondContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>waterOverlay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>uiLayer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 为遮罩制作动画</span></span>
<span class="line">            app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                waterOverlay<span class="token punctuation">.</span>tilePosition<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">                waterOverlay<span class="token punctuation">.</span>tilePosition<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                displacementSprite<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">                displacementSprite<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                fishes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">fish</span> <span class="token operator">=&gt;</span> fish<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><iframe src="/note-front/animation/pixi/official/html/04.html" width="700" height="450"></iframe><hr><ul><li><p>陷阱和需要注意的事情</p><ol><li><p>手工重新分配:</p><ul><li>当一个对象被重新添加到逻辑父层时，它不会自动与它的前一层重新关联。总是将对象明确地重新分配给图层。</li></ul></li><li><p>嵌套的孩子们:</p><ul><li>如果删除父容器，则其所有子容器将自动从层中删除。要小心复杂的层次结构。</li></ul></li><li><p>层内排序：</p><ul><li>层中的对象可以使用 <code>zIndex</code> 属性进行动态排序。这对于细粒度的渲染顺序控制很有用。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">rect<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// Higher values render later</span></span>
<span class="line">layer<span class="token punctuation">.</span>sortableChildren <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// Enable sorting</span></span>
<span class="line">layer<span class="token punctuation">.</span><span class="token function">sortRenderLayerChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Apply the sorting</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>层重叠:</p><ul><li>如果多个图层重叠，它们在场景图中的顺序决定了渲染优先级。确保分层逻辑与你想要的视觉输出一致。</li></ul></li></ol></li></ul><hr><ul><li><p>最佳实践</p><ol><li>策略性分组：最小化层数以优化性能。</li><li>用于视觉清晰度：为需要明确控制渲染顺序的对象保留图层。</li><li>测试动态变化：验证添加、删除或重新分配对象到层的行为是否符合您特定场景设置的预期。</li></ol><p>通过有效地理解和利用RenderLayers，你可以在保持干净和逻辑层次的同时实现对场景视觉表现的精确控制。</p></li></ul><h2 id="_2-6-在不同的环境中使用pixijs" tabindex="-1"><a class="header-anchor" href="#_2-6-在不同的环境中使用pixijs"><span>2.6 在不同的环境中使用PixiJS</span></a></h2><p>PixiJS是一个高度适应性的库，可以在各种环境中运行，包括浏览器、Web worker和自定义执行上下文（如Node.js）。本指南解释PixiJS如何处理不同的环境，以及如何配置它以满足应用程序的需求。</p><h3 id="_2-6-1-在浏览器中运行pixijs" tabindex="-1"><a class="header-anchor" href="#_2-6-1-在浏览器中运行pixijs"><span>2.6.1 在浏览器中运行PixiJS</span></a></h3><p>对于浏览器环境，PixiJS默认使用 <code>BrowserAdapter</code> ，您不需要配置任何内容</p><ul><li>例子:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Application <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span></span>
<span class="line">    height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-2-在web-workers中运行pixijs" tabindex="-1"><a class="header-anchor" href="#_2-6-2-在web-workers中运行pixijs"><span>2.6.2 在Web Workers中运行PixiJS</span></a></h3><p>Web Workers提供了一个并行执行环境，非常适合卸载呈现任务。PixiJS支持使用 <code>WebWorkerAdapter</code> 的Web worker：</p><ul><li>例子:</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> DOMAdapter<span class="token punctuation">,</span> WebWorkerAdapter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Must be set before creating anything in PixiJS</span></span>
<span class="line">DOMAdapter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>WebWorkerAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    width<span class="token operator">:</span> <span class="token number">800</span><span class="token punctuation">,</span></span>
<span class="line">    height<span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>canvas <span class="token comment">// OffscreenCanvas</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-3-自定义环境" tabindex="-1"><a class="header-anchor" href="#_2-6-3-自定义环境"><span>2.6.3 自定义环境</span></a></h3><p>对于非标准环境，您可以通过实现 <code>Adapter</code> 接口来创建自定义适配器。这使得PixiJS可以在Node.js或无头测试设置等环境中运行。</p><ul><li>自定义适配器示例：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> DOMAdapter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> CustomAdapter <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">createCanvas</span><span class="token operator">:</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* custom implementation */</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getCanvasRenderingContext2D</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* custom implementation */</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getWebGLRenderingContext</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* custom implementation */</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getNavigator</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> userAgent<span class="token operator">:</span> <span class="token string">&#39;Custom&#39;</span><span class="token punctuation">,</span> gpu<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">getBaseUrl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;custom://&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">fetch</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* custom fetch */</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">parseXML</span><span class="token operator">:</span> <span class="token punctuation">(</span>xml<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">/* custom XML parser */</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">DOMAdapter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CustomAdapter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-7-在pixijs中管理垃圾收集" tabindex="-1"><a class="header-anchor" href="#_2-7-在pixijs中管理垃圾收集"><span>2.7 在PixiJS中管理垃圾收集</span></a></h2><p>在任何PixiJS应用程序中，有效的资源管理对于保持最佳性能至关重要。本指南探讨了PixiJS如何处理垃圾收集，它提供的工具，以及有效管理GPU资源的最佳实践。</p><h3 id="_2-7-1-destroy-的显式资源管理" tabindex="-1"><a class="header-anchor" href="#_2-7-1-destroy-的显式资源管理"><span>2.7.1 <code>destroy</code> 的显式资源管理</span></a></h3><p>PixiJS对象，如纹理、网格和其他gpu支持的数据，保存着消耗内存的引用。要显式释放这些资源，可以在不再需要的对象上调用 <code>destroy</code> 方法。例如:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sprite <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Use the sprite in your application</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When no longer needed</span></span>
<span class="line">sprite<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>destroy</code> 可确保立即释放对象的GPU资源，从而减少内存泄漏的可能性并提高性能。</p><h3 id="_2-7-2-管理纹理-texture-unload" tabindex="-1"><a class="header-anchor" href="#_2-7-2-管理纹理-texture-unload"><span>2.7.2 管理纹理 <code>texture.unload</code></span></a></h3><p>在PixiJS的自动纹理垃圾收集不足的情况下，你可以使用 <code>texture.unload()</code> 从GPU手动卸载纹理：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> texture <span class="token operator">=</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Use the texture</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// When no longer needed</span></span>
<span class="line">texture<span class="token punctuation">.</span><span class="token function">unload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这对于动态加载大量纹理和需要精确内存控制的应用程序特别有用。</p><h3 id="_2-7-3-自动纹理垃圾收集-texturegcsystem" tabindex="-1"><a class="header-anchor" href="#_2-7-3-自动纹理垃圾收集-texturegcsystem"><span>2.7.3 自动纹理垃圾收集 <code>TextureGCSystem</code></span></a></h3><p>PixiJS还包括 <code>TextureGCSystem</code> ，一个管理GPU纹理内存的系统。默认情况下:</p><ul><li>移除3600帧未使用的纹理（大约1小时60帧/秒）。</li><li>每600帧检查未使用的纹理。</li></ul><h4 id="定制-texturegcsystem" tabindex="-1"><a class="header-anchor" href="#定制-texturegcsystem"><span>定制 <code>TextureGCSystem</code></span></a></h4><p>你可以调整 <code>TextureGCSystem</code> 的行为来适应你的应用：</p><ul><li><code>textureGCActive</code> ：开启或关闭垃圾回收。默认值: <code>true</code> 。</li><li><code>textureGCMaxIdle</code> ：纹理清理前的最大空闲帧数。默认值： <code>3600</code> 帧。</li><li><code>textureGCCheckCountMax</code> ：垃圾回收检查频率（以帧为单位）。默认值： <code>600</code> 帧。</li></ul><p>示例配置:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Application <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">textureGCActive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment">// 启用纹理垃圾回收</span></span>
<span class="line">    <span class="token literal-property property">textureGCMaxIdle</span><span class="token operator">:</span> <span class="token number">7200</span><span class="token punctuation">,</span>       <span class="token comment">// 2小时空闲时间</span></span>
<span class="line">    <span class="token literal-property property">textureGCCheckCountMax</span><span class="token operator">:</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token comment">// 以60 FPS的速度每20秒检查一次</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-4-pixijs中垃圾收集的最佳实践" tabindex="-1"><a class="header-anchor" href="#_2-7-4-pixijs中垃圾收集的最佳实践"><span>2.7.4 PixiJS中垃圾收集的最佳实践</span></a></h3><ol><li>显式销毁对象：在不再需要的对象上始终调用 <code>destroy</code> ，以确保GPU资源及时释放。</li><li>使用池：使用池系统重用对象，以减少分配和释放开销。</li><li>主动管理纹理：必要时使用 <code>texture.unload()</code> 进行手动内存管理。</li></ol><p>通过遵循这些实践并理解PixiJS的垃圾收集机制，您可以创建高效利用系统资源的高性能应用程序。</p><h2 id="_2-8-性能技巧" tabindex="-1"><a class="header-anchor" href="#_2-8-性能技巧"><span>2.8 性能技巧</span></a></h2><h3 id="_2-8-1-一般" tabindex="-1"><a class="header-anchor" href="#_2-8-1-一般"><span>2.8.1 一般</span></a></h3><ul><li>只在需要的时候优化！PixiJS可以立即处理相当数量的内容</li><li>注意场景的复杂性。你添加的对象越多，速度就越慢</li><li>顺序会有所帮助，例如精灵/图像/精灵/图像比精灵/精灵/图像/图像慢</li><li>一些较旧的移动设备运行速度稍慢。将选项 <code>useContextAlpha: false</code> 和 <code>antialias: false</code> 传递给渲染器或应用程序可以帮助提高性能</li><li>默认情况下禁用筛选，因为在应用程序级别执行此操作通常更好，或者将对象设置为 <code>cullable = true</code> 。如果你是gpu绑定，它将提高性能；如果是cpu限制，则会降低性能</li></ul><h3 id="_2-8-2-精灵" tabindex="-1"><a class="header-anchor" href="#_2-8-2-精灵"><span>2.8.2 精灵</span></a></h3><ul><li>尽可能使用精灵表来减少总纹理</li><li>精灵可以批处理多达16种不同的纹理（取决于硬件）</li><li>这是渲染内容的最快方式</li><li>在旧设备上使用较小的低分辨率纹理</li><li>将扩展名 <code>@0.5x.png</code> 添加到50%缩放的精灵表中，这样PixiJS会自动将它们视觉上加倍</li><li>绘制顺序很重要</li></ul><h3 id="_2-8-3-图形" tabindex="-1"><a class="header-anchor" href="#_2-8-3-图形"><span>2.8.3 图形</span></a></h3><ul><li>图形对象在不经常修改时是最快的（不包括变换、alpha或着色！）</li><li>图形对象在一定大小（100点或更小）下进行批处理</li><li>小的图形对象和精灵一样快（矩形，三角形）</li><li>使用100个复杂的图形对象可能会很慢，在这种情况下使用精灵（你可以创建纹理）</li></ul><h3 id="_2-8-4-纹理" tabindex="-1"><a class="header-anchor" href="#_2-8-4-纹理"><span>2.8.4 纹理</span></a></h3><ul><li>纹理由纹理垃圾收集器自动管理</li><li>您也可以使用 <code>texture.destroy()</code>来管理它们</li><li>如果你打算一次摧毁一个以上的敌人，增加一个随机的延迟来消除冰冻</li><li>如果你打算自己删除很多纹理，延迟纹理破坏</li></ul><h3 id="_2-8-5-文本" tabindex="-1"><a class="header-anchor" href="#_2-8-5-文本"><span>2.8.5 文本</span></a></h3><ul><li>避免在每一帧上更改它，因为这可能是昂贵的（每次它绘制到画布，然后上传到GPU）。</li><li>位图文本为动态更改文本提供了更好的性能</li><li>文本分辨率匹配渲染器分辨率，通过设置 <code>resolution</code> 属性来降低分辨率，这可以消耗更少的内存</li></ul><h3 id="_2-8-6-遮罩" tabindex="-1"><a class="header-anchor" href="#_2-8-6-遮罩"><span>2.8.6 遮罩</span></a></h3><ul><li>如果使用太多的口罩会很昂贵：例如，100个口罩会减慢速度</li><li>轴对齐的矩形蒙版是最快的（因为他们使用剪刀矩形）</li><li>图形蒙版是第二快的（因为它们使用模板缓冲）</li><li>雪碧遮罩是第三快的（他们使用过滤器）。它们真的很贵。不要在你的场景中使用太多！</li></ul><h3 id="_2-8-7-过滤器" tabindex="-1"><a class="header-anchor" href="#_2-8-7-过滤器"><span>2.8.7 过滤器</span></a></h3><ul><li>释放内存： <code>container.filters = null</code></li><li>如果您知道它们的大小： <code>container.filterArea = new Rectangle(x,y,w,h)</code> 。这可以加快速度，因为这意味着物体不需要被测量</li><li>过滤器是昂贵的，使用太多会开始减慢速度！</li></ul><h3 id="_2-8-8-blendmodes" tabindex="-1"><a class="header-anchor" href="#_2-8-8-blendmodes"><span>2.8.8 BlendModes</span></a></h3><ul><li>不同的混合模式会导致批次破碎（反优化）</li><li>ScreenSprite / NormalSprite / ScreenSprite / NormalSprite将是4个绘制调用</li><li>ScreenSprite / ScreenSprite / NormalSprite / NormalSprite将是2个绘制调用</li></ul><h3 id="_2-8-9-事件" tabindex="-1"><a class="header-anchor" href="#_2-8-9-事件"><span>2.8.9 事件</span></a></h3><ul><li>如果对象没有交互式子对象，则使用 <code>interactiveChildren = false</code> 。事件系统将能够避免在对象中爬行</li><li>如上所述，将 <code>hitArea = new Rectangle(x,y,w,h)</code> 设置为可以阻止事件系统在对象中爬行</li></ul>`,196)]))}const k=p(o,[["render",i]]),d=JSON.parse('{"path":"/animation/pixi/official/02.html","title":"二、核心概念","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752490925000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"08d014805d6447d2221b34fe03fdc2ca18411d66","time":1752490925000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年7月更新"}]},"filePathRelative":"animation/pixi/official/02.md"}');export{k as comp,d as data};
