import{aq as n,ar as s,as as e,at as t}from"./app-Cok9BT0p.js";const p={};function l(o,a){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="二、基础语法" tabindex="-1"><a class="header-anchor" href="#二、基础语法"><span>二、基础语法</span></a></h1><h2 id="_2-1-原子类的概念" tabindex="-1"><a class="header-anchor" href="#_2-1-原子类的概念"><span>2.1 原子类的概念</span></a></h2><p>原子类是Tailwind CSS的核心概念，它提供了一系列的预定义类，可以快速地应用到HTML元素上以实现样式。这些类是“原子”的，因为它们代表单个属性和值，如<code>text-blue-500</code>或<code>bg-gray-100</code>。使用原子类可以避免编写大量的CSS代码，并且可以快速地构建和迭代设计。<a href="https://link.juejin.cn/?target=https%3A%2F%2Fcmdragon.cn" title="https://cmdragon.cn" target="_blank" rel="noopener noreferrer">cmdragon&#39;s Blog</a></p><h2 id="_2-2-常用原子类的使用" tabindex="-1"><a class="header-anchor" href="#_2-2-常用原子类的使用"><span>2.2 常用原子类的使用</span></a></h2><p>Tailwind CSS提供了大量的原子类，涵盖了布局、颜色、字体、边距、填充、边框、阴影、动画等各个方面。以下是一些常用的原子类示例：</p><ul><li>文本颜色：<code>text-red-500</code>、<code>text-green-300</code></li><li>背景颜色：<code>bg-blue-400</code>、<code>bg-yellow-200</code></li><li>字体大小：<code>text-sm</code>、<code>text-lg</code></li><li>边距：<code>m-2</code>、<code>mt-4</code>（m是margin的缩写，mt是margin-top的缩写）</li><li>填充：<code>p-3</code>、<code>pt-5</code>（p是padding的缩写，pt是padding-top的缩写）</li><li>边框：<code>border</code>、<code>border-2</code>（边框宽度）</li><li>阴影：<code>shadow</code>、<code>shadow-lg</code></li><li>布局：<code>flex</code>、<code>flex-wrap</code>、<code>justify-center</code></li><li>动画：<code>animate-bounce</code>、<code>animate-pulse</code></li></ul><h2 id="_2-3-定制化原子类" tabindex="-1"><a class="header-anchor" href="#_2-3-定制化原子类"><span>2.3 定制化原子类</span></a></h2><p>Tailwind CSS允许你通过配置文件<code>tailwind.config.js</code>来自定义原子类。例如，你可以添加自定义的颜色、字体、边距等。以下是一个简单的自定义示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;brand&#39;</span><span class="token operator">:</span> <span class="token string">&#39;#ff69b4&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 自定义颜色</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">spacing</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;9&#39;</span><span class="token operator">:</span> <span class="token string">&#39;2.25rem&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 自定义边距</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-响应式设计" tabindex="-1"><a class="header-anchor" href="#_2-4-响应式设计"><span>2.4 响应式设计</span></a></h2><p>Tailwind CSS内置了响应式设计的支持，允许你根据不同的屏幕尺寸应用不同的样式。响应式设计是通过在原子类前添加断点前缀来实现的。Tailwind CSS预定义了以下几个断点：</p><ul><li><code>sm</code>：小于640px</li><li><code>md</code>：大于等于640px</li><li><code>lg</code>：大于等于1024px</li><li><code>xl</code>：大于等于1280px</li><li><code>2xl</code>：大于等于1536px</li></ul><p>使用响应式设计的原子类示例如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-sm sm:text-base lg:text-lg xl:text-xl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>响应式文本大小<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p-4 sm:p-6 lg:p-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>响应式边距<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，文本在手机屏幕上显示为小号，在平板上显示为基础大小，在桌面显示器上显示为大号，而在大屏幕显示器上显示为超大号。边距也有类似的响应式变化。</p>`,15)]))}const i=n(p,[["render",l]]),r=JSON.parse('{"path":"/style/pre_defined_css/Tailwind/02.html","title":"二、基础语法","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1744806830000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"c70b07d347b059fbe78c7770e7fa611a62f92633","time":1744806830000,"email":"857899180@qq.com","author":"zhao-farmer","message":"前端笔记提交"}]},"filePathRelative":"style/pre_defined_css/Tailwind/02.md"}');export{i as comp,r as data};
