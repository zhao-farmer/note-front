import{aq as s,ar as a,as as p,at as t}from"./app-Cok9BT0p.js";const e="/note-front/framework/react/expand/028.png",o="/note-front/framework/react/expand/029.png",c="/note-front/framework/react/expand/030.png",l="/note-front/framework/react/expand/031.png",i="/note-front/framework/react/expand/032.png",u="/note-front/framework/react/expand/033.gif",r="/note-front/framework/react/expand/034.png",d="/note-front/framework/react/expand/035.png",k="/note-front/framework/react/expand/036.png",v="/note-front/framework/react/expand/037.gif",m="/note-front/framework/react/expand/038.png",b="/note-front/framework/react/expand/039.png",g={};function h(y,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="三、next-js-使用" tabindex="-1"><a class="header-anchor" href="#三、next-js-使用"><span>三、next.js 使用</span></a></h1><h2 id="_3-1-初始化项目" tabindex="-1"><a class="header-anchor" href="#_3-1-初始化项目"><span>3.1 初始化项目</span></a></h2><ol><li><p>命令行创建</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">pnpm</span> create next-app 1_base</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>配置选择</p><p><img src="`+e+`" alt=""></p><ul><li>ESLint 是一个用于识别和报告JavaScript代码中问题的工具。它帮助保持代码风格一致并避免错误。</li><li>Tailwind CSS 是一个实用优先的CSS框架，通过在HTML中直接使用类名来快速构建自定义设计。</li><li>App Router 是Next.js的一个新功能，它提供了更灵活的路由管理方式，支持布局、嵌套路由等高级特性。</li><li>Import Alias 允许你为模块路径设置别名，比如用@/*代替相对或绝对路径，简化了模块导入语句，使项目结构更清晰。</li></ul></li><li><p>运行命令</p><ul><li><p>控制台输入</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> run dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>运行结果</p><p><img src="`+o+`" alt=""></p></li></ul></li></ol><h2 id="_3-2-路由" tabindex="-1"><a class="header-anchor" href="#_3-2-路由"><span>3.2 路由</span></a></h2><p>Next.js 使用 <strong>基于文件系统</strong> 的路由器，即 <strong>每个文件夹都表示一个路由</strong>，因此无需安装类似 <code>react-router</code> 的工具。</p><p>在上一步创建项目时我们选择的是 <code>App Router</code> 路由模式，接下来 <code>app</code> 目录将作为所有路由的存储根目录。</p><h3 id="_3-2-1-创建一个路由-页面" tabindex="-1"><a class="header-anchor" href="#_3-2-1-创建一个路由-页面"><span>3.2.1 创建一个路由（页面）</span></a></h3><ol><li><p>需求分析</p><p>新建一个 <code>/dashboard</code> 路由，app下创建 <code>dashboard</code>目录即可。</p></li><li><p>实现步骤</p><ol><li><p>新建 <code>app/dashboard</code> 目录</p></li><li><p>在 <code>app/dashboard</code> 目录下新建 <code>page.tsx</code> 文件，并导出一个 React 组件。</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/page.tsx</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Dashboard Page.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>浏览器访问 <code>http://localhost:3000/dashboard</code> 即可看到 <code>dashboard</code> 页面内容。</p><p><img src="`+c+`" alt=""></p></li></ol><h3 id="_3-2-2-创建嵌套路由" tabindex="-1"><a class="header-anchor" href="#_3-2-2-创建嵌套路由"><span>3.2.2 创建嵌套路由</span></a></h3><ol><li><p>需求分析</p><p>在 <code>/dashboard</code> 下创建一个 <code>/dashboard/customers</code> 子页面，依据 <strong>每个文件夹都表示一个路由</strong> 规则同样适用于<strong>创建嵌套路由</strong>。</p></li><li><p>实现步骤</p><ol><li><p>新建 <code>app/dashboard/customers</code> 目录；</p></li><li><p>在 <code>app/dashboard/customers</code> 目录下新建 <code>page.tsx</code> 文件，并导出一个 React 组件。</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/customers/page.tsx</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Customers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Customers Page.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>浏览器访问 <code>http://localhost:3000/dashboard/customers</code> 即可看到 <code>customers</code> 页面内容。</p><p><img src="`+l+`" alt=""></p></li></ol><h3 id="_3-2-3-创建动态路由" tabindex="-1"><a class="header-anchor" href="#_3-2-3-创建动态路由"><span>3.2.3 创建动态路由</span></a></h3><ol><li><p>需求分析</p><p>将 <strong>数据 id</strong> 作为路由段也是一个常见的路由形式，一般称为<strong>动态路由</strong>。</p><p>由于数据 id 是动态字段无法提前预知，Next.js 支持 <strong>将文件夹名称括在方括号中</strong> 来创建动态路由，格式为 <code>[folderName]</code>，例如 <code>[id]</code>。路由上的数据 <code>id</code> 将作为 <code>props.params.id</code> 传递给页面组件。</p><p>在 <code>/dashboard/customers</code> 下创建一个动态路由 <code>/dashboard/customers/[id]</code>。</p></li><li><p>实现步骤</p><ol><li><p>新建 <code>app/dashboard/customers/[id]</code> 目录；</p></li><li><p>在 <code>app/dashboard/customers/[id]</code> 目录下新建 <code>page.tsx</code> 文件，并导出一个 React 组件。</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/customers/[id]/page.tsx</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">CustomerDetail</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">CustomerDetail Page. </span><span class="token punctuation">{</span>params<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>浏览器访问 <code>http://localhost:3000/dashboard/customers/abcd</code></p><p>假设 <code>customers id</code> 是 <code>abcd</code>，可看到 <code>customers/[id]</code> 页面内容。</p><p><img src="`+i+`" alt=""></p></li></ol><h3 id="_3-2-4-路由导航" tabindex="-1"><a class="header-anchor" href="#_3-2-4-路由导航"><span>3.2.4 路由导航</span></a></h3><ol><li><p>需求分析</p><p>我们要在 <code>/dashboard/page.tsx</code> 视图上放置一个按钮，点击可以进入 <code>/dashboard/customers</code> 页面。</p><p>我们可以使用 Next.js 所提供的 <code>next/link</code> Link 组件作为按钮 UI，并将 <strong>路由 Path</strong> 作为 Link 的 <code>href</code> 属性。同时可以使用 <code>usePathname()</code> hook <strong>获取当前路由</strong> 来给 Link 设置活动状态。</p></li><li><p>实现步骤</p><ol><li><p><code>app/dashboard/nav-link.tsx</code> 文件，在里面加入 <code>Link</code> 导航逻辑。</p><blockquote><p>Tip: 注意在组件中使用 <code>usePathname() 等 hooks</code>，需要在文件顶部声明 <code>use client</code> 表示这是一个客户端渲染组件。有关服务端组件和客户端组件下文会做介绍。</p></blockquote><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/nav-link.tsx</span></span>
<span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">&quot;next/link&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> usePathname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/navigation&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> pathname <span class="token operator">=</span> <span class="token function">usePathname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span></span>
<span class="line">            <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> pathname <span class="token operator">===</span> <span class="token string">&quot;/dashboard/customers&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;#333&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;#999&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">            <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/dashboard/customers<span class="token punctuation">&quot;</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Customers</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>/dashboard/page.tsx</code> 中引入 <code>nav-link</code> 组件：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/page.tsx</span></span>
<span class="line"><span class="token keyword">import</span> NavLink <span class="token keyword">from</span> <span class="token string">&quot;./nav-link&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Dashboard Page.</span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">NavLink</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>浏览器访问 <code>http://localhost:3000/dashboard</code></p><p>点击 <code>Link</code> 元素便会跳转进入 <code>http://localhost:3000/dashboard/customers</code> 页面</p><p><img src="`+u+`" alt=""></p></li><li><p>除了 <code>Link</code> 视图组件外，Next.js 还提供了 <code>useRouter</code> API 调用的方式实现路由跳转。你可以根据场景选用 <code>push</code> 和 <code>replace</code>。</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/nav-link.tsx</span></span>
<span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> usePathname<span class="token punctuation">,</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/navigation&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> pathname <span class="token operator">=</span> <span class="token function">usePathname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> replace<span class="token punctuation">,</span> push <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> </span>
<span class="line">            <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;/dashboard/customers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> </span>
<span class="line">            <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">color</span><span class="token operator">:</span> pathname <span class="token operator">===</span> <span class="token string">&quot;/dashboard/customers&quot;</span> <span class="token operator">?</span> <span class="token string">&quot;#333&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;#999&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span>
<span class="line">        <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            Customers</span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_3-2-5-路由组" tabindex="-1"><a class="header-anchor" href="#_3-2-5-路由组"><span>3.2.5 路由组</span></a></h3><ol><li><p>介绍</p><p>在 app 目录下每一个文件夹都是一个路由，当你期望一个文件夹仅是用来分组或是包裹其他路由，不会作为 URL 访问路径出现，那么 <strong>路由分组</strong> 可以帮你实现这个功能。</p><p>通过创建一个名为 <code>(group-name)</code> 的文件夹来定义一个路由组，其中 <code>group-name</code> 可以是任意名称。</p></li><li><p>需求分析</p><p>假设在 /dashboard 路由下有两个子页面：</p><ul><li>数据分析模块（analytics），对应路由：<code>/dashboard/analytics</code></li><li>用户管理模块（users），对应路由：<code>/dashboard/users</code></li></ul><p>其中，数据分析模块 需要使用布局 UI，而 用户管理模块 并不需要。</p><blockquote><p>PS：<code>关 Lyout 布局的使用，下文会有介绍，如对这里不太理解，可以跳过先认识 layout 布局</code></p></blockquote></li><li><p>解决方式</p><p>针对这类需求，我们可以创建 <strong>路由组</strong> <code>(use-layout)</code> 分组，并定义 <code>layout.tsx</code> 文件来为这个分组下的路由定义相同的布局 UI；而另外一个分组 <code>(nonuse-layout)</code> 不创建 <code>layout.tsx</code> 文件，因此这个分组下的路由没有统一的布局 UI。</p><p>路由结构如下：</p><p><img src="`+r+`" alt=""></p><p>由于 <code>(use-layout)</code> 和 <code>(nonuse-layout)</code> 属于路由组，不会出现在 URL 访问路径上，因此 数据分析模块 和 用户管理模块 可以正常使用 <code>/dashboard/模块路径</code> 进行访问。</p></li><li><p><strong>路由组的优势在于：</strong></p><ul><li><strong>分割模块</strong>：当您的应用变得越来越大时，可以使用路由组来划分不同的功能模块。</li><li><strong>共享布局</strong>：如果多个页面共享相同的布局，您可以将它们放在同一个路由组内，并为该组定义一个共同的 <code>layout.tsx</code> 文件。</li></ul></li></ol><h2 id="_3-3-style-样式" tabindex="-1"><a class="header-anchor" href="#_3-3-style-样式"><span>3.3 style 样式</span></a></h2><ol><li><p>样式介绍</p><p>Next.js 支持的样式书写形式有：Tailwind CSS、CSS Module、sass、CSS-in-JS，推荐使用 <code>Tailwind CSS</code> 完成样式书写。</p><p><code>Tailwind CSS</code> 是一个 CSS 原子类框架，我们可以直接<strong>在节点上快速编写实用程序类</strong>，代替之前的起类名、在类名下编写 CSS 属性的方式。</p></li><li><p>比如使用 flex 实现一个两栏布局，可以这样编写：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex h-screen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1 bg-green-600 text-white<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">left</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1 bg-blue-600 text-white<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">right</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每一个实用程序类都对应一个 css 属性，比如 <code>flex</code> 就表示 <code>display: flex</code>。</p></li><li><p>搜索方式</p><p>初次接触我们不太熟悉有哪些实用程序类，大家可以在 <a href="https://tailwindcss.com/docs/installation" target="_blank" rel="noopener noreferrer">Tailwind docs</a> 左侧进行<strong>快捷搜索</strong> 或 使用<strong>浏览器关键字搜索</strong>，查找要想使用的实用程序类。</p><p><img src="`+d+`" alt=""></p></li></ol><h2 id="_3-4-layout-布局" tabindex="-1"><a class="header-anchor" href="#_3-4-layout-布局"><span>3.4 layout 布局</span></a></h2><ol><li><p>介绍</p><p><strong>布局是定义在多个路由之间共享的 UI</strong>。在一个网站中常见的布局是：顶部 header、左侧 navbar 是共享 UI，切换路由导航仅是改变中间区域内容。</p><p>在 Next.js 中，你可以在 <code>app</code> 或任意 <strong>文件夹路由目录</strong> 下定义一个 <code>layout.tsx</code> 文件，导出 React 组件来进行页面布局。</p><p>其中 <code>/app/layout.tsx</code> 称为 根布局，这个是必须的，添加到根布局的任何 UI 都将在应用程序中的所有页面之间共享。</p></li><li><p>示例操作</p><p>新建 <code>/app/dashboard/layout.tsx</code> 文件作为 <code>dashboard</code> 及其子页面的共享 UI。</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/layout.tsx</span></span>
<span class="line"><span class="token keyword">import</span> SideNav <span class="token keyword">from</span> <span class="token string">&quot;./nav-link&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span> children<span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex h-screen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w-64<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SideNav</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>html结构</p><p><img src="`+k+`" alt=""></p><p>在上面的布局中，左侧展示 <code>nav-link</code>，右侧展示页面的具体内容。当点击 Link 切换到 <code>/dashboard/customers</code> 页面后，<code>nav-link</code> 依旧可以共享。</p></li></ol><h2 id="_3-5-组件渲染方式-server-client-components" tabindex="-1"><a class="header-anchor" href="#_3-5-组件渲染方式-server-client-components"><span>3.5 组件渲染方式（Server/Client Components）</span></a></h2><ol><li><p>介绍</p><p>在 Next.js 中组件渲染方式有两种：<strong>Server Components 服务端组件渲染</strong> 和 <strong>Client Components 客户端组件渲染</strong>。</p><p>Server Components 服务端组件是指组件 render 运行在服务器端，而 Client Components 客户端组件则和编写 CSR 应用一样，组件 render 会在浏览器上执行。</p><p><strong>默认 Next.js 会将每个组件视为 Server Components 进行服务端渲染。如果需要使用 Client Components 客户端组件，可以在文件顶部添加 <code>&quot;use client&quot;</code> 指令。</strong></p></li><li><p>一个客户端渲染组件编写示例如下：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">计数：</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如何选择两者？</p><p>服务端渲染通常用于首屏渲染页面组件，它不支持渲染有关 <strong>交互性</strong> 的内容。如当需要使用 <code>useState、useEffect</code>等 hooks 或 <code>onClick</code> 等事件交互时，<strong>应当将内容拆分到单独组件文件内，并在文件顶部添加 <code>&quot;use client&quot;</code> 指令，声明这是客户端渲染</strong>。</p></li></ol><h2 id="_3-6-数据获取" tabindex="-1"><a class="header-anchor" href="#_3-6-数据获取"><span>3.6 数据获取</span></a></h2><p>服务端渲染组件 和 客户端渲染组件 的数据获取方式有所不同。</p><h3 id="_3-6-1-服务端渲染的获取方式" tabindex="-1"><a class="header-anchor" href="#_3-6-1-服务端渲染的获取方式"><span>3.6.1 服务端渲染的获取方式</span></a></h3><ol><li><p>使用方式</p><p>如果是 Server Components 服务端组件渲染，可以直接在组件 render 内使用 <code>await + fetch</code>，等待拿到数据以后再渲染出 UI 视图。</p></li><li><p>代码示例</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// 模拟从数据库获取 posts</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;post1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;post2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 await + fetch 等待获取数据</span></span>
<span class="line">    <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token string">&quot;https://api/posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_3-6-2-客户端渲染的获取方式" tabindex="-1"><a class="header-anchor" href="#_3-6-2-客户端渲染的获取方式"><span>3.6.2 客户端渲染的获取方式</span></a></h3><ol><li><p>使用方式</p><p>如果是 Client Components 客户端组件渲染，和常规 CSR 中用法相似：在 <code>useEffect</code> 中发起 <code>fetch</code> 请求，期间可以展示 loading 视图，等待拿到数据后再渲染到视图上。</p></li><li><p>代码示例</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟从数据库获取 posts</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchPosts</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>posts<span class="token punctuation">,</span> setPosts<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 发起 ajax 请求</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token string">&quot;https://api/posts&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">setPosts</span><span class="token punctuation">(</span>posts<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>posts<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3-7-处理加载-流式渲染" tabindex="-1"><a class="header-anchor" href="#_3-7-处理加载-流式渲染"><span>3.7 处理加载（流式渲染）</span></a></h2><p>在加载数据期间，通常可以展示 loading 给用户。</p><p>在 Next.js 中，有两种方法可以处理加载：</p><ul><li>1）在页面级别，使用 <code>loading.tsx 文件</code>；</li><li>2）对于特定模块，使用 <code>&lt;Suspense&gt; 组件</code>。</li></ul><h3 id="_3-7-1-loading-文件" tabindex="-1"><a class="header-anchor" href="#_3-7-1-loading-文件"><span>3.7.1 loading 文件</span></a></h3><p>以 <code>/dashboard</code> 为例，假设页面需要展示 顾客消费排行榜（下文简称 内容块 A）、热销商品排行榜（下文简称 内容块 B） 两个模块内容。</p><ol><li><p>我们首先在 <code>app/dashboard/page.tsx</code> 中查询这两项数据：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/page.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟从数据库获取顾客消费排行榜</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchCustomers</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;customer1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;customer2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟从数据库获取热销商品排行榜</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchCommodity</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;commodity1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;commodity2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 数据获取</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">fetchCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">fetchCommodity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex h-screen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">顾客消费排行榜</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">热销商品排行榜</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们访问 <code>http://localhost:3000/dashboard</code>，看到的效果是：页面无响应，会等到 1s 展示出页面内容。然而在这 1s 等待获取数据期间，其实可以向用户友好展示一个 loading 效果（如骨架屏）。</p></li><li><p>我们新建 <code>app/dashboard/loading.tsx</code> 文件并编写 loading UI：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/loading.tsx</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次访问 <code>http://localhost:3000/dashboard</code> 你会先看到 loading 视图，之后才是展示实际数据。</p><p><img src="`+v+`" alt=""></p></li></ol><h3 id="_3-7-2-suspense-组件" tabindex="-1"><a class="header-anchor" href="#_3-7-2-suspense-组件"><span>3.7.2 Suspense 组件</span></a></h3><ol><li><p>介绍</p><p>基于 <code>Suspense</code> 特性可以实现类似 <strong>流式渲染</strong> 的效果，将页面的分解为较小的块，并逐步将这些块从服务器发送到客户端。这样可以更快地显示页面的某些部分，而无需等待所有数据加载后才能呈现任何 UI。</p><p>上面使用 <code>loading.tsx</code> 会存在一个问题：内容块 B 在 500ms 内拿到数据了，但是要等待 内容块 A 的 1000ms 拿到数据后一起渲染在视图。</p><p>其实两者可以分开渲染，<strong>只要任意一个拿到数据以后，就可以渲染在视图上</strong>。</p></li><li><p>代码操作</p><p>我们改造一下组件结构，将 内容块 A 和 内容块 B 作为单独组件，数据请求也放在各自组件内，并在注册组件时使用 <code>&lt;Suspense&gt;</code> 包裹，同时提供 <code>fallback</code> 渲染 loading 视图。</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/page.tsx</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟从数据库获取顾客消费排行榜</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchCustomers</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟从数据库获取热销商品排行榜</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fetchCommodity</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Customers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">fetchCustomers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">顾客消费排行榜</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Commodity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">fetchCommodity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">热销商品排行榜</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex h-screen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">顾客消费排行榜 loading.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Customers</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">热销商品排行榜 loading.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Commodity</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在你访问 <code>http://localhost:3000/dashboard</code> 看到的效果将是：内容块 A 和 B 先展示 loading view，500ms 后内容块 B 展示实际内容，此时内容块 A 还是展示它的 loading view，在 1000ms 后内容块 A 展示出实际内容。</p><p><strong><code>Suspense</code> 流式处理的方式可以让用户尽早看到已加载完成的内容块，在一些场景下比使用 <code>loading.tsx</code> 体验会更好</strong>。</p><blockquote><p>Tip：上述实现的 loading view 过于简单，在实际工作场景中可以编写体验更好的 <strong>骨架屏</strong>。</p></blockquote></li></ol><h2 id="_3-8-处理错误-error-文件" tabindex="-1"><a class="header-anchor" href="#_3-8-处理错误-error-文件"><span>3.8 处理错误 error 文件</span></a></h2><ol><li><p>介绍</p><p>Next.js 使用特殊的 <code>error.tsx</code> 文件来捕获路由段中的代码错误，并向用户显示回退 UI。</p></li><li><p>实现步骤</p><p>我们新建 <code>app/dashboard/error.tsx</code> 文件，并导出一个 React 组件，并声明为 Client Component：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/error.tsx</span></span>
<span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    error<span class="token punctuation">,</span></span>
<span class="line">    reset<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    error<span class="token operator">:</span> Error <span class="token operator">&amp;</span> <span class="token punctuation">{</span> digest<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function-variable function">reset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex h-full flex-col items-center justify-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text-center<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Something went wrong!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span></span>
<span class="line">                <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rounded-md bg-blue-500 px-4 py-2 text-white<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">            <span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">                Try again</span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>/dashboard</code> 页面内出现错误时（如：<code>throw new Error(&quot;code error.&quot;)</code>），页面将显示 <code>error.js</code> 回退 UI，并在 <code>useEffect</code> 中打印错误信息。</p></li></ol><h2 id="_3-9-设置元数据" tabindex="-1"><a class="header-anchor" href="#_3-9-设置元数据"><span>3.9 设置元数据</span></a></h2><p>SSR 服务端渲染一大优势是可以设置<strong>元数据</strong>帮助网站进行 SEO 搜索引擎优化。如 <code>title</code>、<code>description</code>、<code>keywords</code> 等信息。</p><p>Next.js 允许将元数据配置在 <code>layout.tsx</code> 或 <code>page.tsx</code> 文件中进行导出。</p><p>配置元数据的方式有两种：</p><ol><li>静态元数据对象；</li><li>动态 generateMetadata 函数。</li></ol><h3 id="_3-9-1-静态元数据对象" tabindex="-1"><a class="header-anchor" href="#_3-9-1-静态元数据对象"><span>3.9.1 静态元数据对象</span></a></h3><ol><li><p>使用方式</p><p><strong>静态元数据对象</strong> 用法简单，已知元数据内容的情况下可以使用这种方式，在 <code>app</code> 或者任意页面的 <code>layout.tsx</code> 或 <code>page.tsx</code> 中导出一个 <code>metadata</code> 对象：</p><blockquote><p>Tip: 不能在声明了 <code>&quot;use client&quot;</code> 的文件中导出 metadata 对象，仅支持 Server Component 进行配置。</p></blockquote></li><li><p>示例代码(原有的基础上添加)</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/layout.tsx</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Metadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> metadata<span class="token operator">:</span> Metadata <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token string">&quot;Dashboard&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    description<span class="token operator">:</span> <span class="token string">&quot;This is Dashboard page.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    keywords<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;dashboard&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开浏览器访问 <code>http://localhost:3000/dashboard</code> 在 head 标签可以看到设置的元数据内容。</p><p><img src="`+m+`" alt=""></p></li></ol><h3 id="_3-9-2-动态-generatemetadata-函数" tabindex="-1"><a class="header-anchor" href="#_3-9-2-动态-generatemetadata-函数"><span>3.9.2 动态 generateMetadata 函数</span></a></h3><ol><li><p>使用方式</p><p><strong>动态 generateMetadata 函数</strong> 适用于动态向数据库查询到有关数据后再设置元数据，并且在 <code>generateMetadata</code> 方法中可以获取到路由参数 <code>params</code> 信息。</p></li><li><p>代码示例</p><p>比如 <code>customers/[id]</code> 页面，我们在 <code>app/dashboard/customers/[id]/page.tsx</code> 中使用 generateMetadata 函数：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/customers/[id]/page.tsx</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> Metadata<span class="token punctuation">,</span> ResolvingMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">generateMetadata</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">{</span> params<span class="token punctuation">,</span> searchParams <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>parent<span class="token operator">:</span> ResolvingMetadata</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Metadata<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 读取参数</span></span>
<span class="line">    <span class="token keyword">const</span> id <span class="token operator">=</span> params<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 模拟 fetch data</span></span>
<span class="line">    <span class="token keyword">const</span> customer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                title<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">customer-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">                description<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">customer-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> desc...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        title<span class="token operator">:</span> customer<span class="token punctuation">.</span>title<span class="token punctuation">,</span></span>
<span class="line">        description<span class="token operator">:</span> customer<span class="token punctuation">.</span>description<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开浏览器访问 <code>http://localhost:3000/dashboard/customers/abcd</code> 在 head 标签可以看到设置的元数据内容。</p><p><img src="`+b+`" alt=""></p></li></ol><h2 id="_3-10-server-action-服务端行为" tabindex="-1"><a class="header-anchor" href="#_3-10-server-action-服务端行为"><span>3.10 Server Action 服务端行为</span></a></h2><ol><li><p>使用方法</p><p>在前端将数据提交到数据库中需要经过这些步骤：</p><ul><li>前端发起 ajax POST 请求将数据给到服务端；</li><li>服务端将数据存储到数据库。</li></ul><p>Next.js 提供了一种更为简单的方式来进行数据提交（称为 Server Action 服务端行为）：<strong>省略了开发者在客户端书写 ajax POST 请求的步骤，处理数据的回调函数可直接在服务端运行并与数据库对接</strong>。</p><blockquote><p>Tip: 注意，这仅是为开发者提交数据提供了便利，实际在 Next.js 底层还是会把它处理成一个 POST 请求从浏览器上进行发起。</p></blockquote></li><li><p>代码示例</p><p>假设我们在 <code>/dashboard/customers</code> 页面有一个输入框，输入用户名称，并点击按钮创建一个用户，内容如下：</p><div class="language-tsx line-numbers-mode" data-highlighter="prismjs" data-ext="tsx"><pre><code><span class="line"><span class="token comment">// app/dashboard/customers/page.tsx</span></span>
<span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createCustomer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./action&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Customers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">submitData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        formData<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">createCustomer</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span></span>
<span class="line">                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>请输入用户名称<span class="token punctuation">&quot;</span></span></span>
<span class="line">                <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span></span>
<span class="line">                <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setName</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span></span>
<span class="line">            <span class="token punctuation">/&gt;</span></span><span class="token plain-text"></span>
<span class="line">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>submitData<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">创建一个用户</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span>
<span class="line">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>createCustomer</code> 是关键，它来自 <code>action.ts</code>，重点是在 <code>action.ts</code> 文件顶部需要声明 <code>&quot;use server&quot;</code>，目的是标记此文件内导出的函数作为 <code>Server Actions</code> 形式去使用。当在客户端组件中使用时，会自动发送 POST 请求，并将 formData 作为 POST 请求参数，传递给 <code>createCustomer</code> 处理函数。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// // app/dashboard/customers/action.tsx</span></span>
<span class="line"><span class="token string">&quot;use server&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createCustomer</span><span class="token punctuation">(</span>data<span class="token operator">:</span> FormData<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;data: &quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// TODO... 存储数据到数据库中</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_3-11-middleware-中间件" tabindex="-1"><a class="header-anchor" href="#_3-11-middleware-中间件"><span>3.11 middleware 中间件</span></a></h2><ol><li><p>介绍</p><p>中间件可以接收每个传入的请求（页面），可以通过重写、重定向、修改请求/响应标头等方式来修改响应内容。</p><p>一个常见的场景是：验证用户身份和授权，在访问特定页面或 API 路由之前，确认用户身份并检查会话 Cookie。</p></li><li><p>开始使用</p><p>我们在项目根目录下新建 <code>middleware.ts</code> 文件来定义中间件，并加入一个重定向逻辑：当访问 <code>/dashboard</code> 路由时自动重定向到 <code>/dashboard/customers</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// middleware.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NextResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/server&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next/server&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span>request<span class="token operator">:</span> NextRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;middleware request: &quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>nextUrl<span class="token punctuation">.</span>pathname <span class="token operator">===</span> <span class="token string">&quot;/dashboard&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 重定向到 /dashboard/customers 页面</span></span>
<span class="line">        <span class="token keyword">return</span> NextResponse<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;/dashboard/customers&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 匹配器，让中间件在指定的路径上运行（排除 \`/api\`、\`/_next/static\`、\`/_next/image\` 和 \`/favicon.ico\` 路径）</span></span>
<span class="line">    matcher<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/((?!api|_next/static|_next/image|favicon.ico).*)&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>middleware 中间件还有更多详细的用法可以参考：<a href="https://nextjs.org/docs/app/building-your-application/routing/middleware" target="_blank" rel="noopener noreferrer">Middleware</a>。</p></li></ol><h2 id="_3-12-auth-登录鉴权" tabindex="-1"><a class="header-anchor" href="#_3-12-auth-登录鉴权"><span>3.12 Auth 登录鉴权</span></a></h2><ol><li><p>介绍</p><p>在 Next.js 中用户身份认证可以采用 <a href="hthttps://authjs.dev/getting-started/installation" target="_blank" rel="noopener noreferrer">NextAuth</a> 作为首选方案，它提供了多种登录方式，包括 OAuth 提供商（如 Google、GitHub 等）、凭据（经典的邮箱 + 密码）。</p><ul><li><p>NextAuth 特点如下：</p><ol><li>提供触发登录（<code>signIn</code>）和登出（<code>signOut</code>）过程的函数；</li><li>内置的提供商，允许使用 Google、GitHub 或邮箱 + 密码等方式登录；</li><li>基于 JWT 生成用户 session token，在成功登录后，设置到浏览器 cookies 中；</li><li>提供 <code>auth</code> 函数读取用户 session token；</li><li>提供 <code>auth</code> 函数作为 <code>middleware</code> 中间件处理路由跳转鉴权逻辑；</li></ol></li><li><p>NextAuth 可以应用在这两处：</p><ol><li><strong>处理登录</strong>，它提供的函数（signIn、signOut、auth）处理 登录、登出、获取用户信息 等操作；</li><li><strong>路由鉴权</strong>，它提供的函数（auth）可作为 middleware 中间件处理路由导航。</li></ol></li></ul></li><li><p>准备工作</p><p>在使用前我们需要安排准备工作：安装 NextAuth 以及生成一个 <code>secret</code> 加密令牌：</p><ol><li><p>安装：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">pnpm</span> <span class="token function">install</span> next-auth</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>生成 <code>secret</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">pnpm</span> dlx auth secret</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>在根目录下 <code>.env.local</code> 文件中会存放生成的环境变量 <code>AUTH_SECRET</code>。</p></li></ol><h3 id="_3-12-1-处理登录" tabindex="-1"><a class="header-anchor" href="#_3-12-1-处理登录"><span>3.12.1 处理登录</span></a></h3><p>下面我们使用 <code>NextAuth</code> 凭据（邮箱 + 密码）方式给网站添加登录流程。</p><ol><li><p>首先，初始化一个 <code>NextAuth</code> 实例对象得到 <code>signIn、signOut、auth</code> 等方法，我们在项目根目录下新建 <code>auth.ts</code> 文件来完成这件事情。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// auth.ts</span></span>
<span class="line"><span class="token keyword">import</span> NextAuth <span class="token keyword">from</span> <span class="token string">&quot;next-auth&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> Credentials <span class="token keyword">from</span> <span class="token string">&quot;next-auth/providers/credentials&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> auth<span class="token punctuation">,</span> signIn<span class="token punctuation">,</span> signOut <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">NextAuth</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    providers<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token comment">// 使用 凭据 作为登录方式</span></span>
<span class="line">        <span class="token function">Credentials</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 提供 凭据 的检验函数</span></span>
<span class="line">        <span class="token keyword">async</span> <span class="token function">authorize</span><span class="token punctuation">(</span>credentials<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// credentials 包含 用户邮件 + 密码 信息，在这里可以编写数据库查询用户信息，若登录信息有效，需要返回查询到的用户信息</span></span>
<span class="line">            <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUser</span><span class="token punctuation">(</span>credentials<span class="token punctuation">.</span>email<span class="token punctuation">,</span> credentials<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// getUser 可以向查询数据库用户信息</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid credentials&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 返回 null 阻止用户登录。</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在登录界面将用户输入的 邮箱 和 密码 传递给 <code>signIn</code> 进行登录检验：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// app/login/page.tsx</span></span>
<span class="line"><span class="token string">&quot;use client&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useActionState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> authenticate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/app/lib/actions&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">[</span>errorMessage<span class="token punctuation">,</span> formAction<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useActionState</span><span class="token punctuation">(</span>authenticate<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token punctuation">{</span>formAction<span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            邮箱：</span>
<span class="line">            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;email&quot;</span> name<span class="token operator">=</span><span class="token string">&quot;email&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span></span>
<span class="line">            密码：</span>
<span class="line">            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> name<span class="token operator">=</span><span class="token string">&quot;password&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>authenticate</code> 是一个 Server Action，它的实现在 <code>app/lib/actions.ts</code> 中：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// app/lib/actions.ts</span></span>
<span class="line"><span class="token string">&quot;use server&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Server Action 处理登录操作</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">authenticate</span><span class="token punctuation">(</span></span>
<span class="line">    prevState<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    formData<span class="token operator">:</span> FormData</span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> email <span class="token operator">=</span> formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> password <span class="token operator">=</span> formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 核心，调用 NextAuth signIn 方法进行身份登录</span></span>
<span class="line">        <span class="token keyword">await</span> <span class="token function">signIn</span><span class="token punctuation">(</span><span class="token string">&quot;credentials&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Invalid credentials.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们梳理一下：<strong>当用户提交登录信息时会调用 <code>signIn</code> 将邮箱和密码传递给 <code>Credentials authorize</code> 进行身份认证，若认证成功需要 return 一个 <code>user</code> 信息给 <code>NextAuth</code>，它会基于 <code>user</code> 信息生成一个 <code>JWT session token</code> 存储在 cookie 中</strong>。</p><p>另外，如果需要退出登录，执行 <code>signOut()</code> 方法，需要获取当前用户身份时执行 <code>auth()</code> 方法。</p></li></ol><h3 id="_3-12-2-路由鉴权" tabindex="-1"><a class="header-anchor" href="#_3-12-2-路由鉴权"><span>3.12.2 路由鉴权</span></a></h3><ol><li><p>使用步骤</p><p>在未登录状态下访问 身份认证的页面 时，我们需要自动将路由重定向到 <code>/login</code> 页面。NextAuth 的 <code>auth</code> 方法可以作为 <code>middleware</code> 来完成这一项工作。</p><p>首先在根目录下新建 <code>auth.config.ts</code> 配置文件，并提供 <code>callbacks.authorized</code> 作为路由鉴权的处理函数。它接收一个 <code>auth</code> 对象，当 <code>auth.user</code> 不存在时说明当前处于未登录状态。</p></li><li><p>代码示例</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// auth.config.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> NextAuthConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;next-auth&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> authConfig <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    pages<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        signIn<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 添加中间件，以保护您的路由</span></span>
<span class="line">    callbacks<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 验证请求是否被授权通过，auth 属性包含用户的会话，request 属性包含传入请求。</span></span>
<span class="line">        <span class="token function">authorized</span><span class="token punctuation">(</span><span class="token punctuation">{</span> auth<span class="token punctuation">,</span> request<span class="token operator">:</span> <span class="token punctuation">{</span> nextUrl <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>auth<span class="token operator">?.</span>user<span class="token punctuation">;</span> <span class="token comment">// 是否已登录</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>nextUrl<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 在登录页，重定向到首页，如 /dashboard</span></span>
<span class="line">            <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&quot;/dashboard&quot;</span><span class="token punctuation">,</span> nextUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 其他页面，返回 true 保持不动</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 返回 false 重定向到登录页面</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span> satisfies NextAuthConfig<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在根目录创建 <code>middleware.ts</code> 并将 <code>NextAuth auth</code> 方法作为中间件函数导出。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// middleware.ts</span></span>
<span class="line"><span class="token keyword">import</span> NextAuth <span class="token keyword">from</span> <span class="token string">&quot;next-auth&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> authConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./auth.config&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 Middleware 完成此任务的优点是，在 Middleware 验证身份验证之前，受保护的路由甚至不会开始渲染，从而增强了应用程序的安全性和性能。</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 authConfig 对象初始化 NextAuth.js 并导出 auth 函数</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">NextAuth</span><span class="token punctuation">(</span>authConfig<span class="token punctuation">)</span><span class="token punctuation">.</span>auth<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用 Middleware 中的 matcher 选项来指定它应该在特定路径上运行。</span></span>
<span class="line">    matcher<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/dashboard/:path*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，进行页面切换时，会进入 <code>callbacks.authorized</code> 回调函数进行身份验证，若没有身份信息则重定向到登录页面。</p></li></ol><h2 id="_3-13-编写服务端-api" tabindex="-1"><a class="header-anchor" href="#_3-13-编写服务端-api"><span>3.13 编写服务端 API</span></a></h2><p>Next.js 作为 SSR 服务端框架，同时提供了开发服务端 API 的能力。因此可以用作 全栈项目开发 或做 Mock 数据。</p><p>和 Next.js 路由规则相似，编写 API 需要在 <code>app/api</code> 目录下使用特殊文件 <code>route.ts</code>，支持 GET、POST、DELETE、PUT 等所有 HTTP method。</p><p>我们新建 <code>app/api/dashboard/route.ts</code> 文件，并导出一个 GET 方法，返回一个列表数据。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// app/api/dashboard/route.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">GET</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;title 1&quot;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&quot;content 1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;title 2&quot;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&quot;content 2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token string">&quot;title 3&quot;</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">&quot;content 3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> list <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">POST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器访问 <code>http://localhost:3000/api/dashboard</code> 访问 GET 请求即可看到 list 数据。</p><h2 id="_3-14-部署-next-js" tabindex="-1"><a class="header-anchor" href="#_3-14-部署-next-js"><span>3.14 部署 Next.js</span></a></h2><ol><li><p>配置 Next.js 属于一个 Node 应用，可以采用 NodeJS 服务器方式进行部署。</p><p>在 <code>package.json</code> 中我们能看到 <code>build</code> 和 <code>start</code> 两个命令：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;dev&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next dev&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next build&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;next start&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>部署主要步骤如下：</p><ol><li>运行 <code>npm run build</code> 生成用于生产环境的应用程序的优化版本；</li><li>使用 <code>pm2</code> 运行 <code>npm run start</code> 命令，基于 build 的构建产物启动 Next 服务器，默认服务器运行在 3000 端口上；</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pm2 start <span class="token function">npm</span> <span class="token parameter variable">--name</span> <span class="token string">&quot;next-app&quot;</span> -- start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>配置 Web 服务器 Nginx 代理到 3000 端口，实现通过 域名/IP 访问到 Next 项目。</li></ol><div class="language-conf line-numbers-mode" data-highlighter="prismjs" data-ext="conf"><pre><code><span class="line">server {</span>
<span class="line">listen 80;</span>
<span class="line">server_name 域名或 IP;</span>
<span class="line">location / {</span>
<span class="line">    proxy_pass http://127.0.0.1:3000/;</span>
<span class="line">}</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,67)]))}const f=s(g,[["render",h]]),w=JSON.parse('{"path":"/framework/react/expand/03.html","title":"三、next.js 使用","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1757530254000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"2c9ec28ff41db4bb3e8c363d6656a261f88b4c95","time":1757530254000,"email":"857899180@qq.com","author":"zhao-farmer","message":"react一些相关的"}]},"filePathRelative":"framework/react/expand/03.md"}');export{f as comp,w as data};
