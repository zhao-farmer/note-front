import{aq as s,ar as a,as as p,at as t}from"./app-Cok9BT0p.js";const e={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="四、跨域" tabindex="-1"><a class="header-anchor" href="#四、跨域"><span>四、跨域</span></a></h1><h2 id="_4-1-同源策略" tabindex="-1"><a class="header-anchor" href="#_4-1-同源策略"><span>4.1 同源策略</span></a></h2><ol><li><p>什么是同源策略？</p><p>同源策略是Web浏览器的一种安全机制，用于限制来自不同源的文档或脚本如何与另一个源的资源进行交互。</p><p>这种策略有助于防止恶意网站读取另一个网站的敏感数据，例如用户的登录凭据或私人信息。通过确保只有来自相同源的脚本才能访问和操作DOM、发送AJAX请求或读取Cookie等，同源策略为Web应用程序提供了基本的安全保障。</p></li><li><p>源（origin）</p><ol><li>定义 Web内容的源由用于访问它的URL的方案（协议）、主机名（域名）和端口定义。即源由协议、域名和端口组成。</li></ol></li><li><p>组成</p><ul><li>协议（Protocol）： 资源使用的传输协议，如http、https、ftp等。</li><li>域名（Domain Name）： 资源的网络域名。例如example.com、other-example.com 这包括了主域名以及可能存在的子域名，如www.example.com和mail.example.com会被视为不同的子域名，除非特别配置为同源。</li><li>端口（Port）： 资源服务器监听的端口号，如80（http默认端口）或443（https默认端口）。如果端口号没有显式指定，则浏览器会使用协议的默认端口。</li></ul></li><li><p>同源</p><p>只有当两个资源的协议、域名和端口都完全相同时，它们才被认为是同源的。例如(下方URL均与http://example.com/dir/index.html比较)：</p><table><thead><tr><th>URL</th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td>http://example.com/dir2/index.html</td><td>同源</td><td>只有路径不同，协议、域名和端口均相同</td></tr><tr><td>https://example.com/dir/index.html</td><td>不同源</td><td>协议不同</td></tr><tr><td>http://example.com:81/dir/index.html</td><td>不同源</td><td>端口不同</td></tr><tr><td>http://example.org/dir/index.html</td><td>不同源</td><td>主机不同（域名不同）</td></tr></tbody></table></li></ol><h2 id="_4-2-如何解决跨域" tabindex="-1"><a class="header-anchor" href="#_4-2-如何解决跨域"><span>4.2 如何解决跨域</span></a></h2><h3 id="_4-2-1-jsonp" tabindex="-1"><a class="header-anchor" href="#_4-2-1-jsonp"><span>4.2.1 JSONP</span></a></h3><p><strong>jsonp只支持get请求不支持post请求</strong></p><ol><li><strong>JSONP 是什么</strong></li></ol><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明 才智开发出来，只支持get 请求。</p><ol start="2"><li><strong>JSONP 怎么工作的？</strong></li></ol><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。 JSONP 就是利用script 标签的跨域能力来发送请求的。</p><ol start="3"><li><p><strong>JSONP 的使用</strong></p><ul><li>html中调用</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">    <span class="token comment">//1. 创建 script 标签</span></span>
<span class="line">    <span class="token keyword">const</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//2. 设置标签的 src 属性</span></span>
<span class="line">    script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://127.0.0.1:8000/check-username?callback=abc&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//3. 将script 添加到body 中</span></span>
<span class="line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>服务器node.js代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/check-username&quot;</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req <span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> callback <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;孙悟空&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//将数据转化为字符串</span></span>
<span class="line">    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//返回结果(一段可执行的JavaScript代码)</span></span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">handle(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="_4-2-2-cors-服务端设置" tabindex="-1"><a class="header-anchor" href="#_4-2-2-cors-服务端设置"><span>4.2.2 CORS(服务端设置)</span></a></h3><p>https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</p><ol><li><p><strong>CORS 是什么？</strong></p><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get 和post 请求。跨域资源共享标准新增了一组HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p></li><li><p><strong>CORS 怎么工作的？</strong> CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应以后就会对响应放行。</p></li><li><p><strong>CORS 的使用</strong></p><p>主要是服务器端的设置：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/testAJAX&quot;</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req <span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//通过res 来设置响应头，来允许跨域请求</span></span>
<span class="line">    <span class="token comment">//res.set(&quot;Access-Control-Allow-Origin&quot;,&quot;http://127.0.0.1:3000&quot;);</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;Access-Control-Allow-Origin&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//允许所有来源访问</span></span>
<span class="line">    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;testAJAX 返回的响应&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4-2-3-vue-cli跨域-开发阶段" tabindex="-1"><a class="header-anchor" href="#_4-2-3-vue-cli跨域-开发阶段"><span>4.2.3 vue-cli跨域(开发阶段)</span></a></h3><p>可以配置一个代理服务器来转发 API 请求，绕过浏览器的同源策略。vue中通过 Vue CLI 的代理，Vue CLI 提供了一个内置的开发服务器（基于 Webpack Dev Server），可以通过配置代理来解决开发环境中的跨域问题，在vue-cli搭建的项目中有一个配置文件vue.config.js,可以在该文件中进行相应的配置解决开发环境的跨域问题。</p><p>在 vue.config.js 文件中进行配置，示例如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 1.指定服务的ip</span></span>
<span class="line">	<span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&quot;192.168.0.128&quot;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token comment">// 2.指定服务的端口</span></span>
<span class="line">	<span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">overlay</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token literal-property property">warnings</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token literal-property property">errors</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token comment">// 3.开发环境进行http的代理</span></span>
<span class="line">	<span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token comment">// 匹配 url 路径的开头</span></span>
<span class="line">		<span class="token string-property property">&#39;/api&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token comment">// 1.路劲只要是/api开头的url都代理到下面这个网站。</span></span>
<span class="line">			<span class="token comment">// 例如：&#39;/api/xxxx&#39; 会代理到 https://119.20.224.137/api/xxxx</span></span>
<span class="line">			<span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://119.20.224.137:8201&#39;</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">			<span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;/api/&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-4-nginx跨域-部署阶段" tabindex="-1"><a class="header-anchor" href="#_4-2-4-nginx跨域-部署阶段"><span>4.2.4 nginx跨域(部署阶段)</span></a></h3><p>在 NGINX 中，可以通过添加 Access-Control-Allow-* 响应头来解决跨域问题。以下是一个常见的配置方法：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line">server <span class="token punctuation">{</span></span>
<span class="line">    listen 80;</span>
<span class="line">    server_name your_domain.com;</span>
<span class="line"> </span>
<span class="line">    location / <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment"># 允许的来源（如前端域名），* 表示允许所有来源</span></span>
<span class="line">        add_header &#39;Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Allow<span class="token punctuation">-</span>Origin&#39; &#39;<span class="token important">*&#39;</span> always;</span>
<span class="line">        <span class="token comment"># 允许的请求方法</span></span>
<span class="line">        add_header &#39;Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Allow<span class="token punctuation">-</span>Methods&#39; &#39;GET<span class="token punctuation">,</span> POST<span class="token punctuation">,</span> PUT<span class="token punctuation">,</span> DELETE<span class="token punctuation">,</span> OPTIONS&#39; always;</span>
<span class="line">        <span class="token comment"># 允许的请求头</span></span>
<span class="line">        add_header &#39;Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Allow<span class="token punctuation">-</span>Headers&#39; &#39;DNT<span class="token punctuation">,</span>User<span class="token punctuation">-</span>Agent<span class="token punctuation">,</span>X<span class="token punctuation">-</span>Requested<span class="token punctuation">-</span>With<span class="token punctuation">,</span>If<span class="token punctuation">-</span>Modified<span class="token punctuation">-</span>Since<span class="token punctuation">,</span>Cache<span class="token punctuation">-</span>Control<span class="token punctuation">,</span>Content<span class="token punctuation">-</span>Type<span class="token punctuation">,</span>Range<span class="token punctuation">,</span>Authorization&#39; always;</span>
<span class="line">        <span class="token comment"># 允许携带凭证（如 Cookies）</span></span>
<span class="line">        add_header &#39;Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Allow<span class="token punctuation">-</span>Credentials&#39; &#39;true&#39; always;</span>
<span class="line">        <span class="token comment"># 预检请求（OPTIONS）的缓存时间</span></span>
<span class="line">        add_header &#39;Access<span class="token punctuation">-</span>Control<span class="token punctuation">-</span>Max<span class="token punctuation">-</span>Age&#39; 1728000 always;</span>
<span class="line"> </span>
<span class="line">        <span class="token comment"># 处理 OPTIONS 预检请求</span></span>
<span class="line">        if ($request_method = &#39;OPTIONS&#39;) <span class="token punctuation">{</span></span>
<span class="line">            return 204;</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">        <span class="token comment"># 你的其他配置，如 proxy_pass 或 root</span></span>
<span class="line">        <span class="token comment"># 示例：反向代理到后端</span></span>
<span class="line">        proxy_pass http<span class="token punctuation">:</span>//backend_server;</span>
<span class="line">        proxy_set_header Host $host;</span>
<span class="line">        proxy_set_header X<span class="token punctuation">-</span>Real<span class="token punctuation">-</span>IP $remote_addr;</span>
<span class="line">        proxy_set_header X<span class="token punctuation">-</span>Forwarded<span class="token punctuation">-</span>For $proxy_add_x_forwarded_for;</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21)]))}const o=s(e,[["render",l]]),r=JSON.parse('{"path":"/script/other/ajax/04.html","title":"四、跨域","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754285665000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"bf54d5db5209f06fb3d25687934eecf69571d546","time":1754285665000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年8月"}]},"filePathRelative":"script/other/ajax/04.md"}');export{o as comp,r as data};
