import{aq as s,ar as a,as as e,at as t}from"./app-Cok9BT0p.js";const p={};function c(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="五、渲染器" tabindex="-1"><a class="header-anchor" href="#五、渲染器"><span>五、渲染器</span></a></h1><p>PixiJS渲染器负责使用WebGL/WebGL2或WebGPU将场景绘制到画布上。这些渲染器是高性能gpu加速引擎，由模块化系统组成，管理从纹理上传到渲染管道的所有内容。</p><p>所有PixiJS渲染器都继承自一个共同的基础，它提供了一致的方法，如 <code>.render()</code> ,  <code>.resize()</code> ，和 <code>.clear()</code> 以及用于管理画布，纹理GC，事件等的共享系统。</p><h2 id="_5-1-渲染器类型" tabindex="-1"><a class="header-anchor" href="#_5-1-渲染器类型"><span>5.1 渲染器类型</span></a></h2><table><thead><tr><th>渲染器</th><th>描述</th><th>状态</th></tr></thead><tbody><tr><td><code>WebGLRenderer</code></td><td>默认渲染器使用WebGL/WebGL2。良好的支撑和稳定。</td><td>推荐</td></tr><tr><td><code>WebGPURenderer</code></td><td>使用WebGPU的现代GPU渲染器。性能更强，还在成熟。</td><td>实验</td></tr><tr><td><code>CanvasRenderer</code></td><td>使用2D画布的后退渲染器。</td><td>即将到来</td></tr></tbody></table><blockquote><p>WebGPU渲染器功能齐全，但是，浏览器实现中的不一致可能导致意外行为。建议在生产应用程序中使用WebGL渲染器。</p></blockquote><h2 id="_5-2-创建渲染器" tabindex="-1"><a class="header-anchor" href="#_5-2-创建渲染器"><span>5.2 创建渲染器</span></a></h2><p>你可以使用 <code>autoDetectRenderer()</code> 来创建环境的最佳渲染器：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> autoDetectRenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">autoDetectRenderer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    preference<span class="token operator">:</span> <span class="token string">&#39;webgpu&#39;</span><span class="token punctuation">,</span> <span class="token comment">// or &#39;webgl&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者明确地构造一个：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> WebGLRenderer<span class="token punctuation">,</span> WebGPURenderer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> renderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebGLRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">await</span> renderer<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-3-渲染场景" tabindex="-1"><a class="header-anchor" href="#_5-3-渲染场景"><span>5.3 渲染场景</span></a></h2><p>要渲染一个场景，你可以使用 <code>render()</code> 方法。这将绘制指定的容器到屏幕或纹理：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或提供一整套选项</span></span>
<span class="line">renderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    target<span class="token operator">:</span> container<span class="token punctuation">,</span></span>
<span class="line">    clear<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 渲染前清除屏幕</span></span>
<span class="line">    transform<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 应用于容器的可选转换</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-4-调整渲染器的大小" tabindex="-1"><a class="header-anchor" href="#_5-4-调整渲染器的大小"><span>5.4 调整渲染器的大小</span></a></h2><p>要调整渲染器的大小，请使用 <code>resize()</code> 方法。这将调整画布大小并更新分辨率：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">renderer<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">,</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_5-5-生成纹理" tabindex="-1"><a class="header-anchor" href="#_5-5-生成纹理"><span>5.5 生成纹理</span></a></h2><p>你可以使用 <code>generateTexture()</code> 方法从容器中生成纹理。这对于从动态内容创建纹理很有用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Sprite <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> texture <span class="token operator">=</span> renderer<span class="token punctuation">.</span><span class="token function">generateTexture</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-6-重置状态" tabindex="-1"><a class="header-anchor" href="#_5-6-重置状态"><span>5.6 重置状态</span></a></h2><p>要重置渲染器的状态，请使用 <code>resetState()</code> 方法。这在将PixiJS与其他库（如Three.js）混合使用时非常有用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Render the Three.js scene</span></span>
<span class="line">    threeRenderer<span class="token punctuation">.</span><span class="token function">resetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    threeRenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>scene<span class="token punctuation">,</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Render the PixiJS stage</span></span>
<span class="line">    pixiRenderer<span class="token punctuation">.</span><span class="token function">resetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    pixiRenderer<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> container<span class="token operator">:</span> stage <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>render<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)]))}const l=s(p,[["render",c]]),r=JSON.parse('{"path":"/animation/pixi/official/05.html","title":"五、渲染器","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752490925000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"08d014805d6447d2221b34fe03fdc2ca18411d66","time":1752490925000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年7月更新"}]},"filePathRelative":"animation/pixi/official/05.md"}');export{l as comp,r as data};
