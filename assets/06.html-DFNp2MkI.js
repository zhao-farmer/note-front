import{aq as s,ar as a,as as p,at as e}from"./app-Cok9BT0p.js";const t="/note-front/framework/angular/base16/079.png",l="/note-front/framework/angular/base16/080.gif",o="/note-front/framework/angular/base16/081.gif",c={};function i(u,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="六、状态管理库-ngrx" tabindex="-1"><a class="header-anchor" href="#六、状态管理库-ngrx"><span>六、状态管理库 NgRx</span></a></h1><h2 id="_6-1-认识ngrx" tabindex="-1"><a class="header-anchor" href="#_6-1-认识ngrx"><span>6.1 认识NgRx</span></a></h2><ol><li><p>认识 Action (动作)</p><ul><li><p>含义：</p><p>Action 是一个描述发生了什么事情的简单对象。它是 Store 中数据的唯一来源，无论是用户交互、网络请求还是其他事件，你都需要通过 dispatch 一个 Action 来告诉 Store 要做什么。</p></li><li><p>关键特性：</p><p>必须有一个 type 属性（字符串），用于唯一标识这个动作。</p><p>可选地包含一个 payload 属性，用来传递数据。</p></li><li><p>用法 (Angular 16+)：</p><ul><li>createAction 函数来创建动作，它提供了更好的类型安全。</li></ul></li><li><p>方法与参数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>                    <span class="token comment">// 第一个参数：Action 类型标识</span></span>
<span class="line">    config<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">|</span> PropsCreator<span class="token punctuation">,</span> <span class="token comment">// 第二个参数：Payload 配置（可选）</span></span>
<span class="line">    options<span class="token operator">?</span><span class="token operator">:</span> ActionOptions          <span class="token comment">// 第三个参数：配置选项（可选，NgRx 16+）</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>第一个参数：Action Type（必需）</p><ul><li><p>含义：Action 的唯一标识符，用于在 reducer 和 effects 中识别不同的 action。</p></li><li><p>约定俗成的格式：<code>[Feature] Action Description</code></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 示例</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadUsers <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&#39;[User API] Load Users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&#39;[Auth] Login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>特点：</p><ul><li><p>必须是字符串</p></li><li><p>应该具有描述性</p></li><li><p>通常使用方括号表示功能模块</p></li></ul></li></ul></li><li><p>第二个参数：Payload 配置（可选）</p><ul><li><p>含义：定义 action 携带的数据结构</p></li><li><p>使用 props&lt;&gt;()</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createAction<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadUsersSuccess <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Load Users Success&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> users<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> totalCount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 定义 payload 类型</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用函数形式（NgRx 16+ 新特性）</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> addUser <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Add User&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> isAdmin<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        user<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> isAdmin <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        timestamp<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toISOString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>第三个参数：配置选项（可选，NgRx 16+）</p><ul><li>含义：提供额外的 action 行为配置</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> searchUsers <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Search Users&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> query<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 配置选项</span></span>
<span class="line">        debounce<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>           <span class="token comment">// 防抖时间（毫秒）</span></span>
<span class="line">        dispatch<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment">// 是否立即分发</span></span>
<span class="line">        <span class="token comment">// 自定义元数据</span></span>
<span class="line">        metadata<span class="token operator">:</span> <span class="token punctuation">{</span> feature<span class="token operator">:</span> <span class="token string">&#39;user-search&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul></li><li><p>Reducer (归约器)</p><ul><li><p>含义：</p><p>Reducer 是一个纯函数。它接收当前的 State 和一个被分发的 Action，然后决定如何根据这个 Action 来更新 State。它负责状态的不可变更新。</p></li><li><p>关键特性：</p><p>纯函数：相同的输入永远得到相同的输出，没有副作用（不改变外部状态、不调用 API 等）。</p><p>不可变性：必须返回一个全新的状态对象，而不是修改原有的状态。</p></li><li><p>用法 (Angular 16+)：</p><p>使用 createReducer 函数和 on 函数来定义如何处理不同的 Action。</p></li><li><p>方法与参数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span></span>
<span class="line">    initialState<span class="token punctuation">,</span>          <span class="token comment">// 第一个参数：初始状态</span></span>
<span class="line">    <span class="token operator">...</span>onHandlers          <span class="token comment">// 第二个参数起：on() 处理器</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>第一个参数：initialState（初始状态）</p><ul><li>含义：定义 reducer 的初始状态值</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span></span>
<span class="line">    users<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">    error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    selectedUserId<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 初始状态</span></span>
<span class="line"><span class="token keyword">const</span> initialState<span class="token operator">:</span> UserState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    users<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    selectedUserId<span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> userReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span></span>
<span class="line">initialState<span class="token punctuation">,</span>  <span class="token comment">// ← 第一个参数</span></span>
<span class="line"><span class="token comment">// ... on() 处理器</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>后续参数：on() 处理器</p><ul><li>含义：定义对不同 action 的响应处理</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token function">on</span><span class="token punctuation">(</span></span>
<span class="line">    action<span class="token punctuation">,</span>                    <span class="token comment">// 要处理的 action</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> newState <span class="token comment">// 状态转换函数</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul></li><li><p>Store (存储)</p><ul><li><p>含义：</p><p>Store 是一个包含应用程序状态的不可变对象树。它是 RxJS 的 Observable 形式的状态容器。组件通过 Store 来获取状态 (select) 和触发状态变化 (dispatch)。</p></li><li><p>关键特性：</p><p>单一可信数据源。</p><p>状态是只读的，只能通过分发 Action 来改变。</p><p>使用 Observables，可以集成到 Angular 的变更检测中。</p></li><li><p>用法：</p><p>主要在组件中注入，用于分发 Action 和选择 (Select) 状态。</p></li><li><p>注入与初始化</p><ol><li><p>依赖注入</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">private</span> store <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>Store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>基本 Select 用法</p><ul><li><p>选择整个状态片段</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">users$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>选择特定属性</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">loading$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>loading<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">error$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>state <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol></li></ul></li><li><p>Selector (选择器)</p><ul><li><p>含义：</p><p>Selector 是一个纯函数，用于从 Store 的状态树中查询和派生数据。它们提供了记忆功能（memoization），可以高效地计算派生数据，避免不必要的重复计算和渲染。</p></li><li><p>用法 (Angular 16+)：</p><p>使用 createSelector 和 createFeatureSelector 函数。</p></li><li><p>方法与参数</p><ol><li><p>createFeatureSelector 方法</p><ul><li><p>语法</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token generic-function"><span class="token function">createFeatureSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>featureName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> MemoizedSelector<span class="token operator">&lt;</span>object<span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>参数说明</p><ul><li><p>featureName: string - 在 StoreModule.forFeature() 中注册的 feature 名称</p></li><li><p>返回: 一个 memoized selector 函数，用于选择特定的 feature state</p></li></ul></li><li><p>示例</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createFeatureSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.state&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 选择整个 user feature state</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUserState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createFeatureSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>createSelector 方法</p><ul><li><p>语法</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token operator">...</span>selectors<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">projector</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> MemoizedSelector<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数说明</p><ul><li>selectors: 一个或多个 input selectors（可以是 createFeatureSelector 或其他 createSelector 的结果）</li><li>projector: 一个函数，接收所有 input selectors 的结果作为参数，返回计算后的值</li></ul></li><li><p>示例</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.state&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectAllUsers <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectUserState<span class="token punctuation">,</span>                    <span class="token comment">// input selector</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> UserState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>users   <span class="token comment">// projector 函数</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol></li></ul></li><li><p>Effect (副作用)</p><ul><li><p>含义：</p><p>Effect 用于处理异步操作和副作用（如 HTTP 请求、访问 localStorage、计时器等）。它监听已分发的 Action，执行某些任务（通常是异步的），然后根据任务结果分发新的 Action。</p></li><li><p>关键特性：</p><p>将副作用与组件和 reducer 隔离开。</p><p>基于 RxJS 的 Observables。</p></li><li><p>用法 (Angular 16+)：</p><p>使用 createEffect 函数。注意：在 Angular 16+ 中，Effect 的默认生命周期策略已更改，通常需要指定 { functional: true } 或使用新的 provideState 和 provideEffects 函数进行注册。</p></li><li><p>方法与参数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token function">createEffect</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function-variable function">effectSource</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Observable<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    options<span class="token operator">?</span><span class="token operator">:</span> EffectConfig</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> EffectRef</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>第一个参数：effectSource 函数</p><ul><li>类型: <code>() =&gt; Observable&lt;Action&gt;</code></li><li>这是一个工厂函数，返回一个 Observable stream。通常使用 RxJS 操作符来处理异步操作。</li></ul></li><li><p>第二个参数：options 配置对象（可选）</p><ul><li>类型: EffectConfig</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">EffectConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    dispatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>      <span class="token comment">// 是否自动dispatch action，默认为true</span></span>
<span class="line">    useEffectsErrorHandler<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// 是否使用错误处理，默认为true</span></span>
<span class="line">    functional<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>    <span class="token comment">// 是否使用函数式effect，默认为false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul></li><li><p>数据流</p><ol><li>组件 dispatch 一个 Action (如 increment())。</li><li>Store 将这个 Action 分发给所有的 Reducer。</li><li>Reducer 根据 Action 的类型，计算出新的状态并返回。Store 用新状态更新。</li><li>如果有 Effect 监听到了这个 Action，它会执行异步任务（如 API 调用），任务完成后，再分发一个新的 Action（如 loadUsersSuccess）回到第 1 步。</li><li>组件 通过 Selector 从 Store 中选择状态，状态变化通过 Observable 推送给组件，组件模板使用 async pipe 订阅并更新视图。</li></ol></li><li><p>数据流示例图</p><p><img src="`+t+`" alt=""></p></li></ol><h2 id="_6-2-完整实例" tabindex="-1"><a class="header-anchor" href="#_6-2-完整实例"><span>6.2 完整实例</span></a></h2><ol><li><p>安装NgRx</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 安装 NgRx</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> @ngrx/store @ngrx/effects</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 可选：开发工具</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> @ngrx/store-devtools</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义模型</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// models/user.model.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AppState</span> <span class="token punctuation">{</span></span>
<span class="line">    counter<span class="token operator">:</span> CounterState<span class="token punctuation">;</span></span>
<span class="line">    users<span class="token operator">:</span> UserState<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CounterState</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">UserState</span> <span class="token punctuation">{</span></span>
<span class="line">    list<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">    error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义 Actions</p><ul><li><p>计数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/counter/counter.actions.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createAction<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&#39;[Counter] Increment&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&#39;[Counter] Decrement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> reset <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&#39;[Counter] Reset&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[Counter] Add&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> setLoading <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[Counter] Set Loading&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> loading<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用户</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/user/user.actions.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createAction<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadUsers <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">&#39;[User] Load Users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadUsersSuccess <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Load Users Success&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> users<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> loadUsersFailure <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Load Users Failure&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> addUser <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Add User&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> user<span class="token operator">:</span> User <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> removeUser <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Remove User&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>定义 Reducers</p><ul><li><p>计数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/counter/counter.reducer.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer<span class="token punctuation">,</span> on <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset<span class="token punctuation">,</span> add<span class="token punctuation">,</span> setLoading <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./counter.actions&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CounterState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> initialState<span class="token operator">:</span> CounterState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span></span>
<span class="line">    initialState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>increment<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>decrement<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>reset<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        count<span class="token operator">:</span> <span class="token number">0</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> value </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>setLoading<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> loading <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        loading </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用户</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/user/user.reducer.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer<span class="token punctuation">,</span> on <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> loadUsers<span class="token punctuation">,</span> loadUsersSuccess<span class="token punctuation">,</span> loadUsersFailure<span class="token punctuation">,</span> addUser<span class="token punctuation">,</span> removeUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.actions&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> initialState<span class="token operator">:</span> UserState <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    error<span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> userReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span></span>
<span class="line">    initialState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>loadUsers<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> </span>
<span class="line">        error<span class="token operator">:</span> <span class="token keyword">null</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>loadUsersSuccess<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> users <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        list<span class="token operator">:</span> users<span class="token punctuation">,</span> </span>
<span class="line">        loading<span class="token operator">:</span> <span class="token boolean">false</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>loadUsersFailure<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        error<span class="token punctuation">,</span> </span>
<span class="line">        loading<span class="token operator">:</span> <span class="token boolean">false</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>addUser<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>state<span class="token punctuation">.</span>list<span class="token punctuation">,</span> user<span class="token punctuation">]</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">on</span><span class="token punctuation">(</span>removeUser<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">        <span class="token operator">...</span>state<span class="token punctuation">,</span> </span>
<span class="line">        list<span class="token operator">:</span> state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>user <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>id <span class="token operator">!==</span> id<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>定义 Selectors</p><ul><li><p>计数</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/counter/counter.selectors.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector<span class="token punctuation">,</span> createFeatureSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CounterState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectCounterState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createFeatureSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>CounterState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectCount <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectCounterState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> CounterState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectCounterLoading <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectCounterState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> CounterState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>loading</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectDoubleCount <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectCount<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用户</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/user/user.selectors.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector<span class="token punctuation">,</span> createFeatureSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUserState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createFeatureSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUsers <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectUserState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> UserState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>list</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUsersLoading <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectUserState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> UserState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>loading</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUsersError <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectUserState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> UserState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>error</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUserCount <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectUsers<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> users<span class="token punctuation">.</span>length</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>定义 Effects</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// store/user/user.effects.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Actions<span class="token punctuation">,</span> createEffect<span class="token punctuation">,</span> ofType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/effects&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">of</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> catchError<span class="token punctuation">,</span> map<span class="token punctuation">,</span> mergeMap<span class="token punctuation">,</span> delay <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> loadUsers<span class="token punctuation">,</span> loadUsersSuccess<span class="token punctuation">,</span> loadUsersFailure <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./user.actions&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserEffects</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> actions$ <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>Actions<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 模拟用户数据</span></span>
<span class="line">    <span class="token keyword">private</span> mockUsers<span class="token operator">:</span> User<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;alice@example.com&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;bob@example.com&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;Charlie&#39;</span><span class="token punctuation">,</span> email<span class="token operator">:</span> <span class="token string">&#39;charlie@example.com&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    loadUsers$ <span class="token operator">=</span> <span class="token function">createEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>actions$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">ofType</span><span class="token punctuation">(</span>loadUsers<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 模拟网络延迟</span></span>
<span class="line">        <span class="token function">mergeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> </span>
<span class="line">            <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mockUsers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token function">map</span><span class="token punctuation">(</span>users <span class="token operator">=&gt;</span> <span class="token function">loadUsersSuccess</span><span class="token punctuation">(</span><span class="token punctuation">{</span> users <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">catchError</span><span class="token punctuation">(</span>error <span class="token operator">=&gt;</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token function">loadUsersFailure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error<span class="token operator">:</span> error<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">,</span> <span class="token punctuation">{</span> functional<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置 App Module</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// app.module.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/platform-browser&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> FormsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/forms&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AppRoutingModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app-routing.module&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AppComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./app.component&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> StoreModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> EffectsModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/effects&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 页面注册</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CounterComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./components/counter.component&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./components/user.component&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这些都是要进行状态管理的配置</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> counterReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/counter/counter.reducer&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> userReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/user/user.reducer&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserEffects <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./store/user/user.effects&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    declarations<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        AppComponent<span class="token punctuation">,</span></span>
<span class="line">        CounterComponent<span class="token punctuation">,</span></span>
<span class="line">        UserComponent<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    imports<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        BrowserModule<span class="token punctuation">,</span></span>
<span class="line">        AppRoutingModule<span class="token punctuation">,</span></span>
<span class="line">        FormsModule<span class="token punctuation">,</span></span>
<span class="line">        StoreModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            counter<span class="token operator">:</span> counterReducer<span class="token punctuation">,</span></span>
<span class="line">            users<span class="token operator">:</span> userReducer</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        EffectsModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">[</span>UserEffects<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    providers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    bootstrap<span class="token operator">:</span> <span class="token punctuation">[</span>AppComponent<span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建服务（可选）</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// services/user.service.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> inject<span class="token punctuation">,</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> HttpClient <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/common/http&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    providedIn<span class="token operator">:</span> <span class="token string">&#39;root&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> http <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>HttpClient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建组件</p><ul><li><p>计数组件</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// components/counter.component.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/common&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> </span>
<span class="line">    increment<span class="token punctuation">,</span> </span>
<span class="line">    decrement<span class="token punctuation">,</span> </span>
<span class="line">    reset<span class="token punctuation">,</span> </span>
<span class="line">    add<span class="token punctuation">,</span> </span>
<span class="line">    setLoading </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store/counter/counter.actions&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> </span>
<span class="line">    selectCount<span class="token punctuation">,</span> </span>
<span class="line">    selectDoubleCount<span class="token punctuation">,</span> </span>
<span class="line">    selectCounterLoading </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store/counter/counter.selectors&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    selector<span class="token operator">:</span> <span class="token string">&#39;app-counter&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    imports<span class="token operator">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">        &lt;div class=&quot;counter&quot;&gt;</span>
<span class="line">        &lt;h2&gt;计数器示例&lt;/h2&gt;</span>
<span class="line">        </span>
<span class="line">        &lt;div *ngIf=&quot;loading$ | async&quot; class=&quot;loading&quot;&gt;加载中...&lt;/div&gt;</span>
<span class="line">        </span>
<span class="line">        &lt;p&gt;当前值: {{ count$ | async }}&lt;/p&gt;</span>
<span class="line">        &lt;p&gt;双倍值: {{ doubleCount$ | async }}&lt;/p&gt;</span>
<span class="line">        </span>
<span class="line">        &lt;div class=&quot;buttons&quot;&gt;</span>
<span class="line">            &lt;button (click)=&quot;onIncrement()&quot; [disabled]=&quot;loading$ | async&quot;&gt;+1&lt;/button&gt;</span>
<span class="line">            &lt;button (click)=&quot;onDecrement()&quot; [disabled]=&quot;loading$ | async&quot;&gt;-1&lt;/button&gt;</span>
<span class="line">            &lt;button (click)=&quot;onAdd(5)&quot; [disabled]=&quot;loading$ | async&quot;&gt;+5&lt;/button&gt;</span>
<span class="line">            &lt;button (click)=&quot;onReset()&quot; [disabled]=&quot;loading$ | async&quot;&gt;重置&lt;/button&gt;</span>
<span class="line">            &lt;button (click)=&quot;toggleLoading()&quot;&gt;</span>
<span class="line">            {{ (loading$ | async) ? &#39;停止加载&#39; : &#39;开始加载&#39; }}</span>
<span class="line">            &lt;/button&gt;</span>
<span class="line">        &lt;/div&gt;</span>
<span class="line">        &lt;/div&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    styles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">        .counter { padding: 20px; border: 1px solid #ccc; margin: 10px; }</span>
<span class="line">        .loading { color: blue; font-weight: bold; }</span>
<span class="line">        .buttons button { margin: 5px; padding: 8px 12px; }</span>
<span class="line">        button:disabled { opacity: 0.5; }</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CounterComponent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> store <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>Store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    count$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    doubleCount$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectDoubleCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    loading$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectCounterLoading<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onAdd</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">toggleLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setLoading</span><span class="token punctuation">(</span><span class="token punctuation">{</span> loading<span class="token operator">:</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loading$ <span class="token operator">|</span> async<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用户组件</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// components/user.component.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CommonModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/common&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@ngrx/store&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> </span>
<span class="line">    loadUsers<span class="token punctuation">,</span> </span>
<span class="line">    addUser<span class="token punctuation">,</span> </span>
<span class="line">    removeUser </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store/user/user.actions&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> </span>
<span class="line">    selectUsers<span class="token punctuation">,</span> </span>
<span class="line">    selectUsersLoading<span class="token punctuation">,</span> </span>
<span class="line">    selectUsersError<span class="token punctuation">,</span></span>
<span class="line">    selectUserCount </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../store/user/user.selectors&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../../models/user.model&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    selector<span class="token operator">:</span> <span class="token string">&#39;app-user&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    standalone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    imports<span class="token operator">:</span> <span class="token punctuation">[</span>CommonModule<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">        &lt;div class=&quot;user&quot;&gt;</span>
<span class="line">            &lt;h2&gt;用户管理示例&lt;/h2&gt;</span>
<span class="line">            </span>
<span class="line">            &lt;div *ngIf=&quot;loading$ | async&quot; class=&quot;loading&quot;&gt;加载用户中...&lt;/div&gt;</span>
<span class="line">            &lt;div *ngIf=&quot;error$ | async as error&quot; class=&quot;error&quot;&gt;错误: {{ error }}&lt;/div&gt;</span>
<span class="line">            </span>
<span class="line">            &lt;p&gt;用户数量: {{ userCount$ | async }}&lt;/p&gt;</span>
<span class="line">            </span>
<span class="line">            &lt;button (click)=&quot;onLoadUsers()&quot; [disabled]=&quot;loading$ | async&quot;&gt;</span>
<span class="line">                加载用户</span>
<span class="line">            &lt;/button&gt;</span>
<span class="line">            </span>
<span class="line">            &lt;button (click)=&quot;onAddUser()&quot; [disabled]=&quot;loading$ | async&quot;&gt;</span>
<span class="line">                添加测试用户</span>
<span class="line">            &lt;/button&gt;</span>
<span class="line">            </span>
<span class="line">            &lt;div class=&quot;user-list&quot;&gt;</span>
<span class="line">                &lt;h3&gt;用户列表:&lt;/h3&gt;</span>
<span class="line">                &lt;div *ngFor=&quot;let user of users$ | async&quot; class=&quot;user-item&quot;&gt;</span>
<span class="line">                    {{ user.name }} ({{ user.email }})</span>
<span class="line">                    &lt;button (click)=&quot;onRemoveUser(user.id)&quot;&gt;删除&lt;/button&gt;</span>
<span class="line">                &lt;/div&gt;</span>
<span class="line">            &lt;/div&gt;</span>
<span class="line">        &lt;/div&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    styles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">        .user { padding: 20px; border: 1px solid #ccc; margin: 10px; }</span>
<span class="line">        .loading { color: blue; }</span>
<span class="line">        .error { color: red; }</span>
<span class="line">        .user-item { margin: 5px; padding: 10px; border: 1px solid #eee; }</span>
<span class="line">        button { margin-left: 10px; }</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserComponent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> store <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>Store<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> nextId <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    users$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectUsers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    loading$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectUsersLoading<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    error$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectUsersError<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    userCount$<span class="token operator">:</span> Observable<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>selectUserCount<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onLoadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">loadUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> newUser<span class="token operator">:</span> User <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            id<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token operator">++</span><span class="token punctuation">,</span></span>
<span class="line">            name<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">用户</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">            email<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">user</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nextId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@example.com</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token operator">:</span> newUser <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">onRemoveUser</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>主组件</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// app.component.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    selector<span class="token operator">:</span> <span class="token string">&#39;app-root&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">        &lt;h1&gt;Angular 16 + NgRx 示例&lt;/h1&gt;</span>
<span class="line">        &lt;router-outlet&gt;&lt;/router-outlet&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span></span>
<span class="line">    title <span class="token operator">=</span> <span class="token string">&#39;ng-project&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>路由</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// app-routing.module.ts</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NgModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/core&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> RouterModule<span class="token punctuation">,</span> Routes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@angular/router&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> CounterComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./components/counter.component&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> UserComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./components/user.component&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> routes<span class="token operator">:</span> Routes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> redirectTo<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> pathMatch<span class="token operator">:</span> <span class="token string">&#39;full&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>component<span class="token operator">:</span>UserComponent<span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">&quot;user用户&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;counter&quot;</span><span class="token punctuation">,</span>component<span class="token operator">:</span>CounterComponent<span class="token punctuation">,</span> title<span class="token operator">:</span><span class="token string">&quot;Counter计数&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator"><span class="token at operator">@</span><span class="token function">NgModule</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    imports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    exports<span class="token operator">:</span> <span class="token punctuation">[</span>RouterModule<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppRoutingModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>运行结果</p><ul><li><p>计数</p><p><img src="`+l+'" alt=""></p></li><li><p>用户</p><p><img src="'+o+`" alt=""></p></li></ul></li></ol><h2 id="_6-3-自己的总结" tabindex="-1"><a class="header-anchor" href="#_6-3-自己的总结"><span>6.3 自己的总结</span></a></h2><ol><li><p>在app.component.ts 中将数据与reducer结合起来</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">StoreModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  users<span class="token operator">:</span> userReducer</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>其中对象中第一个参数 是 reducer 中state</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"> <span class="token function">on</span><span class="token punctuation">(</span>loadUsers<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>state<span class="token punctuation">,</span></span>
<span class="line">    loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    error<span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>selectors 的 createFeatureSelector 的参数是 StoreModule.forRoot 设置的参数名</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUserState <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createFeatureSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>UserState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>selectors 的 createSelector 中的 state 也是设置中 users</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> selectUsers <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span></span>
<span class="line">    selectUserState<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token operator">:</span> UserState<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>list</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>actions中的第一个参数，除了保持不重复，没有其他用处</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> addUser <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;[User] Add User&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token generic-function"><span class="token function">props</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span> user<span class="token operator">:</span> User <span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,7)]))}const k=s(c,[["render",i]]),d=JSON.parse('{"path":"/framework/angular/base16/06.html","title":"六、状态管理库 NgRx","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1756103336000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"20f6913b2d2473e2422a33fde2d9aa7c6833f328","time":1756103336000,"email":"857899180@qq.com","author":"zhao-farmer","message":"8月提交代码"}]},"filePathRelative":"framework/angular/base16/06.md"}');export{k as comp,d as data};
