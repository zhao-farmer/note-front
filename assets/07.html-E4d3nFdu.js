import{aq as s,ar as a,as as p,at as e}from"./app-Cok9BT0p.js";const t="/note-front/animation/pixi/official/image/009.png",c="/note-front/animation/pixi/official/image/010.png",l="/note-front/animation/pixi/official/image/011.png",o="/note-front/animation/pixi/official/image/012.png",i="/note-front/animation/pixi/official/image/013.png",u="/note-front/animation/pixi/official/image/014.png",r="/note-front/animation/pixi/official/image/015.png",k="/note-front/animation/pixi/official/image/016.png",d="/note-front/animation/pixi/official/image/017.png",m="/note-front/animation/pixi/official/image/018.png",v="/note-front/animation/pixi/official/image/019.png",b="/note-front/animation/pixi/official/image/020.png",h="/note-front/animation/pixi/official/image/021.png",g="/note-front/animation/pixi/official/image/022.png",y={};function f(x,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="七、场景相关" tabindex="-1"><a class="header-anchor" href="#七、场景相关"><span>七、场景相关</span></a></h1><p>在PixiJS中，场景对象是应用程序显示层次结构的构建块。它们包括容器、精灵、文本、图形和其他构成场景图形的可绘制实体——决定渲染什么、如何渲染以及以什么顺序渲染的树状结构。</p><h2 id="_7-1-场景对象" tabindex="-1"><a class="header-anchor" href="#_7-1-场景对象"><span>7.1 场景对象</span></a></h2><h3 id="_7-1-1-容器与叶节点" tabindex="-1"><a class="header-anchor" href="#_7-1-1-容器与叶节点"><span>7.1.1 容器与叶节点</span></a></h3><p>PixiJS中的场景对象可以分为容器和叶子节点：</p><ol><li>容器</li></ol><p><code>Container</code> 是v8中所有场景对象的基类（取代旧的 <code>DisplayObject</code> ）。</p><ul><li>可以生孩子。</li><li>通常用于对对象进行分组并对组应用转换（位置、缩放、旋转）。</li><li>例如： <code>Application.stage</code> ，自定义组。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">group<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>spriteA<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">group<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>spriteB<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>叶节点</li></ol><p>叶节点是可渲染的对象，不应该有子节点。在v8中，只有容器才应该有子容器。</p><p>叶节点的例子包括：</p><ul><li><code>Sprite</code></li><li><code>Text</code></li><li><code>Graphics</code></li><li><code>Mesh</code></li><li><code>TilingSprite</code></li><li><code>HTMLText</code></li></ul><p>尝试向叶节点添加子节点不会导致运行时错误，但是，您可能会遇到意外的呈现行为。因此，如果需要嵌套，则将叶节点包裹在 <code>Container</code> 中。</p><p><strong>v8之前（在v8中无效）：</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>anotherSprite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ Invalid in v8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>v8的方法:</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">group<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">group<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>anotherSprite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ✅ Valid</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-2-转换" tabindex="-1"><a class="header-anchor" href="#_7-1-2-转换"><span>7.1.2 转换</span></a></h3><p>PixiJS中的所有场景对象都有几个属性来控制它们的位置、旋转、比例和alpha。这些属性由子对象继承，允许您轻松地对对象组应用转换。</p><p>您将经常使用这些属性来定位和动画场景中的对象。</p><table><thead><tr><th>财产</th><th>描述</th></tr></thead><tbody><tr><td><strong>位置</strong></td><td>X和y位置以像素为单位给出，并改变对象相对于其父对象的位置，也可以直接使用 <code>object.x</code>  /  <code>object.y</code></td></tr><tr><td><strong>旋转</strong></td><td>旋转以弧度为单位指定，并顺时针旋转对象（0.0 - 2 * Math.PI）</td></tr><tr><td><strong>角</strong></td><td>角度是旋转的别名，以度而不是弧度指定（0.0 - 360.0）</td></tr><tr><td><strong>主</strong></td><td>对象旋转的点，以像素为单位-也为子对象设置原点</td></tr><tr><td><strong>α</strong></td><td>不透明度从0.0（完全透明）到1.0（完全不透明），由子继承</td></tr><tr><td><strong>规模</strong></td><td>Scale被指定为百分比，1.0为100%或实际大小，并且可以为x和y轴独立设置</td></tr><tr><td><strong>斜</strong></td><td>Skew在x和y方向变换对象，类似于CSS Skew（）函数，并以弧度指定</td></tr><tr><td><strong>锚吗?</strong></td><td>锚点是一个基于百分比的精灵位置和旋转偏移量。这与 <code>pivot</code> 属性不同，后者是基于像素的偏移量。</td></tr></tbody></table><p><strong>锚点vs枢轴</strong></p><p>一些叶节点有一个名为 <code>anchor</code> 的附加属性，这是节点位置和旋转的基于百分比的偏移量。这与 <code>pivot</code> 属性不同，后者是基于像素的偏移量。在定位或旋转节点时，理解锚点和枢轴点之间的区别至关重要。</p><blockquote><p>设置枢轴或锚点可以可视化地移动节点。这与CSS不同，在CSS中， <code>transform-origin</code> 不会影响元素的位置。</p></blockquote><ol><li><p>锚点</p><ul><li>仅在 <code>Sprite</code>上可用</li><li>定义为规范化值 <code>(0.0 to 1.0)</code></li><li><code>(0, 0)</code> 为左上方， <code>(0.5, 0.5)</code> 为中心</li><li>改变位置和旋转原点</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">sprite<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// center</span></span>
<span class="line">sprite<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// Rotate 45 degrees around the center</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>枢轴</p><ul><li>在所有 <code>Container</code> 服务器上可用</li><li>以像素定义，未规范化</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>pivot<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Center of the container</span></span>
<span class="line">container<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// Rotate 45 degrees around the pivot</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_7-1-3-测量范围" tabindex="-1"><a class="header-anchor" href="#_7-1-3-测量范围"><span>7.1.3 测量范围</span></a></h3><p>在PixiJS中有两种类型的边界：</p><ul><li>局部边界表示对象在其自身坐标空间中的尺寸。使用 <code>getLocalBounds()</code> 。</li><li>全局边界用世界坐标表示对象的边界框。使用 <code>getBounds()</code> 。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> local <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getLocalBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> global <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果性能很重要，您还可以提供自定义 <code>boundsArea</code> ，以完全避免每个子节点的度量。</p><p><strong>改变大小</strong></p><p>要更改容器的大小，可以使用 <code>width</code> 和 <code>height</code> 属性。这将缩放容器以适应指定的尺寸：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别设置 <code>width</code> 和 <code>height</code> 可能是一个昂贵的操作，因为它需要重新计算容器及其子容器的边界。为了避免这种情况，你可以使用 <code>setSize()</code> 同时设置两个属性：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> size <span class="token operator">=</span> container<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { width: 100, height: 200 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方法比单独设置 <code>width</code> 和 <code>height</code> 更有效，因为它只需要计算一次边界。</p><h3 id="_7-1-4-遮罩场景对象" tabindex="-1"><a class="header-anchor" href="#_7-1-4-遮罩场景对象"><span>7.1.4 遮罩场景对象</span></a></h3><p>PixiJS支持遮罩，允许您根据另一个对象的形状限制场景对象的可见区域。 这对于创建裁剪、显示或隐藏场景部分等效果非常有用。</p><ol><li><p>遮罩的类型</p><ul><li>基于图形的蒙版：使用 <code>Graphics</code> 对象来定义形状。</li><li>基于精灵的蒙版：使用 <code>Sprite</code> 或其他可渲染对象。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0x000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> maskedSprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">maskedSprite<span class="token punctuation">.</span>mask <span class="token operator">=</span> shape<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>maskedSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>反向遮罩</p><p>要创建一个反向掩码，您可以使用 <code>setMask</code> 属性并将其 <code>inverse</code> 选项设置为 <code>true</code> 。这将渲染蒙版以外的所有内容。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> inverseMask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0x000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> maskedContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">maskedContainer<span class="token punctuation">.</span><span class="token function">setMask</span><span class="token punctuation">(</span><span class="token punctuation">{</span> mask<span class="token operator">:</span> inverseMask<span class="token punctuation">,</span> inverse<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">maskedContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>inverseMask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>maskedContainer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>遮罩注意事项</p><ul><li>不渲染遮罩；它只用于定义可见区域。但是，必须将其添加到显示列表中。</li><li>每个对象只能分配一个遮罩。</li><li>对于高级混合，使用alpha蒙版或滤镜。</li></ul></li></ol><h3 id="_7-1-5-过滤器" tabindex="-1"><a class="header-anchor" href="#_7-1-5-过滤器"><span>7.1.5 过滤器</span></a></h3><p>容器对象的另一个常见用途是作为过滤内容的宿主。滤镜是一个高级的WebGL/ webgpu功能，允许PixiJS执行逐像素效果，如模糊和位移。通过在容器上设置过滤器，在容器的内容呈现之后，过滤器将处理容器所包含的屏幕区域。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlurFilter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> strength<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> quality<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> kernelSize<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span>filters <span class="token operator">=</span> <span class="token punctuation">[</span>filter<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>过滤器的使用应该有所节制。如果在场景中过于频繁地使用，它们可能会降低性能并增加内存使用。</p></blockquote><p>以下是PixiJS中默认可用的过滤器列表。但是，有一个包含更多过滤器的社区存储库。</p><table><thead><tr><th>过滤器</th><th>描述</th></tr></thead><tbody><tr><td>AlphaFilter</td><td>类似于设置 <code>alpha</code> 属性，但将Container扁平化，而不是单独应用于子元素。</td></tr><tr><td>BlurFilter</td><td>应用模糊效果</td></tr><tr><td>ColorMatrixFilter</td><td>颜色矩阵是一种灵活的方法，可以应用更复杂的色调或颜色变换（例如，棕褐色色调）。</td></tr><tr><td>DisplacementFilter</td><td>位移贴图创建视觉偏移像素，例如创建波浪水效果。</td></tr><tr><td>NoiseFilter</td><td>创建随机噪声（例如，颗粒效果）。</td></tr></tbody></table><p>实际上，我们提供的每个Filter都是用glsl（用于WebGL）和wgsl（用于WebGPU）编写的。这意味着所有的过滤器都应该在两个渲染器上工作。</p><h3 id="_7-1-6-着色" tabindex="-1"><a class="header-anchor" href="#_7-1-6-着色"><span>7.1.6 着色</span></a></h3><p>你可以通过设置 <code>tint</code> 属性来着色任何场景对象。它修改渲染像素的颜色，类似于在对象上增加色彩。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>tint <span class="token operator">=</span> <span class="token number">0xff0000</span><span class="token punctuation">;</span> <span class="token comment">// Red tint</span></span>
<span class="line">sprite<span class="token punctuation">.</span>tint <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Red tint</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tint</code> 由子对象继承，除非它们自己指定。如果你的场景只有一部分需要着色，把它放在一个单独的容器中。</p><p><code>0xFFFFFF</code> 禁用着色。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>tint <span class="token operator">=</span> <span class="token number">0x00ff00</span><span class="token punctuation">;</span> <span class="token comment">// Green tint</span></span>
<span class="line">sprite<span class="token punctuation">.</span>tint <span class="token operator">=</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span> <span class="token comment">// No tint</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PixiJS支持多种颜色格式，您可以从color文档中找到更多信息。</p><h3 id="_7-1-7-混合模式" tabindex="-1"><a class="header-anchor" href="#_7-1-7-混合模式"><span>7.1.7 混合模式</span></a></h3><p>混合模式决定了重叠物体的颜色如何组合。PixiJS支持多种混合模式，包括：</p><ul><li><code>normal</code> ：默认混合模式。</li><li><code>add</code> ：添加源像素和目标像素的颜色。</li><li><code>multiply</code> ：将源像素和目标像素的颜色相乘。</li><li><code>screen</code> ：将颜色反转，将它们相乘，然后再次反转。</li></ul><p>我们还支持许多更高级的混合模式，如 <code>subtract</code> ,  <code>difference</code> ,  <code>overlay</code> 。你可以在混合模式文档中找到混合模式的完整列表。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>blendMode <span class="token operator">=</span> <span class="token string">&#39;multiply&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Multiply blend mode</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-1-8-交互" tabindex="-1"><a class="header-anchor" href="#_7-1-8-交互"><span>7.1.8 交互</span></a></h3><p>PixiJS提供了一个强大的交互系统，允许您处理用户输入事件，如点击/悬停。要在场景对象上启用交互，可以简单地将其 <code>interactive</code> 属性设置为 <code>true</code> 。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>interactive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Sprite clicked!&#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们有一个关于交互的详细指南，涵盖了如何设置和管理交互，包括命中测试、指针事件等等。我们强烈建议大家去看看。</p><h3 id="_7-1-9-使用-onrender" tabindex="-1"><a class="header-anchor" href="#_7-1-9-使用-onrender"><span>7.1.9 使用 <code>onRender</code></span></a></h3><p><code>onRender</code> 回调允许您在渲染场景对象时每帧运行逻辑。这对于轻量级动画和更新逻辑很有用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function-variable function">onRender</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    container<span class="token punctuation">.</span>rotation <span class="token operator">+=</span> <span class="token number">0.01</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：在PixiJS v8中，这取代了常见的v7模式重写 <code>updateTransform</code> ，不再每帧运行。 <code>onRender</code> 函数注册到容器所属的渲染组。</p></blockquote><p>删除回调函数：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">container<span class="token punctuation">.</span>onRender <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_7-2-容器" tabindex="-1"><a class="header-anchor" href="#_7-2-容器"><span>7.2 容器</span></a></h2><p><code>Container</code> 类是PixiJS场景图系统的基础。容器充当场景对象组，允许您构建复杂的层次结构，组织渲染层，并对对象组应用转换或效果。</p><h3 id="_7-2-1-什么是容器-​" tabindex="-1"><a class="header-anchor" href="#_7-2-1-什么是容器-​"><span>7.2.1 什么是容器？​</span></a></h3><p><code>Container</code> 是一个通用节点，可以容纳其他显示对象，包括其他容器。它用于构建场景、应用转换、管理渲染和交互。</p><p>容器不会直接呈现。相反，他们把渲染委托给他们的子项。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Container<span class="token punctuation">,</span> Sprite <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;bunny.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">group<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-2-管理子项" tabindex="-1"><a class="header-anchor" href="#_7-2-2-管理子项"><span>7.2.2 管理子项</span></a></h3><p>PixiJS提供了一个强大的API来添加、删除、重新排序和交换容器中的子节点：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>child1<span class="token punctuation">,</span> child2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">addChildAt</span><span class="token punctuation">(</span>child1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">swapChildren</span><span class="token punctuation">(</span>child1<span class="token punctuation">,</span> child2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您还可以通过索引删除子节点或删除范围内的所有子节点：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">removeChildAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">removeChildren</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当移动到另一个容器时保持child的world变换，使用 <code>reparentChild</code> 或 <code>reparentChildAt</code> ：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">otherContainer<span class="token punctuation">.</span><span class="token function">reparentChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>事件</p><p>当添加或删除子容器时，容器会发出事件：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">group<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;childAdded&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">group<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;childRemoved&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>发现孩子</p><p>容器支持使用相关方法通过 <code>label</code> 搜索子节点：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&#39;enemy&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">getChildByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;enemy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">getChildrenByLabel</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^enemy</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// all children whose label starts with &quot;enemy&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 <code>deep = true</code> 递归地搜索所有后代。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">getChildByLabel</span><span class="token punctuation">(</span><span class="token string">&#39;ui&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>排序的孩子</p><p>使用 <code>zIndex</code> 和 <code>sortableChildren</code> 来控制容器内的渲染顺序：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">child1<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">child2<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span>sortableChildren <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>sortChildren()</code> 手动重新排序。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">sortChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>要谨慎地使用这个特性，因为对于大量的子节点来说，排序可能会很昂贵。</p></blockquote></li></ul><h3 id="_7-2-3-使用渲染组进行优化" tabindex="-1"><a class="header-anchor" href="#_7-2-3-使用渲染组进行优化"><span>7.2.3 使用渲染组进行优化</span></a></h3><p>容器可以通过设置 <code>isRenderGroup = true</code> 或调用 <code>enableRenderGroup()</code> 来提升呈现组。</p><p>对UI层、粒子系统或大型移动子树使用渲染组。 请参阅渲染组指南了解更多细节。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> uiLayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isRenderGroup<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-2-4-缓存为纹理" tabindex="-1"><a class="header-anchor" href="#_7-2-4-缓存为纹理"><span>7.2.4 缓存为纹理</span></a></h3><p>PixiJS中的 <code>cacheAsTexture</code> 函数是优化应用程序渲染的强大工具。通过将容器及其子容器渲染为纹理， <code>cacheAsTexture</code> 可以显著提高静态或不经常更新的容器的性能。</p><p>当你设置 <code>container.cacheAsTexture()</code> 时，容器被渲染为纹理。后续渲染重用此纹理，而不是渲染容器的所有子元素。这种方法对于具有许多静态元素的容器特别有用，因为它减少了呈现工作负载。</p><p>请注意</p><p><code>cacheAsTexture</code> 是PixiJS v8的等效先前的 <code>cacheAsBitmap</code> 功能。如果从v7或更早版本迁移，只需将代码中的 <code>cacheAsBitmap</code> 替换为 <code>cacheAsTexture</code> 。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;bunny.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>sprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 启用缓存作为纹理</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">cacheAsTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 如果容器发生变化，则更新纹理</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">updateCacheTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 禁用缓存作为纹理</span></span>
<span class="line">container<span class="token punctuation">.</span><span class="token function">cacheAsTexture</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-4-缓存为纹理具体使用" tabindex="-1"><a class="header-anchor" href="#_7-2-4-缓存为纹理具体使用"><span>7.2.4 缓存为纹理具体使用</span></a></h3><h4 id="_7-2-4-1-在pixijs中使用-cacheastexture" tabindex="-1"><a class="header-anchor" href="#_7-2-4-1-在pixijs中使用-cacheastexture"><span>7.2.4.1 在PixiJS中使用 <code>cacheAsTexture</code></span></a></h4><p>PixiJS中的 <code>cacheAsTexture</code> 函数是优化应用程序渲染的强大工具。通过将容器及其子容器渲染为纹理， <code>cacheAsTexture</code> 可以显著提高静态或不经常更新的容器的性能。让我们探讨一下如何有效地使用它，以及它的好处和注意事项。</p><p>请注意</p><p><code>cacheAsTexture</code> 是PixiJS v8的等效先前的 <code>cacheAsBitmap</code> 功能。如果从v7或更早版本迁移，只需将代码中的 <code>cacheAsBitmap</code> 替换为 <code>cacheAsTexture</code> 。</p><hr><h4 id="_7-2-4-2-cacheastexture-是什么-​" tabindex="-1"><a class="header-anchor" href="#_7-2-4-2-cacheastexture-是什么-​"><span>7.2.4.2 <code>cacheAsTexture</code> 是什么？​</span></a></h4><p>当你设置 <code>container.cacheAsTexture()</code> 时，容器被渲染为纹理。后续渲染重用此纹理，而不是渲染容器的所有子元素。这种方法对于具有许多静态元素的容器特别有用，因为它减少了呈现工作负载。</p><p>要在改变容器后更新纹理，调用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">updateCacheTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>要关闭它，请拨打：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">cacheAsTexture</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="_7-2-4-3-基本用法" tabindex="-1"><a class="header-anchor" href="#_7-2-4-3-基本用法"><span>7.2.4.3 基本用法</span></a></h4><p>下面的例子演示了如何使用 <code>cacheAsTexture</code> ：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> <span class="token constant">PIXI</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create a new application</span></span>
<span class="line">    <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Initialize the application</span></span>
<span class="line">    <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&#39;#1099bb&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">resizeTo</span><span class="token operator">:</span> window <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Append the application canvas to the document body</span></span>
<span class="line">    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// load sprite sheet..</span></span>
<span class="line">    <span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;https://pixijs.com/assets/spritesheet/monsters.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// holder to store aliens</span></span>
<span class="line">    <span class="token keyword">const</span> aliens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> alienFrames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;eggHead.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;flowerTop.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;helmlok.png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;skully.png&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// create an empty container</span></span>
<span class="line">    <span class="token keyword">const</span> alienContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    alienContainer<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span></span>
<span class="line">    alienContainer<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>alienContainer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// add a bunch of aliens with textures from image paths</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> frameName <span class="token operator">=</span> alienFrames<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// create an alien using the frame name..</span></span>
<span class="line">        <span class="token keyword">const</span> alien <span class="token operator">=</span> Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>frameName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        alien<span class="token punctuation">.</span>tint <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        alien<span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800</span> <span class="token operator">-</span> <span class="token number">400</span><span class="token punctuation">;</span></span>
<span class="line">        alien<span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">600</span> <span class="token operator">-</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="line">        alien<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">        alien<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">        aliens<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        alienContainer<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>alien<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// this will cache the container and its children as a single texture</span></span>
<span class="line">    <span class="token comment">// so instead of drawing 100 sprites, it will draw a single texture!</span></span>
<span class="line">    alienContainer<span class="token punctuation">.</span><span class="token function">cacheAsTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中， <code>container</code> 及其子纹理被渲染为单个纹理，减少了绘制场景时的渲染开销。</p><p>试试这里的例子。</p><h4 id="_7-2-4-4-高级用法" tabindex="-1"><a class="header-anchor" href="#_7-2-4-4-高级用法"><span>7.2.4.4 高级用法</span></a></h4><p>你可以传递一个与纹理源选项非常相似的配置对象，而不是使用true来启用cacheAsTexture。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">cacheAsTexture</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    resolution<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    antialias<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>resolution</code> 是纹理的分辨率。默认情况下，这与您的渲染器或应用程序相同。</li><li><code>antialias</code> 是用于纹理的抗混叠模式。就像分辨率一样，这默认为渲染器或应用程序的抗混叠模式。</li></ul><hr><h4 id="_7-2-4-5-cacheastexture-的好处" tabindex="-1"><a class="header-anchor" href="#_7-2-4-5-cacheastexture-的好处"><span>7.2.4.5 <code>cacheAsTexture</code> 的好处</span></a></h4><ul><li>性能提升：将复杂的容器渲染为单个纹理，避免了在每一帧中单独处理每个子元素的需要。</li><li>针对静态内容进行了优化：非常适合具有静态或很少更新的子元素的容器。</li></ul><hr><h4 id="_7-2-4-6-先进的细节" tabindex="-1"><a class="header-anchor" href="#_7-2-4-6-先进的细节"><span>7.2.4.6 先进的细节</span></a></h4><ul><li>内存权衡：每个缓存纹理都需要GPU内存。使用 <code>cacheAsTexture</code> 以增加内存使用换取渲染速度。</li><li>GPU限制：如果你的容器太大（例如，超过4096x4096像素），纹理可能无法缓存，这取决于GPU限制。</li></ul><hr><h4 id="_7-2-4-7-它是如何在内部工作的" tabindex="-1"><a class="header-anchor" href="#_7-2-4-7-它是如何在内部工作的"><span>7.2.4.7 它是如何在内部工作的</span></a></h4><p>在底层， <code>cacheAsTexture</code> 将容器转换为渲染组并将其渲染为纹理。它使用与过滤器相同的纹理缓存机制：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">enableRenderGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">container<span class="token punctuation">.</span>renderGroup<span class="token punctuation">.</span>cacheAsTexture <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>一旦纹理被缓存，通过 <code>updateCacheTexture()</code> 更新它是有效的，并且产生最小的开销。它和正常渲染容器一样快。</p><hr><h4 id="_7-2-4-8-最佳实践" tabindex="-1"><a class="header-anchor" href="#_7-2-4-8-最佳实践"><span>7.2.4.8 最佳实践</span></a></h4><ul><li><p>需要做的</p><ul><li>用于静态内容：将 <code>cacheAsTexture</code> 应用于具有不经常更改元素的容器，例如具有静态装饰的UI面板。</li><li>利用性能：使用 <code>cacheAsTexture</code> 将复杂的容器渲染为单个纹理，减少每帧单独处理每个子元素的开销。这对于包含昂贵效果（如过滤器）的容器尤其有用。</li><li>反锯齿开关：将反锯齿设置为false可以略微提高性能，但纹理可能会在其子边缘周围看起来更像素化。</li><li>分辨率：根据你的情况调整分辨率，如果有些东西被缩小了，你可以使用更低的分辨率。如果某些东西按比例放大，您可能需要使用更高的分辨率。但请注意，分辨率越高，纹理和内存占用就越大。</li></ul></li><li><p>不需要做的</p><ul><li>适用于非常大的容器：避免在太大的容器上使用 <code>cacheAsTexture</code> （例如，超过4096x4096像素），因为它们可能由于GPU限制而无法缓存。相反，把它们分成更小的容器。</li><li>过度使用动态内容：在容器上频繁地打开/关闭 <code>cacheAsTexture</code> ，因为这会导致不断地重新缓存，从而抵消其好处。它最好缓存为纹理当你一次，然后使用 <code>updateCacheTexture</code> 更新它。</li><li>适用于稀疏内容：对于元素很少或内容稀疏的容器，不要使用 <code>cacheAsTexture</code> ，性能提升可以忽略。</li><li>忽略内存影响：注意GPU内存的使用。每个缓存的纹理都会消耗内存，因此过度使用 <code>cacheAsTexture</code> 可能会导致资源限制。</li></ul></li></ul><h4 id="_7-2-4-9-陷阱" tabindex="-1"><a class="header-anchor" href="#_7-2-4-9-陷阱"><span>7.2.4.9 陷阱</span></a></h4><ul><li><p>渲染依赖于场景可见性：缓存仅在包含场景被渲染时更新。在设置 <code>cacheAsTexture</code> 后修改布局，但在渲染场景之前将反映在缓存中。</p></li><li><p>容器不进行转换：缓存项按其实际大小进行渲染，忽略缩放等转换。例如，一个物品按比例缩小50%，它的纹理将被缓存为100%大小，然后根据场景按比例缩小。</p></li><li><p>缓存和过滤器： <code>cacheAsTexture</code> 时，过滤器的行为可能不像预期的那样。要缓存过滤器效果，将项目封装在父容器中，并对父容器应用 <code>cacheAsTexture</code> 。</p></li><li><p>重用纹理：如果你想基于容器创建一个新的纹理，最好使用 <code>const texture = renderer.generateTexture(container)</code> 并在你的对象中共享！</p></li></ul><h2 id="_7-3-精灵" tabindex="-1"><a class="header-anchor" href="#_7-3-精灵"><span>7.3 精灵</span></a></h2><h3 id="_7-3-1-原始精灵-sprite" tabindex="-1"><a class="header-anchor" href="#_7-3-1-原始精灵-sprite"><span>7.3.1 原始精灵(Sprite)</span></a></h3><p>精灵是PixiJS的基本视觉元素。它们代表要在屏幕上显示的单个图像。每个精灵都包含一个要绘制的纹理，以及场景图形中所需的所有转换和显示状态。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Assets<span class="token punctuation">,</span> Sprite <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;path/to/image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> sprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sprite</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">sprite<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>rotation <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 旋转45度</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-1-1-更新纹理" tabindex="-1"><a class="header-anchor" href="#_7-3-1-1-更新纹理"><span>7.3.1.1 更新纹理</span></a></h4><p>如果你改变精灵的纹理，它会自动：</p><ul><li>为纹理更新重新绑定侦听器</li><li>重新计算宽度/高度，如果设置，使视觉大小保持不变</li><li>触发视觉更新</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> texture <span class="token operator">=</span> Assets<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;path/to/image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sprite<span class="token punctuation">.</span>texture <span class="token operator">=</span> texture<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-2-2-比例vs宽度-高度" tabindex="-1"><a class="header-anchor" href="#_7-3-2-2-比例vs宽度-高度"><span>7.3.2.2 比例vs宽度/高度</span></a></h4><p>精灵从 <code>Container</code> 继承 <code>scale</code> ，允许基于百分比的调整大小：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 尺寸翻倍</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>精灵也有 <code>width</code> 和 <code>height</code> 属性，作为 <code>scale</code> 的方便设置，基于纹理的尺寸：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">sprite<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 自动更新比例width</span></span>
<span class="line">sprite<span class="token punctuation">.</span>scale<span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token number">100</span>  <span class="token comment">// sprite.texture.org.width；</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-2-2-实例" tabindex="-1"><a class="header-anchor" href="#_7-3-2-2-实例"><span>7.3.2.2 实例</span></a></h4><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><ul><li>运行结果图</li></ul><p><img src="`+t+`" alt=""></p><h3 id="_7-3-2-九宫格精灵" tabindex="-1"><a class="header-anchor" href="#_7-3-2-九宫格精灵"><span>7.3.2 九宫格精灵</span></a></h3><p><code>NineSliceSprite</code> 是一个特殊类型的 <code>Sprite</code> ，允许纹理在保留角和边缘的情况下调整大小。它对于构建可扩展的UI元素（如带有圆形或装饰边框的按钮、面板或窗口）特别有用。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> NineSliceSprite<span class="token punctuation">,</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> nineSlice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NineSliceSprite</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;button.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    leftWidth<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">    topHeight<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">    rightWidth<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">    bottomHeight<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">    width<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">    height<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>nineSlice<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以只传递一个纹理，切片值将回落到默认值或从纹理 <code>defaultBorders</code> 推断。</p><h4 id="_7-3-2-1-ninesslice是如何工作的" tabindex="-1"><a class="header-anchor" href="#_7-3-2-1-ninesslice是如何工作的"><span>7.3.2.1 ninesslice是如何工作的</span></a></h4><p>下面是9片纹理的划分方式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">    <span class="token constant">A</span>                          <span class="token constant">B</span></span>
<span class="line">  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></span>
<span class="line"><span class="token constant">C</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span>          <span class="token number">2</span>           <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span></span>
<span class="line">  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></span>
<span class="line">  <span class="token operator">|</span>   <span class="token operator">|</span>                      <span class="token operator">|</span>   <span class="token operator">|</span></span>
<span class="line">  <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span>          <span class="token number">5</span>           <span class="token operator">|</span> <span class="token number">6</span> <span class="token operator">|</span></span>
<span class="line">  <span class="token operator">|</span>   <span class="token operator">|</span>                      <span class="token operator">|</span>   <span class="token operator">|</span></span>
<span class="line">  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></span>
<span class="line"><span class="token constant">D</span> <span class="token operator">|</span> <span class="token number">7</span> <span class="token operator">|</span>          <span class="token number">8</span>           <span class="token operator">|</span> <span class="token number">9</span> <span class="token operator">|</span></span>
<span class="line">  <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span></span>
<span class="line"></span>
<span class="line"><span class="token literal-property property">Areas</span><span class="token operator">:</span></span>
<span class="line">  <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token function">角</span> <span class="token punctuation">(</span>保持未缩放<span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">:</span> Top<span class="token operator">/</span>Bottom <span class="token function">中心</span> <span class="token punctuation">(</span>水平拉伸<span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token operator">:</span> Left<span class="token operator">/</span>Right <span class="token function">中心</span> <span class="token punctuation">(</span>垂直拉伸<span class="token punctuation">)</span></span>
<span class="line">  <span class="token operator">-</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token function">中心</span> <span class="token punctuation">(</span>双向拉伸<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这确保了装饰性的角被保留，中心的内容可以根据需要缩放。</p><h4 id="_7-3-2-2-宽度和高度行为" tabindex="-1"><a class="header-anchor" href="#_7-3-2-2-宽度和高度行为"><span>7.3.2.2 宽度和高度行为</span></a></h4><p>在a  <code>NineSliceSprite</code> 上设置 <code>.width</code> 和 <code>.height</code> 更新几何顶点，而不是纹理uv。这允许纹理根据切片区域正确地重复或拉伸。这也意味着 <code>width</code> 和 <code>height</code> 属性与 <code>scale</code> 属性不同。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 纹理将拉伸以适应新的尺寸</span></span>
<span class="line">nineSlice<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span></span>
<span class="line">nineSlice<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 九个切片的大小将均匀增加</span></span>
<span class="line">nineSlice<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Doubles the size</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原始宽度和高度</strong></p><p>如果需要知道9片的原始大小，可以通过 <code>originalWidth</code> 和 <code>originalHeight</code> 属性访问它。这些值是在创建 <code>NineSliceSprite</code> 时设置的，并在应用任何缩放或调整大小之前表示纹理的尺寸。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nineSlice<span class="token punctuation">.</span>originalWidth<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nineSlice<span class="token punctuation">.</span>originalHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-2-3-动态更新" tabindex="-1"><a class="header-anchor" href="#_7-3-2-3-动态更新"><span>7.3.2.3 动态更新</span></a></h4><p>您可以在运行时更改切片的尺寸或大小：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">nineSlice<span class="token punctuation">.</span>leftWidth <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">nineSlice<span class="token punctuation">.</span>topHeight <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>每个setter触发一个几何更新来反映更改。</p><h4 id="_7-3-2-4-实例代码" tabindex="-1"><a class="header-anchor" href="#_7-3-2-4-实例代码"><span>7.3.2.4 实例代码</span></a></h4><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/pixi8.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>                 <span class="token comment">// 宽度</span></span>
<span class="line">            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>                <span class="token comment">// 高度</span></span>
<span class="line">            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token number">0x1099bb</span><span class="token punctuation">,</span>  <span class="token comment">// 画布颜色</span></span>
<span class="line">            <span class="token literal-property property">backgroundAlpha</span><span class="token operator">:</span><span class="token number">0.3</span>         <span class="token comment">// 画布透明度</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;../assest/sample1.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> nineSlice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>NineSliceSprite</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">texture</span><span class="token operator">:</span> texture<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">leftWidth</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">topHeight</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">rightWidth</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">bottomHeight</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>nineSlice<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>运行结果图</li></ul><p><img src="`+c+`" alt=""></p><h3 id="_7-3-3-tiling精灵" tabindex="-1"><a class="header-anchor" href="#_7-3-3-tiling精灵"><span>7.3.3 Tiling精灵</span></a></h3><p>A  <code>TilingSprite</code> 是一种高性能的在矩形区域上渲染重复纹理的方法。它不是拉伸纹理，而是重复（贴图）它来填充给定的空间，使其成为背景，视差效果，地形和UI面板的理想选择。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> TilingSprite<span class="token punctuation">,</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> tilingSprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TilingSprite</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;assets/tile.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    width<span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">    height<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>tilingSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-3-1-什么是tilingsprite-​" tabindex="-1"><a class="header-anchor" href="#_7-3-3-1-什么是tilingsprite-​"><span>7.3.3.1 什么是TilingSprite？​</span></a></h4><ul><li>它在一个已定义的区域重复绘制纹理。</li><li>默认情况下，纹理不会缩放，除非你调整 <code>tileScale</code> 。</li><li>精灵的整体 <code>width</code> 和 <code>height</code> 决定贴图填充的面积，与纹理的原始大小无关。</li><li>模式的偏移量、比例和旋转可以独立于对象的变换来控制。</li></ul><h4 id="_7-3-3-2-关键属性" tabindex="-1"><a class="header-anchor" href="#_7-3-3-2-关键属性"><span>7.3.3.2 关键属性</span></a></h4><table><thead><tr><th>财产</th><th>描述</th></tr></thead><tbody><tr><td><code>texture</code></td><td>纹理在重复</td></tr><tr><td><code>tilePosition</code></td><td><code>ObservablePoint</code> 平铺图案的控制偏移量</td></tr><tr><td><code>tileScale</code></td><td><code>ObservablePoint</code> 控制每个贴图的缩放</td></tr><tr><td><code>tileRotation</code></td><td>数字控制瓷砖图案的旋转</td></tr><tr><td><code>width</code> / <code>height</code></td><td>要用瓷砖填充的区域的大小</td></tr><tr><td><code>anchor</code></td><td>调整TilingSprite的原点</td></tr><tr><td><code>applyAnchorToTexture</code></td><td>如果 <code>true</code> ，则锚会影响平铺图案的起点</td></tr><tr><td><code>clampMargin</code></td><td>调整边距以避免边缘伪影（默认值： <code>0.5</code> ）</td></tr></tbody></table><h4 id="_7-3-3-3-宽度和高度vs比例" tabindex="-1"><a class="header-anchor" href="#_7-3-3-3-宽度和高度vs比例"><span>7.3.3.3 宽度和高度vs比例</span></a></h4><p>与 <code>Sprite</code> 不同，在a  <code>TilingSprite</code> 中设置 <code>width</code> 和 <code>height</code> 直接改变可见平铺区域。它不影响瓷砖的尺度。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 使tiling面积更大</span></span>
<span class="line">tilingSprite<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span></span>
<span class="line">tilingSprite<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 保持瓷砖大小不变，只是瓷砖数量更多</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要缩放瓷砖图案本身，使用 <code>tileScale</code> ：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 使每个图块看起来更大</span></span>
<span class="line">tilingSprite<span class="token punctuation">.</span>tileScale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-3-4-锚和applyanchortotexture" tabindex="-1"><a class="header-anchor" href="#_7-3-3-4-锚和applyanchortotexture"><span>7.3.3.4 锚和applyAnchorToTexture</span></a></h4><ul><li><code>anchor</code> 设置定位TilingSprite的枢轴/原点。</li><li>如果 <code>applyAnchorToTexture</code>   <code>true</code> ，则锚也会影响瓷砖图案开始的位置。</li><li>默认情况下，无论锚点如何，tile模式都从本地空间的（0,0）处开始。</li></ul><h4 id="_7-3-3-5-实例代码" tabindex="-1"><a class="header-anchor" href="#_7-3-3-5-实例代码"><span>7.3.3.5 实例代码</span></a></h4><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/pixi8.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>                 <span class="token comment">// 宽度</span></span>
<span class="line">            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>                <span class="token comment">// 高度</span></span>
<span class="line">            <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token number">0x1099bb</span><span class="token punctuation">,</span>  <span class="token comment">// 画布颜色</span></span>
<span class="line">            <span class="token literal-property property">backgroundAlpha</span><span class="token operator">:</span><span class="token number">0.3</span>         <span class="token comment">// 画布透明度</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;../assest/sample1.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> tilingSprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>TilingSprite</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">texture</span><span class="token operator">:</span> texture<span class="token punctuation">,</span>       <span class="token comment">// 纹理</span></span>
<span class="line">            <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>            <span class="token comment">// 填充区域的高度</span></span>
<span class="line">            <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">600</span><span class="token punctuation">,</span>             <span class="token comment">// 填充区域的宽度</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 缩放tilingSprite本身</span></span>
<span class="line">        tilingSprite<span class="token punctuation">.</span>tileScale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        app<span class="token punctuation">.</span>ticker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ticker</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            tilingSprite<span class="token punctuation">.</span>tilePosition<span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>tilingSprite<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><iframe src="/note-front/animation/pixi/official/html/07.html" width="650" height="450"></iframe><h3 id="_7-3-4-动画精灵" tabindex="-1"><a class="header-anchor" href="#_7-3-4-动画精灵"><span>7.3.4 动画精灵</span></a></h3><p>AnimatedSprite是一种显示由纹理列表描绘的动画的简单方法。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> AnimatedSprite<span class="token punctuation">,</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> alienImages <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;image_sequence_01.png&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;image_sequence_02.png&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;image_sequence_03.png&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;image_sequence_04.png&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> textureArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> texture <span class="token operator">=</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>alienImages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    textureArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> animatedSprite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatedSprite</span><span class="token punctuation">(</span>textureArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-3-4-1-使用纹理数组创建动画精灵的方法" tabindex="-1"><a class="header-anchor" href="#_7-3-4-1-使用纹理数组创建动画精灵的方法"><span>7.3.4.1 使用纹理数组创建动画精灵的方法</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>AnimatedSprite</span><span class="token punctuation">(</span>textures<span class="token punctuation">,</span> autoUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>参数 :</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>textures</td><td>array</td><td>用一系列略有不同的图像做的纹理数组。</td><td></td></tr><tr><td>autoUpdate</td><td>boolean</td><td>TRUE</td><td>用来判断是否使用 PIXI.ticker.shared 自动更新动画时间。</td></tr></tbody></table><ul><li>返回值：</li></ul><p>返回一个对象，对象会有一些属性和方法，用于控制动画精灵。</p><ul><li>返回值对象的属性：</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>animationSpeed</td><td>number</td><td>动画精灵的播放速度。越高越快，越低越慢，默认值是1</td></tr><tr><td>currentFrame</td><td>number（只读）</td><td>正在显示的当前帧编号</td></tr><tr><td>onComplete</td><td>function</td><td>当loop属性为false时，一个动画精灵完成播放时调用</td></tr><tr><td>playing</td><td>Boolean</td><td>确定当前动画精灵是否正在播放</td></tr><tr><td>onFrameChange</td><td>function</td><td>当一个动画精灵更改要呈现的纹理时调用</td></tr><tr><td>loop</td><td>boolean</td><td>动画精灵是否在播放后重复播放</td></tr><tr><td>onLoop</td><td>function</td><td>当loop属性为true时调用的函数</td></tr><tr><td>textures</td><td>array</td><td>用于这个动画精灵的纹理数组</td></tr><tr><td>totalFrames</td><td>number （只读）</td><td>动画中的帧总数</td></tr></tbody></table><ul><li>返回值对象的方法：</li></ul><table><thead><tr><th>名称</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>play</td><td>播放动画精灵</td><td></td></tr><tr><td>gotoAndPlay</td><td>frameNumber，number类型，开始帧的索引</td><td>转到特定的帧并开始播放动画精灵</td></tr><tr><td>stop</td><td>停止播放动画精灵</td><td></td></tr><tr><td>gotoAndStop</td><td>frameNumber，number类型，停止帧的索引</td><td>转到特定的帧并停止播放动画精灵</td></tr></tbody></table><p>使用返回值中的这些属性和方法，我们就可以控制动画精灵了，比如播放动画精灵，设置动画的速度，设置是否循环播放等，除此之外，还要知道就是 PIXI.extras.AnimatedSprite 方法继承自 PIXI.Sprite 方法，所以动画精灵也可以用普通精灵的属性和方法，比如x，y，width，height，scale，rotation 。</p><h4 id="_7-3-4-2-实例-纹理" tabindex="-1"><a class="header-anchor" href="#_7-3-4-2-实例-纹理"><span>7.3.4.2 实例-纹理</span></a></h4><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"></span>
<span class="line">好的，我们开始试试这个方法。</span>
<span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>zn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>动画精灵<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/pixi8.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>px-render<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">            <span class="token comment">// 创建一个 Pixi应用</span></span>
<span class="line">            <span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 创建一个 Pixi应用 需要的一些参数</span></span>
<span class="line">            <span class="token keyword">let</span> option <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">transparent</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 初始化应用程序</span></span>
<span class="line">            <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">let</span> playground <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;px-render&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 把 Pixi 创建的 canvas 添加到页面上</span></span>
<span class="line">            playground<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//需要加载的雪碧图</span></span>
<span class="line">            <span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">PIXI</span><span class="token punctuation">.</span>Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;../assest/dnf.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//第一个纹理</span></span>
<span class="line">            <span class="token keyword">let</span> texture0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Texture</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token literal-property property">source</span><span class="token operator">:</span> texture<span class="token punctuation">,</span></span>
<span class="line">                <span class="token literal-property property">frame</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//第二个纹理</span></span>
<span class="line">            <span class="token keyword">let</span> texture1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Texture</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">                <span class="token literal-property property">source</span><span class="token operator">:</span> texture<span class="token punctuation">,</span> </span>
<span class="line">                <span class="token literal-property property">frame</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//第三个纹理</span></span>
<span class="line">            <span class="token keyword">let</span> texture2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Texture</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">                <span class="token literal-property property">source</span><span class="token operator">:</span> texture<span class="token punctuation">,</span> </span>
<span class="line">                <span class="token literal-property property">frame</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//第四个纹理</span></span>
<span class="line">            <span class="token keyword">let</span> texture3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Texture</span><span class="token punctuation">(</span><span class="token punctuation">{</span> </span>
<span class="line">                <span class="token literal-property property">source</span><span class="token operator">:</span> texture<span class="token punctuation">,</span> </span>
<span class="line">                <span class="token literal-property property">frame</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//创建纹理数组</span></span>
<span class="line">            <span class="token keyword">let</span> textures <span class="token operator">=</span> <span class="token punctuation">[</span>texture0<span class="token punctuation">,</span> texture1<span class="token punctuation">,</span> texture2<span class="token punctuation">,</span> texture3<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//创建动画精灵</span></span>
<span class="line">            <span class="token keyword">let</span> anim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>AnimatedSprite</span><span class="token punctuation">(</span>textures<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 设置位置与锚点</span></span>
<span class="line">            anim<span class="token punctuation">.</span>x <span class="token operator">=</span> app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">            anim<span class="token punctuation">.</span>y <span class="token operator">=</span> app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">            anim<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//设置速度与播放</span></span>
<span class="line">            anim<span class="token punctuation">.</span>animationSpeed <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span></span>
<span class="line">            anim<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">//将其添加到舞台上</span></span>
<span class="line">            app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>anim<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><iframe src="/note-front/animation/pixi/official/html/08.html" width="450" height="350"></iframe><h4 id="_7-3-4-3-实例-精灵表" tabindex="-1"><a class="header-anchor" href="#_7-3-4-3-实例-精灵表"><span>7.3.4.3 实例-精灵表</span></a></h4><ul><li>代码</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>动画精灵<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>px-render<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token keyword">import</span> <span class="token punctuation">{</span> Application<span class="token punctuation">,</span> Assets<span class="token punctuation">,</span> AnimatedSprite<span class="token punctuation">,</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../js/pixi.mjs&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 创建应用程序</span></span>
<span class="line">      <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 初始化应用程序</span></span>
<span class="line">      <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">let</span> playground <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;px-render&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 把 Pixi 创建的 canvas 添加到页面上</span></span>
<span class="line">      playground<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 加载动画精灵页</span></span>
<span class="line">      <span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&quot;../spritesheet/gunner_texture.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 创建一个数组填充仓库中的精灵</span></span>
<span class="line">      <span class="token keyword">const</span> gunnerTextures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 数据放入纹理集合中</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> texture <span class="token operator">=</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">gunner_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.jpg</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        gunnerTextures<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gunnerTextures<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">//创建动画精灵</span></span>
<span class="line">      <span class="token keyword">let</span> anim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatedSprite</span><span class="token punctuation">(</span>gunnerTextures<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 设置位置与锚点</span></span>
<span class="line">      anim<span class="token punctuation">.</span>x <span class="token operator">=</span> app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">      anim<span class="token punctuation">.</span>y <span class="token operator">=</span> app<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">      anim<span class="token punctuation">.</span>anchor<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">//设置速度与播放</span></span>
<span class="line">      anim<span class="token punctuation">.</span>animationSpeed <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span></span>
<span class="line">      anim<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">//将其添加到舞台上</span></span>
<span class="line">      app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>anim<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>示例</li></ul><iframe src="/note-front/animation/pixi/official/html/08.html" width="450" height="350"></iframe><h2 id="_7-4-图形" tabindex="-1"><a class="header-anchor" href="#_7-4-图形"><span>7.4 图形</span></a></h2><h3 id="_7-4-1-基础应用" tabindex="-1"><a class="header-anchor" href="#_7-4-1-基础应用"><span>7.4.1 基础应用</span></a></h3><p>图形是一种强大而灵活的工具，用于渲染矩形、圆形、星形和自定义多边形等形状。它还可以通过组合多个原语来创建复杂的形状，并且它支持渐变，纹理和蒙版等高级功能。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Graphics <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> graphics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-1-1-基础图形" tabindex="-1"><a class="header-anchor" href="#_7-4-1-1-基础图形"><span>7.4.1.1 基础图形</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> graphics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token number">0x00ff00</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">lineStyle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-1-2-svg支持" tabindex="-1"><a class="header-anchor" href="#_7-4-1-2-svg支持"><span>7.4.1.2 SVG支持</span></a></h4><p>您还可以加载SVG路径数据，但由于Pixi的性能优化三角测量系统，复杂的孔几何形状可能呈现不准确。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">let</span> shape <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">svg</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">  &lt;svg&gt;</span>
<span class="line">    &lt;path d=&quot;M 100 350 q 150 -300 300 0&quot; stroke=&quot;blue&quot; /&gt;</span>
<span class="line">  &lt;/svg&gt;</span>
<span class="line"></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-2-graphicscontext" tabindex="-1"><a class="header-anchor" href="#_7-4-2-graphicscontext"><span>7.4.2 GraphicsContext</span></a></h3><p><code>GraphicsContext</code> 类是PixiJS新图形模型的核心。它保存了所有的绘图命令和样式，允许相同的形状数据被多个 <code>Graphics</code> 实例重用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> shapeA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> shapeB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Shares the same geometry</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种模式在渲染重复或动画形状时特别有效，例如基于帧的SVG交换：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">let</span> frames <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> graphic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span>frames<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    graphic<span class="token punctuation">.</span>context <span class="token operator">=</span> frames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Very cheap operation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果在创建 <code>Graphics</code> 对象时没有显式传递 <code>GraphicsContext</code> ，那么在内部，它将有自己的上下文，可以通过 <code>myGraphics.context</code> 访问。</p></blockquote><p><strong>销毁GraphicsContext</strong></p><p>当您销毁 <code>GraphicsContext</code> 时，共享它的所有 <code>Graphics</code> 实例也将被销毁。记住这一点很重要，因为如果你不小心，可能会导致意想不到的行为。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GraphicsContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> shapeA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> shapeB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Shares the same geometry</span></span>
<span class="line"></span>
<span class="line">shapeA<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span> context<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Destroys both shapeA and shapeB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-3-cut-孔" tabindex="-1"><a class="header-anchor" href="#_7-4-3-cut-孔"><span>7.4.3 cut 孔</span></a></h3><p>使用 <code>.cut()</code> 从前一个形状中删除一个形状：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0x00ff00</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Creates a hole in the green rectangle</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保孔完全封闭在形状内，以避免三角测量误差。</p><h3 id="_7-4-4-注意点" tabindex="-1"><a class="header-anchor" href="#_7-4-4-注意点"><span>7.4.4 注意点</span></a></h3><ol><li><p>图像是关于构建，而不是绘画</p><p>尽管术语函数如 <code>.rect()</code> 或 <code>.circle()</code> ,  <code>Graphics</code> 不会立即绘制任何东西。相反，每个方法构建一个存储在 <code>GraphicsContext</code> 中的几何原语列表。然后，当对象被绘制到屏幕上或在另一个上下文中（如蒙版）使用时，渲染这些内容。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> graphic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>graphic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The rendering happens here</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以把 <code>Graphics</code> 看作一个蓝图构建器：它定义了绘制什么，但不定义何时绘制。这就是为什么 <code>Graphics</code> 对象可以被重用、克隆、屏蔽和转换，而不会产生额外的计算，直到它们实际呈现。</p></li><li><p>性能最佳实践</p><ul><li>不要每帧都清除和重建图形。如果您的内容是动态的，最好交换预构建的 <code>GraphicsContext</code> 对象，而不是重新创建它们。</li><li>完成后使用 <code>Graphics.destroy()</code> 进行清理。共享上下文不会自动销毁。</li><li>在一个复杂的对象上使用多个简单的 <code>Graphics</code> 对象来维护GPU批处理。</li><li>避免透明重叠，除非你了解混合模式；重叠的半透明原语将在每个原语之间进行交互，而不是在组合后进行交互。</li></ul></li><li><p>注意事项和陷阱</p><ul><li>内存泄漏：当不再需要时调用 <code>.destroy()</code> 。</li><li>SVG和孔洞：并非所有SVG孔洞路径都能正确三角化。</li><li>改变几何形状：谨慎使用 <code>.clear()</code> 。更喜欢交换上下文。</li><li>透明度和混合模式：这些适用于每个原语。使用 <code>RenderTexture</code> 如果你想平坦的效果。</li></ul></li></ol><h3 id="_7-4-5-图形填充" tabindex="-1"><a class="header-anchor" href="#_7-4-5-图形填充"><span>7.4.5 图形填充</span></a></h3><h4 id="_7-4-5-1-基础填充" tabindex="-1"><a class="header-anchor" href="#_7-4-5-1-基础填充"><span>7.4.5.1 基础填充</span></a></h4><ol><li>基本颜色填充</li></ol><p>当创建 <code>Graphics</code> 对象时，您可以使用 <code>fill()</code> 方法轻松地用颜色填充它。这里有一个简单的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 矩形</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充红色</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><p>这将创建一个红色矩形。PixiJS支持 <code>fill()</code> 方法的多种颜色格式。开发人员可以根据自己的需要选择一种格式。例如，CSS颜色字符串用户友好且易读，十六进制字符串紧凑且在设计工具中广泛使用，数字在编程中使用效率高。数组和颜色对象提供精确的控制，使它们成为高级图形的理想选择。</p><ul><li>CSS颜色字符串（例如，‘red’， ‘blue’）</li><li>十六进制字符串（例如，‘#ff0000’）</li><li>数字（例如 <code>0xff0000</code> ）</li><li>数组（例如 <code>[255, 0, 0]</code> ）</li><li>颜色对象进行精确的颜色控制</li></ul><p><strong>例子</strong></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 使用数字</span></span>
<span class="line"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用十六禁止字符串</span></span>
<span class="line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用rgb数组</span></span>
<span class="line"><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用颜色对象</span></span>
<span class="line"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>填充一个样式对象</li></ol><p>对于更高级的填充，您可以使用 <code>FillStyle</code> 对象。这允许额外的定制，比如设置不透明度：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    alpha<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token comment">// 50% opacity</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt=""></p><ol start="3"><li>填充纹理</li></ol><p>用纹理填充形状也很简单：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> texture <span class="token operator">=</span> <span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;assets/image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>texture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt=""></p><h4 id="_7-4-5-2-纹理空间" tabindex="-1"><a class="header-anchor" href="#_7-4-5-2-纹理空间"><span>7.4.5.2 纹理空间</span></a></h4><ol><li>局部与全局纹理空间</li></ol><p>纹理可以在两个坐标空间中应用：</p><ul><li>局部空间（默认）：纹理坐标相对于形状的尺寸和位置进行映射。纹理坐标使用标准化坐标系，其中（0,0）是形状的左上角，（1,1）是形状的右下角，而不考虑其实际像素尺寸。例如，如果你有一个300x200像素的纹理填充一个100x100像素的形状，那么纹理将被缩放到正好适合这100x100像素。纹理的左上角（0,0）将与形状的左上角对齐，纹理的右下角（1,1）将与形状的右下角对齐，根据需要拉伸或压缩纹理。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">PIXI</span></span><span class="token punctuation">.</span><span class="token function">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">star</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">roundRect</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        texture<span class="token punctuation">,</span></span>
<span class="line">        textureSpace<span class="token operator">:</span><span class="token string">&#39;local&#39;</span> <span class="token comment">// default!</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><ul><li>全局空间：设置 <code>textureSpace: &#39;global&#39;</code> 使纹理位置和比例相对于图形对象的坐标系。尽管名称如此，但这并不是真正的“全局”——纹理相对于图形对象本身保持固定，即使对象移动或缩放也保持其位置。看看图片是如何在所有的形状（在相同的图形）下面：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> shapes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">PIXI</span></span><span class="token punctuation">.</span><span class="token function">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">star</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">roundRect</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        texture<span class="token punctuation">,</span></span>
<span class="line">        textureSpace<span class="token operator">:</span><span class="token string">&#39;global&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><ol start="2"><li>使用矩阵和纹理</li></ol><p>要修改纹理坐标，可以应用变换矩阵，这是一种用于缩放、旋转或平移纹理的数学工具。如果你不熟悉变换矩阵，它们允许精确控制纹理的渲染方式，你可以在这里探索更多关于它们的信息。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> texture<span class="token punctuation">,</span></span>
<span class="line">    matrix<span class="token operator">:</span> matrix<span class="token punctuation">,</span> <span class="token comment">// scale the texture down by 2</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt=""></p><ol start="3"><li><p>结构问题的</p><ol><li>精灵表：如果使用精灵表中的纹理，则会使用整个源纹理。要使用一个特定的帧，创建一个新的纹理：</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> spriteSheetTexture <span class="token operator">=</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;assets/my-sprite-sheet.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> newTexture <span class="token operator">=</span> renderer<span class="token punctuation">.</span><span class="token function">generateTexture</span><span class="token punctuation">(</span>Sprite<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>spriteSheetTexture<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>newTexture<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>两个纹理的力量：纹理应该是在WebGL1中正确平铺的二维力量（WebGL2和WebGPU都可以）。</li></ol></li></ol><h4 id="_7-4-5-3-用渐变填充" tabindex="-1"><a class="header-anchor" href="#_7-4-5-3-用渐变填充"><span>7.4.5.3 用渐变填充</span></a></h4><p>PixiJS支持线性和径向梯度，可以使用 <code>FillGradient</code> 类创建。渐变对于为形状和文本添加视觉深度和动态样式特别有用。</p><ol><li>线性渐变</li></ol><p>线性渐变沿着直线创建平滑的颜色过渡。下面是一个简单线性梯度的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> gradient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillGradient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token string">&#39;linear&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  colorStops<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;green&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>gradient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt=""></p><p>你可以用以下属性来控制渐变方向：</p><ul><li><p><code>start {x, y}</code> ：这些定义了梯度的起点。例如，在线性渐变中，这是第一个颜色停止的位置。这些值通常以相对坐标（0到1）表示，其中 <code>0</code> 代表形状的左/上边缘， <code>1</code> 代表形状的右/下边缘。</p></li><li><p><code>end {x, y}</code> ：这些定义了梯度的终点。与 <code>start {x, y}</code> 类似，这些值指定最后一个颜色停止在形状的本地坐标系中的位置。</p></li></ul><p>使用这些属性，您可以创建各种渐变效果，例如水平、垂直或对角过渡。例如，将 <code>start</code> 设置为 <code>{x: 0, y: 0}</code> ，并将 <code>end</code> 至 <code>{x: 1, y: 1}</code> 设置为从形状的左上角到右下角的对角线渐变。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> diagonalGradient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillGradient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token string">&#39;linear&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  start<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  end<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  colorStops<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;green&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt=""></p><ol start="2"><li>径向渐变</li></ol><p>径向渐变在圆形图案中创建平滑的颜色过渡。与线性渐变不同，它们将颜色从一个圆圈混合到另一个圆圈。下面是一个简单的径向梯度的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> gradient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillGradient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token string">&#39;radial&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  colorStops<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;green&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>gradient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p><p>你可以使用以下属性来控制渐变的形状和大小：</p><ul><li><p><code>center {x, y}</code> ：这些定义了渐变开始的内圆的中心。通常，这些值以相对坐标（0到1）表示，其中 <code>0.5</code> 表示形状的中心。</p></li><li><p><code>innerRadius</code> ：内圆半径。这决定了梯度起始点的大小。</p></li><li><p><code>outerCenter {x, y}</code> ：这些定义了渐变结束的外圆的中心。与 <code>center {x, y}</code> 一样，这些值也是相对坐标。</p></li><li><p><code>outerRadius</code> ：外圆半径。这决定了梯度终点的大小。</p></li></ul><p>通过调整这些属性，您可以创建各种效果，例如小的、集中的梯度或大的、扩展的梯度。例如，设置一个小的 <code>r0</code> 和一个大的 <code>r1</code> 将创建一个渐变，直到达到内圆半径才开始过渡。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> radialGradient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillGradient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token string">&#39;radial&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  center<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  innerRadius<span class="token operator">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span></span>
<span class="line">  outerCenter<span class="token operator">:</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  outerRadius<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">  colorStops<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>gradient<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt=""></p><ul><li><p>梯度问题的</p><ol><li><p>内存管理：当不再需要梯度时，使用 <code>fillGradient.destroy()</code> 来释放资源。</p></li><li><p>动画：更新现有的渐变，而不是创建新的渐变，以获得更好的性能。</p></li><li><p>自定义着色器：对于复杂的动画，自定义着色器可能更有效。</p></li><li><p>纹理和矩阵限制：在底层，渐变填充在内部设置纹理和矩阵属性。这意味着你不能同时使用纹理填充或矩阵变换作为渐变填充。</p></li></ol></li></ul><h4 id="_7-4-5-4-结合纹理和颜色" tabindex="-1"><a class="header-anchor" href="#_7-4-5-4-结合纹理和颜色"><span>7.4.5.4 结合纹理和颜色</span></a></h4><p>您可以将纹理或渐变与颜色色调和alpha相结合，以实现更复杂和更具视觉吸引力的效果。这允许你在纹理或渐变上叠加颜色，用alpha值调整透明度。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">const</span> gradient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillGradient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    colorStops<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    fill<span class="token operator">:</span> gradient<span class="token punctuation">,</span></span>
<span class="line">    color<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    alpha<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+h+`" alt=""></p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> texture<span class="token punctuation">,</span></span>
<span class="line">    color<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    alpha<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+`" alt=""></p><h3 id="_7-4-6-图形像素线" tabindex="-1"><a class="header-anchor" href="#_7-4-6-图形像素线"><span>7.4.6 图形像素线</span></a></h3><h4 id="_7-4-6-1-如何使用-pixelline-​" tabindex="-1"><a class="header-anchor" href="#_7-4-6-1-如何使用-pixelline-​"><span>7.4.6.1 如何使用 <code>pixelLine</code> ？​</span></a></h4><p>这里有一个简单的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Create a Graphics object and draw a pixel-perfect line</span></span>
<span class="line"><span class="token keyword">let</span> graphics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span> pixelLine<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add it to the stage</span></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>graphics<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Even if we scale the Graphics object, the line remains 1 pixel wide</span></span>
<span class="line">graphics<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，无论您如何变换或缩放 <code>Graphics</code> 对象，红色线条将始终在屏幕上显示为1像素厚。</p><hr><h4 id="_7-4-6-2-为什么使用-pixelline-​" tabindex="-1"><a class="header-anchor" href="#_7-4-6-2-为什么使用-pixelline-​"><span>7.4.6.2 为什么使用 <code>pixelLine</code> ？​</span></a></h4><p>像素完美的线条在各种场景中都非常有用。下面是一些常见的用例：</p><ol><li><p>复古或像素艺术游戏</p><ul><li>像素美术游戏很大程度上依赖于保持清晰、精确的视觉效果。 <code>pixelLine</code> 属性确保线条不会模糊或缩放与其他像素元素不一致。</li><li>示例：为基于瓷砖的地图绘制像素完美的网格。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 创建由垂直线和水平线组成的网格</span></span>
<span class="line"><span class="token keyword">const</span> grid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 绘制10条间距为10像素的垂直线</span></span>
<span class="line"><span class="token comment">// 绘制垂直线</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 移动到每条线的顶部 (x = i10, y = 0)</span></span>
<span class="line">    grid<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 向下绘制到底部 (x = i10, y = 100)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 绘制水平线</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 移动到每条线的起点 (x = 0, y = i10)</span></span>
<span class="line">    grid<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 向右绘制到终点 (x = 100, y = i10)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 以白色描边所有线条，并启用像素完美宽度</span></span>
<span class="line">grid<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token number">0xffffff</span><span class="token punctuation">,</span> pixelLine<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>UI和HUD元素</p><ul><li>对于UI元素，如边框、分隔符或下划线，一致的1像素厚度可以提供专业、干净的外观。</li><li>示例：在菜单或进度条边框中绘制分隔线。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 创建一条始终为1像素宽的分隔线</span></span>
<span class="line"><span class="token keyword">const</span> separator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 起始点坐标 (x=0, y=50)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 向右绘制200像素长的水平线</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 使用绿色描边，并保持像素完美1px宽度</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token number">0x00ff00</span><span class="token punctuation">,</span> pixelLine<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>调试和原型制作</p></li></ol><ul><li>使用像素完美的线条来调试布局、碰撞框或网格。由于线条不能伸缩，它们在开发过程中提供了一致的参考点。</li><li>例子：在基于物理的游戏中显示碰撞边界。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// 创建带像素完美描边的调试框</span></span>
<span class="line"><span class="token keyword">const</span> graphicsBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token number">0xff00ff</span><span class="token punctuation">,</span> pixelLine<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">   * 更新调试框以匹配给定对象的边界</span>
<span class="line">   * <span class="token keyword">@param</span> <span class="token punctuation">{</span>Container<span class="token punctuation">}</span> obj - 需要绘制边界的对象</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">drawDebugBounds</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取对象的边界矩形</span></span>
<span class="line">    <span class="token keyword">let</span> bounds <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rectangle<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 调整调试框位置和缩放以匹配边界</span></span>
<span class="line">    <span class="token comment">// 这比每帧使用moveTo和lineTo更高效！</span></span>
<span class="line">    graphicsBox<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>x<span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    graphicsBox<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bounds<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> bounds<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-4-6-3-它是如何工作的" tabindex="-1"><a class="header-anchor" href="#_7-4-6-3-它是如何工作的"><span>7.4.6.3 它是如何工作的</span></a></h4><p>当 <code>pixelLine</code> 被设置为 <code>true</code> 时，这是使用WebGL或WebGPU的本机行渲染方法实现的。</p><p>有趣的是，画像素线比画普通线要快。这是因为两个主要因素：</p><ol><li><p>更简单的绘图过程：在PixiJS中的规则线（当 <code>pixelLine</code>   <code>false</code> ）需要额外的步骤来绘制。PixiJS必须计算出线的厚度，并创建一个看起来像线但实际上由三角形组成的形状。</p></li><li><p>直线绘制：当使用 <code>pixelLine</code> 时，我们可以告诉显卡“只要从a点到B点画一条线”，它就知道该怎么做。这比创建和填充形状简单得多，也快得多。</p></li></ol><p>把它想象成在纸上画一条线—— <code>pixelLine</code> 就像用钢笔画一条直线，而规则线就像必须仔细地在一个薄矩形上上色。笔法自然更快更简单！</p><h4 id="_7-4-6-4-注意事项和陷阱" tabindex="-1"><a class="header-anchor" href="#_7-4-6-4-注意事项和陷阱"><span>7.4.6.4 注意事项和陷阱</span></a></h4><p>虽然 <code>pixelLine</code> 属性非常有用，但有一些限制和需要记住的事情：</p><ol><li><p>1px厚，就是这样！​</p><ul><li>线总是1px厚，没有办法改变这一点，因为它使用GPU来绘制线。</li></ul></li><li><p>硬件可能呈现不同</p><ul><li>不同的gpu和图形硬件可能会因为处理线光栅化的方式不同而呈现线条略有不同。例如，一些gpu可能会稍微不同地定位线或应用不同的抗混叠技术。这是GPU线条渲染的固有限制，超出了PixiJS的控制范围。</li></ul></li><li><p>扩展行为</p><ul><li>当线粗细保持不变时，其他属性（例如，位置或开始/结束点）仍然受到缩放的影响。如果与其他缩放对象结合使用，有时会产生意想不到的结果。这是一个功能，而不是一个bug:</li></ul></li></ol><p><strong>示例：具有像素完美描边的框</strong></p><p>下面是一个填充框的例子，具有像素完美的描边。框本身缩放和增长，但描边保持1像素宽：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 创建Graphics对象并绘制带像素完美描边的填充矩形</span></span>
<span class="line"><span class="token keyword">let</span> box <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token string">&#39;white&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span> pixelLine<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 将矩形添加到舞台</span></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 缩放矩形</span></span>
<span class="line">box<span class="token punctuation">.</span>scale<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，蓝色框随着它的缩放而增长，但是红色描边保持在1像素的厚度，提供了一个清晰的轮廓，无论缩放。</p><p><strong>何时避免使用 <code>pixelLine</code></strong></p><ul><li>你想要的线条厚度不是1px：不要使用 <code>pixelLine</code> 。</li><li>您希望该行可伸缩：不要使用 <code>pixelLine</code></li></ul><h2 id="_7-5-文本" tabindex="-1"><a class="header-anchor" href="#_7-5-文本"><span>7.5 文本</span></a></h2><h3 id="_7-5-1-基础文本" tabindex="-1"><a class="header-anchor" href="#_7-5-1-基础文本"><span>7.5.1 基础文本</span></a></h3><p>PixiJS中的 <code>Text</code> 类允许您在场景中渲染样式，动态字符串作为显示对象。在底层，PixiJS使用浏览器的画布文本API对文本进行光栅化，然后将其转换为纹理。这使得 <code>Text</code> 对象表现得像精灵：它们可以移动，旋转，缩放，遮罩和有效渲染。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Text<span class="token punctuation">,</span> TextStyle<span class="token punctuation">,</span> Assets <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Load font before use</span></span>
<span class="line"><span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    src<span class="token operator">:</span> <span class="token string">&#39;my-font.woff2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    data<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        family<span class="token operator">:</span> <span class="token string">&#39;MyFont&#39;</span><span class="token punctuation">,</span> <span class="token comment">// optional</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;Hello PixiJS!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      fill<span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      fontSize<span class="token operator">:</span> <span class="token number">36</span><span class="token punctuation">,</span></span>
<span class="line">      fontFamily<span class="token operator">:</span> <span class="token string">&#39;MyFont&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    anchor<span class="token operator">:</span> <span class="token number">0.5</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>myText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-1-1-文本样式" tabindex="-1"><a class="header-anchor" href="#_7-5-1-1-文本样式"><span>7.5.1.1 文本样式</span></a></h4><p><code>TextStyle</code> 类允许您自定义文本的外观。您可以设置如下属性：</p><ul><li><code>fontFamily</code></li><li><code>fontSize</code></li><li><code>fontWeight</code></li><li><code>fill</code> (颜色)</li><li><code>align</code></li><li><code>stroke</code> (大纲)</li></ul><p>更多细节请参见TextStyle指南。</p><h4 id="_7-5-1-2-动态更改文本" tabindex="-1"><a class="header-anchor" href="#_7-5-1-2-动态更改文本"><span>7.5.1.2 动态更改文本</span></a></h4><p>你可以在运行时更新文本字符串或其样式：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">text<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">&#39;Updated!&#39;</span><span class="token punctuation">;</span></span>
<span class="line">text<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span> <span class="token comment">// Triggers re-render</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>警告</p><p>更改文本或样式可重新光栅化对象。除非必要，否则避免每帧都这样做。</p><h4 id="_7-5-1-3-文本解析" tabindex="-1"><a class="header-anchor" href="#_7-5-1-3-文本解析"><span>7.5.1.3 文本解析</span></a></h4><p><code>Text</code> 类的 <code>resolution</code> 属性决定了渲染文本的像素密度。默认情况下，它使用渲染器的分辨率。</p><p>但是，您可以独立于渲染器设置文本分辨率，以获得更清晰的文本，特别是在高dpi显示器上。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> myText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    resolution<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 更高分辨率以获得更清晰的文本显示</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 修改分辨率</span></span>
<span class="line">myText<span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 重置为默认值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-1-4-字体加载" tabindex="-1"><a class="header-anchor" href="#_7-5-1-4-字体加载"><span>7.5.1.4 字体加载</span></a></h4><p>PixiJS支持通过 <code>Assets</code>  API加载自定义字体。它支持许多常见的字体格式：</p><ul><li><code>woff</code></li><li><code>woff2</code></li><li><code>ttf</code></li><li><code>otf</code></li></ul><p>为了获得最佳的性能和压缩效果，建议使用 <code>woff2</code> 。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&#39;my-font.woff2&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是在加载字体时，你可以在 <code>data</code> 对象中传递的属性列表：</p><table><thead><tr><th>财产</th><th>描述</th></tr></thead><tbody><tr><td><strong>家庭</strong></td><td>字体族名称。</td></tr><tr><td><strong>显示</strong></td><td>FontFace接口的显示属性。</td></tr><tr><td><strong>featureSettings</strong></td><td>FontFace接口的featureSettings属性。</td></tr><tr><td><strong>拉伸</strong></td><td>FontFace接口的拉伸属性。</td></tr><tr><td><strong>风格</strong></td><td>FontFace接口的样式属性。</td></tr><tr><td><strong>unicodeRange</strong></td><td>FontFace接口的unicodeRange属性。</td></tr><tr><td><strong>变体</strong></td><td>FontFace接口的变体属性。</td></tr><tr><td><strong>权重</strong></td><td>FontFace接口的权重属性。</td></tr></tbody></table><h3 id="_7-5-2-位图文本" tabindex="-1"><a class="header-anchor" href="#_7-5-2-位图文本"><span>7.5.2 位图文本</span></a></h3><p><code>BitmapText</code> 是PixiJS中的高性能文本渲染解决方案。与 <code>Text</code> 类不同， <code>BitmapText</code> 从预生成的纹理图集中绘制字符。这种设计允许您以最小的开销呈现数以万计的文本对象。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Assets<span class="token punctuation">,</span> BitmapText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;fonts/MyFont.fnt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapText</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;Loaded font!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        fontFamily<span class="token operator">:</span> <span class="token string">&#39;MyFont&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        fontSize<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span></span>
<span class="line">        fill<span class="token operator">:</span> <span class="token string">&#39;#ffcc00&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-2-1-为什么使用-bitmaptext-​" tabindex="-1"><a class="header-anchor" href="#_7-5-2-1-为什么使用-bitmaptext-​"><span>7.5.2.1 为什么使用 <code>BitmapText</code> ？​</span></a></h4><ul><li>快速渲染：完美的hud，得分计数器，计时器等。</li><li>没有逐帧光栅化：文本更改很便宜。</li><li>有效的内存使用：在所有实例中共享字形纹理。</li><li>支持MSDF/SDF字体：清晰缩放而不模糊。</li></ul><p>理想用例：</p><ul><li>频繁更新文本</li><li>大量的文本实例</li><li>高性能或移动项目</li></ul><h4 id="_7-5-2-2-如何加载和使用位图字体" tabindex="-1"><a class="header-anchor" href="#_7-5-2-2-如何加载和使用位图字体"><span>7.5.2.2 如何加载和使用位图字体</span></a></h4><ol><li>字体加载</li></ol><p>PixiJS支持AngelCode BMFont格式和msdf兼容的 <code>.fnt</code> 和 <code>.xml</code> 文件。您可以使用 <code>Assets</code>  API加载这些文件。</p><p>加载后，您可以使用 <code>fontFamily</code> 属性创建一个带有加载字体的 <code>BitmapText</code> 实例。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Assets<span class="token punctuation">,</span> BitmapText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;fonts/MyFont.fnt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapText</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;Loaded font!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        fontFamily<span class="token operator">:</span> <span class="token string">&#39;MyFont&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        fontSize<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span></span>
<span class="line">        fill<span class="token operator">:</span> <span class="token string">&#39;#ffcc00&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>MSDF和SDF字体</li></ol><p>PixiJS支持MSDF（多通道签名距离字段）和SDF格式的清晰，分辨率无关的文本。这些字体在任何大小和比例下都保持清晰。</p><p>您可以使用AssetPack等工具生成MSDF/SDF字体，该工具可以采用 <code>.ttf</code> 或 <code>.otf</code> 字体，并生成具有MSDF/SDF支持的位图字体图集。</p><p>使用MSDF/SDF字体类似于使用普通的位图字体，只需要你加载适当的字体文件：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Assets<span class="token punctuation">,</span> BitmapText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">&#39;fonts/MyMSDFFont.fnt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapText</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;Loaded MSDF font!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        fontFamily<span class="token operator">:</span> <span class="token string">&#39;MyMSDFFont&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-5-2-3-限制和注意事项" tabindex="-1"><a class="header-anchor" href="#_7-5-2-3-限制和注意事项"><span>7.5.2.3 限制和注意事项</span></a></h4><ol><li>无法更新分辨率</li></ol><p><code>BitmapText.resolution</code> 不可变。必须由 <code>BitmapFont</code>处理</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">text<span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [BitmapText] dynamically updating the resolution is not supported.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>大字符集不实用</li></ol><p>位图字体受纹理大小的限制。CJK或表情符号丰富的集合可能需要太多的内存。使用 <code>Text</code> 或 <code>HTMLText</code> 来支持动态国际化或表情符号。</p><h3 id="_7-5-3-hmtl文本" tabindex="-1"><a class="header-anchor" href="#_7-5-3-hmtl文本"><span>7.5.3 HMTL文本</span></a></h3><p><code>HTMLText</code> 使样式化，格式化的HTML字符串作为PixiJS场景图形的一部分呈现。它使用SVG  <code>&lt;foreignObject&gt;</code> 来将浏览器原生的HTML嵌入到WebGL画布中。</p><p>这使得它非常适合渲染复杂的排版、内联格式、表情符号和布局效果，这些都是使用传统的画布渲染文本难以复制的。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> HTMLText <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLText</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;&lt;strong&gt;Hello&lt;/strong&gt; &lt;em&gt;PixiJS&lt;/em&gt;!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        fontFamily<span class="token operator">:</span> <span class="token string">&#39;Arial&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        fontSize<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span></span>
<span class="line">        fill<span class="token operator">:</span> <span class="token string">&#39;#ff1010&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        align<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>为什么使用 <code>HTMLText</code> ？​</li></ol><ul><li>支持行内标签像 <code>&lt;b&gt;</code> ,  <code>&lt;i&gt;</code> ,  <code>&lt;span&gt;</code> ,等等。</li><li>兼容表情符号，Unicode和RTL文本</li><li>通过CSS的细粒度布局控制</li><li>标签样式覆盖( <code>&lt;warning&gt;</code> ,  <code>&lt;link&gt;</code> ,等等)。</li></ul><ol start="2"><li>异步渲染行为</li></ol><p>HTML文本使用SVG  <code>&lt;foreignObject&gt;</code> 在画布内绘制HTML。结果是：</p><ul><li>呈现是异步发生的。通常在下一帧之后。</li><li>文本内容在实例化后不会立即可见。</li></ul><ol start="3"><li><strong>Styling HTMLText</strong></li></ol><p><code>HTMLTextStyle</code> extends <code>TextStyle</code> and adds:</p><ul><li><strong>HTML-aware tag-based styles</strong> via <code>tagStyles</code></li><li><strong>CSS override support</strong> via <code>cssOverrides</code></li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> fancy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLText</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;&lt;red&gt;Red&lt;/red&gt;, &lt;blue&gt;Blue&lt;/blue&gt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        fontFamily<span class="token operator">:</span> <span class="token string">&#39;DM Sans&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        fontSize<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span></span>
<span class="line">        fill<span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        tagStyles<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            red<span class="token operator">:</span> <span class="token punctuation">{</span> fill<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            blue<span class="token operator">:</span> <span class="token punctuation">{</span> fill<span class="token operator">:</span> <span class="token string">&#39;blue&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>CSS Overrides</li></ol><p>您可以使用<code>cssOverrides</code>属性将CSS样式应用于文本。这允许您设置“文本阴影”、“文本装饰”等属性。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">fancy<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">addOverride</span><span class="token punctuation">(</span><span class="token string">&#39;text-shadow: 2px 2px 4px rgba(0,0,0,0.5)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-5-4-文本样式" tabindex="-1"><a class="header-anchor" href="#_7-5-4-文本样式"><span>7.5.4 文本样式</span></a></h3><ol><li>样式</li></ol><p><code>TextStyle</code> 类封装了文本的所有视觉样式属性。您可以定义颜色、字体系列、笔画、阴影、对齐、行间距、换行等等。</p><p>一个 <code>TextStyle</code> 实例可以跨多个 <code>Text</code> 对象重用，从而使代码更简洁并提高内存效率。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> TextStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    fontFamily<span class="token operator">:</span> <span class="token string">&#39;Arial&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    fontSize<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    fill<span class="token operator">:</span> <span class="token string">&#39;#ffffff&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    stroke<span class="token operator">:</span> <span class="token string">&#39;#000000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    strokeThickness<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">    dropShadow<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        color<span class="token operator">:</span> <span class="token string">&#39;#000000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        blur<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        distance<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        angle<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        alpha<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    text<span class="token operator">:</span> <span class="token string">&#39;Score: 1234&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    style<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>填充和描边</li></ol><p>使用填充和笔画与 <code>Graphics</code> 类相同。您可以在图形填充部分找到有关它们的更多详细信息。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 使用数字颜色</span></span>
<span class="line"><span class="token keyword">const</span> fill <span class="token operator">=</span> <span class="token number">0xff0000</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用十六禁止颜色</span></span>
<span class="line"><span class="token keyword">const</span> fill <span class="token operator">=</span> <span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用rgb 颜色</span></span>
<span class="line"><span class="token keyword">const</span> fill <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用颜色对象</span></span>
<span class="line"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> obj4 <span class="token operator">=</span> color<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用渐变</span></span>
<span class="line"><span class="token keyword">const</span> fill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillGradient</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> <span class="token string">&#39;linear&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    colorStops<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;yellow&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> offset<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">:</span> <span class="token string">&#39;green&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用图案</span></span>
<span class="line"><span class="token keyword">const</span> txt <span class="token operator">=</span> <span class="token keyword">await</span> Assets<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">load</span><span class="token generic class-name"><span class="token operator">&lt;</span>Texture<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;https://pixijs.com/assets/bg_scene_rotate.jpg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> fill <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FillPattern</span><span class="token punctuation">(</span>txt<span class="token punctuation">,</span> <span class="token string">&#39;repeat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在TextStyle中使用填充</span></span>
<span class="line"><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    fontSize<span class="token operator">:</span> <span class="token number">48</span><span class="token punctuation">,</span></span>
<span class="line">    fill<span class="token operator">:</span> fill<span class="token punctuation">,</span></span>
<span class="line">    stroke<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        fill<span class="token punctuation">,</span></span>
<span class="line">        width<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>阴影</li></ol><p>在v8中 <code>dropShadow</code> 和它的属性现在是对象。要更新投影，您可以直接在 <code>dropShadow</code> 对象上设置属性。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextStyle</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    dropShadow<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        color<span class="token operator">:</span> <span class="token string">&#39;#000000&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        alpha<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line">        angle<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">        blur<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">        distance<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">style<span class="token punctuation">.</span>dropShadow<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;#ff0000&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Change shadow color</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-6-mesh" tabindex="-1"><a class="header-anchor" href="#_7-6-mesh"><span>7.6 Mesh</span></a></h2><p>PixiJS v8提供了一个强大的 <code>Mesh</code> 系统，提供了对几何图形、uv、索引、着色器和WebGL/WebGPU状态的完全控制。网格是自定义渲染效果、高级失真、透视操作或性能调整渲染管道的理想选择。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Texture<span class="token punctuation">,</span> Mesh<span class="token punctuation">,</span> MeshGeometry<span class="token punctuation">,</span> Shader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeshGeometry</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    positions<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    uvs<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    indices<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> shader <span class="token operator">=</span> Shader<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    gl<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        vertex<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">            attribute vec2 aPosition;</span>
<span class="line">            attribute vec2 aUV;</span>
<span class="line">            varying vec2 vUV;</span>
<span class="line">            void main() {</span>
<span class="line">                gl_Position = vec4(aPosition / 100.0 - 1.0, 0.0, 1.0);</span>
<span class="line">                vUV = aUV;</span>
<span class="line">            }</span>
<span class="line">        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">        fragment<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">            precision mediump float;</span>
<span class="line">            varying vec2 vUV;</span>
<span class="line">            uniform sampler2D uSampler;</span>
<span class="line">            void main() {</span>
<span class="line">                gl_FragColor = texture2D(uSampler, vUV);</span>
<span class="line">            }</span>
<span class="line">        </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    resources<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        uSampler<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>source<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mesh</span><span class="token punctuation">(</span><span class="token punctuation">{</span> geometry<span class="token punctuation">,</span> shader <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>mesh<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-6-1-什么是mesh-​" tabindex="-1"><a class="header-anchor" href="#_7-6-1-什么是mesh-​"><span>7.6.1 什么是Mesh？​</span></a></h3><p>Mesh是由以下元素组成的低级渲染原语：</p><ul><li>几何：顶点位置、uv、索引和其他属性</li><li>Shader：一个定义几何图形如何渲染的GPU程序</li><li>状态：GPU状态配置（如混合、深度、模板）</li></ul><p>有了这些元素，你可以构建任何东西，从简单的四边形到曲面和程序效果。</p><h3 id="_7-6-2-meshgeometry" tabindex="-1"><a class="header-anchor" href="#_7-6-2-meshgeometry"><span>7.6.2 MeshGeometry</span></a></h3><p>PixiJS中的所有网格都是使用 <code>MeshGeometry</code> 类构建的。这个类允许你定义顶点位置，UV坐标，以及描述网格形状和纹理映射的索引。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeshGeometry</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    positions<span class="token operator">:</span> Float32Array<span class="token punctuation">,</span> <span class="token comment">// 2 floats per vertex</span></span>
<span class="line">    uvs<span class="token operator">:</span> Float32Array<span class="token punctuation">,</span> <span class="token comment">// matching number of floats</span></span>
<span class="line">    indices<span class="token operator">:</span> Uint32Array<span class="token punctuation">,</span> <span class="token comment">// 3 indices per triangle</span></span>
<span class="line">    topology<span class="token operator">:</span> <span class="token string">&#39;triangle-list&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以直接访问和修改缓冲区：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">geometry<span class="token punctuation">.</span>positions<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span></span>
<span class="line">geometry<span class="token punctuation">.</span>uvs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span></span>
<span class="line">geometry<span class="token punctuation">.</span>indices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-6-3-内置网格类型" tabindex="-1"><a class="header-anchor" href="#_7-6-3-内置网格类型"><span>7.6.3 内置网格类型</span></a></h3><ol><li>MeshSimple</li></ol><p><code>Mesh</code> 的最小包装器，直接接受顶点、UV和索引数组。适用于快速静态或动态网格。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeshSimple</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    vertices<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    uvs<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Float32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    indices<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用 <code>autoUpdate = true</code> 来更新每帧的几何图形。</li><li>Access  <code>mesh.vertices</code> 读写数据。</li></ul><ol start="2"><li>MeshRope</li></ol><p>沿着一系列控制点弯曲纹理，通常用于小径，蛇和动画丝带。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> rope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeshRope</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;snake.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    points<span class="token punctuation">,</span></span>
<span class="line">    textureScale<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// optional</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>textureScale &gt; 0</code> 重复纹理； <code>0</code> 拉伸它。</li><li><code>autoUpdate = true</code> 每帧重新计算几何。</li></ul><ol start="3"><li>MeshPlane</li></ol><p>一种灵活的细分四边形网格，适用于扭曲或基于网格的翘曲。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> plane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MeshPlane</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    verticesX<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    verticesY<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当 <code>autoResize = true</code> 时，自动调整纹理更新的大小。</li></ul><ol start="4"><li>PerspectiveMesh</li></ol><p><code>MeshPlane</code> 的特殊子类，通过转换uv应用透视校正。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> mesh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PerspectiveMesh</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    verticesX<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">    verticesY<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">    x0<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    y0<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    x1<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span></span>
<span class="line">    y1<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    x2<span class="token operator">:</span> <span class="token number">280</span><span class="token punctuation">,</span></span>
<span class="line">    y2<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span></span>
<span class="line">    x3<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">    y3<span class="token operator">:</span> <span class="token number">280</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通过 <code>setCorners(...)</code> 设置角坐标。</li><li>理想的模拟3D投影在2D。</li></ul><h2 id="_7-7-particlecontainer" tabindex="-1"><a class="header-anchor" href="#_7-7-particlecontainer"><span>7.7 ParticleContainer</span></a></h2><p>ixiJS v8通过 <code>ParticleContainer</code> 和 <code>Particle</code> 类引入了高性能粒子系统。专为渲染大量轻量级视觉效果而设计，如火花、气泡、兔子或爆炸，该系统通过剥离所有不必要的开销来提供原始速度。</p><p><strong>实验性空气污染指数公告</strong></p><p>粒子API是稳定的，但只是实验性的。它的界面可能会在未来的PixiJS版本中发展。我们欢迎反馈意见，以帮助指导其发展。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ParticleContainer<span class="token punctuation">,</span> Particle<span class="token punctuation">,</span> Texture <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pixi.js&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> texture <span class="token operator">=</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;bunny.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParticleContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    dynamicProperties<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        position<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// default</span></span>
<span class="line">        scale<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        rotation<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        color<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> particle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Particle</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        texture<span class="token punctuation">,</span></span>
<span class="line">        x<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800</span><span class="token punctuation">,</span></span>
<span class="line">        y<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">600</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    container<span class="token punctuation">.</span><span class="token function">addParticle</span><span class="token punctuation">(</span>particle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span>stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-7-1-为什么要使用粒子容器-​" tabindex="-1"><a class="header-anchor" href="#_7-7-1-为什么要使用粒子容器-​"><span>7.7.1 为什么要使用粒子容器？​</span></a></h3><ul><li>极致性能：以高FPS渲染数十万甚至数百万个粒子。</li><li>轻量级设计：粒子比 <code>Sprite</code> 更有效，缺少子、事件或过滤器等额外功能。</li><li>细粒度控制：通过声明哪些属性是动态的（每帧更新）或静态的（设置一次）来优化呈现。</li></ul><p><strong>性能提示：静态vs.动态</strong></p><ul><li>动态属性每帧上传到GPU。</li><li>只有在调用 <code>update()</code> 时才上传静态属性。</li></ul><p>明确声明你的需求：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParticleContainer</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    dynamicProperties<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        position<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        rotation<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        scale<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        color<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果以后修改静态属性或粒子列表，必须调用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line">container<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-7-2-限制和api差异" tabindex="-1"><a class="header-anchor" href="#_7-7-2-限制和api差异"><span>7.7.2 限制和API差异</span></a></h3><p><code>ParticleContainer</code> 是为了速度和简单而设计的。因此，它不支持完整的 <code>Container</code>  API：</p><ol><li>不可用：</li></ol><ul><li><code>addChild()</code> 、 <code>removeChild()</code></li><li><code>getChildAt()</code> 、 <code>setChildIndex()</code></li><li><code>swapChildren()</code> 、 <code>reparentChild()</code></li></ul><ol start="2"><li>代替使用：</li></ol><ul><li><code>addParticle(particle)</code></li><li><code>removeParticle(particle)</code></li><li><code>removeParticles(beginIndex, endIndex)</code></li><li><code>addParticleAt(particle, index)</code></li><li><code>removeParticleAt(index)</code></li></ul><p>这些方法对 <code>.particleChildren</code> 数组进行操作，并正确维护内部GPU缓冲区。</p><h3 id="_7-7-3-创建粒子" tabindex="-1"><a class="header-anchor" href="#_7-7-3-创建粒子"><span>7.7.3 创建粒子</span></a></h3><p>A  <code>Particle</code> 支持键显示属性，效率远高于 <code>Sprite</code> 。</p><ol><li>粒子的例子</li></ol><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> particle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Particle</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    texture<span class="token operator">:</span> Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;spark.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    x<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">    y<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    scaleX<span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span></span>
<span class="line">    scaleY<span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span></span>
<span class="line">    rotation<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">    tint<span class="token operator">:</span> <span class="token number">0xff0000</span><span class="token punctuation">,</span></span>
<span class="line">    alpha<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以使用简写：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> particle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Particle</span><span class="token punctuation">(</span>Texture<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;spark.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,452)]))}const S=s(y,[["render",f]]),_=JSON.parse('{"path":"/animation/pixi/official/07.html","title":"七、场景相关","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1752490925000,"contributors":[{"name":"zhao-farmer","username":"zhao-farmer","email":"857899180@qq.com","commits":1,"url":"https://github.com/zhao-farmer"}],"changelog":[{"hash":"08d014805d6447d2221b34fe03fdc2ca18411d66","time":1752490925000,"email":"857899180@qq.com","author":"zhao-farmer","message":"2025年7月更新"}]},"filePathRelative":"animation/pixi/official/07.md"}');export{S as comp,_ as data};
